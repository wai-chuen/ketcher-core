{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { BaseOperation } from './base';\r\nimport { OperationType } from './OperationType';\r\n// todo: separate classes: now here is circular dependency in `invert` method\r\nclass UpdateIfThen extends BaseOperation {\r\n    rgid_new;\r\n    rgid_old;\r\n    ifThenHistory;\r\n    skipRgids;\r\n    constructor(rgNew, rgOld, skipRgids = []) {\r\n        super(OperationType.UPDATE_IF_THEN);\r\n        this.rgid_new = rgNew;\r\n        this.rgid_old = rgOld;\r\n        this.ifThenHistory = new Map();\r\n        this.skipRgids = skipRgids || [];\r\n    }\r\n    execute(restruct) {\r\n        const struct = restruct.molecule;\r\n        struct.rgroups.forEach((rg, rgid) => {\r\n            if (rg.ifthen === this.rgid_old && !this.skipRgids.includes(rgid)) {\r\n                rg.ifthen = this.rgid_new;\r\n                this.ifThenHistory.set(rgid, this.rgid_old);\r\n                struct.rgroups.set(rgid, rg);\r\n            }\r\n        });\r\n    }\r\n    invert() {\r\n        return new RestoreIfThen(this.rgid_new, this.rgid_old, this.ifThenHistory);\r\n    }\r\n}\r\nclass RestoreIfThen extends BaseOperation {\r\n    rgid_new;\r\n    rgid_old;\r\n    ifThenHistory;\r\n    constructor(rgNew, rgOld, history) {\r\n        super(OperationType.RESTORE_IF_THEN);\r\n        this.rgid_new = rgNew;\r\n        this.rgid_old = rgOld;\r\n        this.ifThenHistory = history || new Map();\r\n    }\r\n    execute(restruct) {\r\n        const struct = restruct.molecule;\r\n        this.ifThenHistory.forEach((rg, rgid) => {\r\n            const rgValue = struct.rgroups.get(rgid);\r\n            rgValue.ifthen = rg;\r\n            struct.rgroups.set(rgid, rgValue);\r\n        });\r\n    }\r\n    invert() {\r\n        return new UpdateIfThen(this.rgid_old, this.rgid_new);\r\n    }\r\n}\r\nexport { UpdateIfThen, RestoreIfThen };\r\n//# sourceMappingURL=ifThen.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/base.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/OperationType.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/index.ts"],"map":"{\"version\":3,\"file\":\"ifThen.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/application/editor/operations/ifThen.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,OAAO,EAAE,aAAa,EAAE,MAAM,QAAQ,CAAA;AACtC,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAA;AAG/C,6EAA6E;AAE7E,MAAM,YAAa,SAAQ,aAAa;IACtC,QAAQ,CAAK;IACb,QAAQ,CAAK;IACb,aAAa,CAAK;IAClB,SAAS,CAAO;IAEhB,YAAY,KAAU,EAAE,KAAU,EAAE,YAAiB,EAAE;QACrD,KAAK,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA;QACnC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;QACrB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;QACrB,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAA;QAC9B,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,EAAE,CAAA;IAClC,CAAC;IAED,OAAO,CAAC,QAAkB;QACxB,MAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAA;QAEhC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YAClC,IAAI,EAAE,CAAC,MAAM,KAAK,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACjE,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAA;gBACzB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;gBAC3C,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;aAC7B;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAA;IAC5E,CAAC;CACF;AAED,MAAM,aAAc,SAAQ,aAAa;IACvC,QAAQ,CAAK;IACb,QAAQ,CAAK;IACb,aAAa,CAAK;IAElB,YAAY,KAAU,EAAE,KAAU,EAAE,OAAY;QAC9C,KAAK,CAAC,aAAa,CAAC,eAAe,CAAC,CAAA;QACpC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;QACrB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;QACrB,IAAI,CAAC,aAAa,GAAG,OAAO,IAAI,IAAI,GAAG,EAAE,CAAA;IAC3C,CAAC;IAED,OAAO,CAAC,QAAkB;QACxB,MAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAA;QAEhC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YACtC,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAA;YACzC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAA;YACnB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;QACnC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;IACvD,CAAC;CACF;AAED,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,CAAA\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/operations/ifThen.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { BaseOperation } from './base';\r\nimport { ReStruct } from '../../render';\r\ndeclare class UpdateIfThen extends BaseOperation {\r\n    rgid_new: any;\r\n    rgid_old: any;\r\n    ifThenHistory: any;\r\n    skipRgids: any[];\r\n    constructor(rgNew: any, rgOld: any, skipRgids?: any);\r\n    execute(restruct: ReStruct): void;\r\n    invert(): RestoreIfThen;\r\n}\r\ndeclare class RestoreIfThen extends BaseOperation {\r\n    rgid_new: any;\r\n    rgid_old: any;\r\n    ifThenHistory: any;\r\n    constructor(rgNew: any, rgOld: any, history: any);\r\n    execute(restruct: ReStruct): void;\r\n    invert(): UpdateIfThen;\r\n}\r\nexport { UpdateIfThen, RestoreIfThen };\r\n"}}
