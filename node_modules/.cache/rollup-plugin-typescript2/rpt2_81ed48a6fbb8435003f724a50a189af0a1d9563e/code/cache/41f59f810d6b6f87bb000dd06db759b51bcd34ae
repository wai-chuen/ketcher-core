{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { SimpleObject, SimpleObjectMode, Vec2 } from \"../../../domain/entities\";\r\nimport Base from './base';\r\nimport { OperationType } from './OperationType';\r\nimport { ReSimpleObject } from '../../render';\r\nimport { Scale } from \"../../../domain/helpers\";\r\nimport { tfx } from \"../../../utilities\";\r\nexport class SimpleObjectAdd extends Base {\r\n    data;\r\n    constructor(pos = [], mode = SimpleObjectMode.line, toCircle = false, id) {\r\n        super(OperationType.SIMPLE_OBJECT_ADD);\r\n        this.data = { pos, mode, toCircle, id };\r\n    }\r\n    execute(restruct) {\r\n        const struct = restruct.molecule;\r\n        const item = new SimpleObject({ mode: this.data.mode });\r\n        if (this.data.id == null) {\r\n            const index = struct.simpleObjects.add(item);\r\n            this.data.id = index;\r\n        }\r\n        else {\r\n            struct.simpleObjects.set(this.data.id, item);\r\n        }\r\n        const itemId = this.data.id;\r\n        restruct.simpleObjects.set(itemId, new ReSimpleObject(item));\r\n        const positions = [...this.data.pos];\r\n        if (this.data.toCircle) {\r\n            positions[1] = makeCircleFromEllipse(positions[0], positions[1]);\r\n        }\r\n        struct.simpleObjectSetPos(itemId, positions.map((p) => new Vec2(p)));\r\n        Base.invalidateItem(restruct, 'simpleObjects', itemId, 1);\r\n    }\r\n    invert() {\r\n        return new SimpleObjectDelete(this.data.id);\r\n    }\r\n}\r\nexport class SimpleObjectDelete extends Base {\r\n    data;\r\n    performed;\r\n    constructor(id) {\r\n        super(OperationType.SIMPLE_OBJECT_DELETE);\r\n        this.data = { id, pos: [], mode: SimpleObjectMode.line, toCircle: false };\r\n        this.performed = false;\r\n    }\r\n    execute(restruct) {\r\n        const struct = restruct.molecule;\r\n        const item = struct.simpleObjects.get(this.data.id);\r\n        // save to data current values. In future they could be used in invert for restoring simple object\r\n        this.data.pos = item.pos;\r\n        this.data.mode = item.mode;\r\n        this.data.toCircle = item.toCircle;\r\n        this.performed = true;\r\n        restruct.markItemRemoved();\r\n        restruct.clearVisel(restruct.simpleObjects.get(this.data.id).visel);\r\n        restruct.simpleObjects.delete(this.data.id);\r\n        struct.simpleObjects.delete(this.data.id);\r\n    }\r\n    invert() {\r\n        return new SimpleObjectAdd(this.data.pos, this.data.mode, this.data.toCircle, this.data.id);\r\n    }\r\n}\r\nexport class SimpleObjectMove extends Base {\r\n    data;\r\n    constructor(id, d, noinvalidate) {\r\n        super(OperationType.SIMPLE_OBJECT_MOVE);\r\n        this.data = { id, d, noinvalidate };\r\n    }\r\n    execute(restruct) {\r\n        const struct = restruct.molecule;\r\n        const id = this.data.id;\r\n        const d = this.data.d;\r\n        const item = struct.simpleObjects.get(id);\r\n        item.pos.forEach((p) => p.add_(d));\r\n        restruct.simpleObjects\r\n            .get(id)\r\n            .visel.translate(Scale.obj2scaled(d, restruct.render.options));\r\n        this.data.d = d.negated();\r\n        if (!this.data.noinvalidate) {\r\n            Base.invalidateItem(restruct, 'simpleObjects', id, 1);\r\n        }\r\n    }\r\n    invert() {\r\n        const move = new SimpleObjectMove(this.data.id, this.data.d, this.data.noinvalidate);\r\n        // todo Need further investigation on why this is needed?\r\n        move.data = this.data;\r\n        return move;\r\n    }\r\n}\r\nfunction handleRectangleChangeWithAnchor(item, anchor, current) {\r\n    const previousPos0 = item.pos[0].get_xy0();\r\n    const previousPos1 = item.pos[1].get_xy0();\r\n    if (tfx(anchor.x) === tfx(item.pos[1].x)) {\r\n        item.pos[1].x = anchor.x = current.x;\r\n        current.x = previousPos1.x;\r\n    }\r\n    if (tfx(anchor.y) === tfx(item.pos[1].y)) {\r\n        item.pos[1].y = anchor.y = current.y;\r\n        current.y = previousPos1.y;\r\n    }\r\n    if (tfx(anchor.x) === tfx(item.pos[0].x)) {\r\n        item.pos[0].x = anchor.x = current.x;\r\n        current.x = previousPos0.x;\r\n    }\r\n    if (tfx(anchor.y) === tfx(item.pos[0].y)) {\r\n        item.pos[0].y = anchor.y = current.y;\r\n        current.y = previousPos0.y;\r\n    }\r\n}\r\nexport class SimpleObjectResize extends Base {\r\n    data;\r\n    constructor(id, d, current, anchor, noinvalidate, toCircle) {\r\n        super(OperationType.SIMPLE_OBJECT_RESIZE);\r\n        this.data = { id, d, current, anchor, noinvalidate, toCircle };\r\n    }\r\n    execute(restruct) {\r\n        const struct = restruct.molecule;\r\n        const id = this.data.id;\r\n        const d = this.data.d;\r\n        const current = this.data.current;\r\n        const item = struct.simpleObjects.get(id);\r\n        const anchor = this.data.anchor;\r\n        if (item.mode === SimpleObjectMode.ellipse) {\r\n            if (anchor) {\r\n                handleRectangleChangeWithAnchor(item, anchor, current);\r\n            }\r\n            else if (this.data.toCircle) {\r\n                const previousPos1 = item.pos[1].get_xy0();\r\n                const circlePoint = makeCircleFromEllipse(item.pos[0], current);\r\n                item.pos[1].x = circlePoint.x;\r\n                item.pos[1].y = circlePoint.y;\r\n                this.data.current = previousPos1;\r\n            }\r\n            else {\r\n                const previousPos1 = item.pos[1].get_xy0();\r\n                item.pos[1].x = current.x;\r\n                item.pos[1].y = current.y;\r\n                this.data.current = previousPos1;\r\n            }\r\n        }\r\n        else if (item.mode === SimpleObjectMode.line && anchor) {\r\n            const previousPos0 = item.pos[0].get_xy0();\r\n            const previousPos1 = item.pos[1].get_xy0();\r\n            if (tfx(anchor.x) === tfx(item.pos[1].x) &&\r\n                tfx(anchor.y) === tfx(item.pos[1].y)) {\r\n                item.pos[1].x = anchor.x = current.x;\r\n                current.x = previousPos1.x;\r\n                item.pos[1].y = anchor.y = current.y;\r\n                current.y = previousPos1.y;\r\n            }\r\n            if (tfx(anchor.x) === tfx(item.pos[0].x) &&\r\n                tfx(anchor.y) === tfx(item.pos[0].y)) {\r\n                item.pos[0].x = anchor.x = current.x;\r\n                current.x = previousPos0.x;\r\n                item.pos[0].y = anchor.y = current.y;\r\n                current.y = previousPos0.y;\r\n            }\r\n        }\r\n        else if (item.mode === SimpleObjectMode.rectangle && anchor) {\r\n            handleRectangleChangeWithAnchor(item, anchor, current);\r\n        }\r\n        else\r\n            item.pos[1].add_(d);\r\n        restruct.simpleObjects\r\n            .get(id)\r\n            .visel.translate(Scale.obj2scaled(d, restruct.render.options));\r\n        this.data.d = d.negated();\r\n        if (!this.data.noinvalidate) {\r\n            Base.invalidateItem(restruct, 'simpleObjects', id, 1);\r\n        }\r\n    }\r\n    invert() {\r\n        return new SimpleObjectResize(this.data.id, this.data.d, this.data.current, this.data.anchor, this.data.noinvalidate, this.data.toCircle);\r\n    }\r\n}\r\nexport function makeCircleFromEllipse(position0, position1) {\r\n    const diff = Vec2.diff(position1, position0);\r\n    const min = Math.abs(diff.x) < Math.abs(diff.y) ? diff.x : diff.y;\r\n    return new Vec2(position0.x + (diff.x > 0 ? 1 : -1) * Math.abs(min), position0.y + (diff.y > 0 ? 1 : -1) * Math.abs(min), 0);\r\n}\r\n//# sourceMappingURL=simpleObject.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/base.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/OperationType.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/helpers/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/utilities/index.ts"],"map":"{\"version\":3,\"file\":\"simpleObject.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/application/editor/operations/simpleObject.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/operations/simpleObject.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { SimpleObjectMode, Vec2 } from \"../../../domain/entities\";\r\nimport Base from './base';\r\ninterface SimpleObjectAddData {\r\n    id?: number;\r\n    pos: Array<Vec2>;\r\n    mode: SimpleObjectMode;\r\n    toCircle: boolean;\r\n}\r\nexport declare class SimpleObjectAdd extends Base {\r\n    data: SimpleObjectAddData;\r\n    constructor(pos?: Array<Vec2>, mode?: SimpleObjectMode, toCircle?: boolean, id?: number);\r\n    execute(restruct: any): void;\r\n    invert(): Base;\r\n}\r\ninterface SimpleObjectDeleteData {\r\n    id: number;\r\n    pos?: Array<Vec2>;\r\n    mode?: SimpleObjectMode;\r\n    toCircle?: boolean;\r\n}\r\nexport declare class SimpleObjectDelete extends Base {\r\n    data: SimpleObjectDeleteData;\r\n    performed: boolean;\r\n    constructor(id: number);\r\n    execute(restruct: any): void;\r\n    invert(): Base;\r\n}\r\ninterface SimpleObjectMoveData {\r\n    id: number;\r\n    d: any;\r\n    noinvalidate: boolean;\r\n}\r\nexport declare class SimpleObjectMove extends Base {\r\n    data: SimpleObjectMoveData;\r\n    constructor(id: number, d: any, noinvalidate: boolean);\r\n    execute(restruct: any): void;\r\n    invert(): Base;\r\n}\r\ninterface SimpleObjectResizeData {\r\n    id: number;\r\n    d: any;\r\n    current: Vec2;\r\n    anchor: Vec2;\r\n    noinvalidate: boolean;\r\n    toCircle: boolean;\r\n}\r\nexport declare class SimpleObjectResize extends Base {\r\n    data: SimpleObjectResizeData;\r\n    constructor(id: number, d: any, current: Vec2, anchor: any, noinvalidate: boolean, toCircle: boolean);\r\n    execute(restruct: any): void;\r\n    invert(): Base;\r\n}\r\nexport declare function makeCircleFromEllipse(position0: Vec2, position1: Vec2): Vec2;\r\nexport {};\r\n"}}
