{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Struct, Vec2 } from \"../../entities\";\r\nimport { arrowToKet, plusToKet } from './toKet/rxnToKet';\r\nimport { headerToKet } from './toKet/headerToKet';\r\nimport { moleculeToKet } from './toKet/moleculeToKet';\r\nimport { moleculeToStruct } from './fromKet/moleculeToStruct';\r\nimport { prepareStructForKet } from './toKet/prepare';\r\nimport { rgroupToKet } from './toKet/rgroupToKet';\r\nimport { rgroupToStruct } from './fromKet/rgroupToStruct';\r\nimport { rxnToStruct } from './fromKet/rxnToStruct';\r\nimport { simpleObjectToKet } from './toKet/simpleObjectToKet';\r\nimport { simpleObjectToStruct } from './fromKet/simpleObjectToStruct';\r\nimport { textToKet } from './toKet/textToKet';\r\nimport { textToStruct } from './fromKet/textToStruct';\r\nimport { validate } from './validate';\r\nfunction parseNode(node, struct) {\r\n    const type = node.type;\r\n    switch (type) {\r\n        case 'arrow': {\r\n            rxnToStruct(node, struct);\r\n            break;\r\n        }\r\n        case 'plus': {\r\n            rxnToStruct(node, struct);\r\n            break;\r\n        }\r\n        case 'simpleObject': {\r\n            simpleObjectToStruct(node, struct);\r\n            break;\r\n        }\r\n        case 'molecule': {\r\n            const currentStruct = moleculeToStruct(node);\r\n            if (node.stereoFlagPosition) {\r\n                const fragment = currentStruct.frags.get(0);\r\n                fragment.stereoFlagPosition = new Vec2(node.stereoFlagPosition);\r\n            }\r\n            currentStruct.mergeInto(struct);\r\n            break;\r\n        }\r\n        case 'rgroup': {\r\n            rgroupToStruct(node).mergeInto(struct);\r\n            break;\r\n        }\r\n        case 'text': {\r\n            textToStruct(node, struct);\r\n            break;\r\n        }\r\n        default:\r\n            break;\r\n    }\r\n}\r\nexport class KetSerializer {\r\n    deserialize(content) {\r\n        const resultingStruct = new Struct();\r\n        const ket = JSON.parse(content);\r\n        if (!validate(ket)) {\r\n            throw new Error('Cannot deserialize input JSON.');\r\n        }\r\n        const nodes = ket.root.nodes;\r\n        Object.keys(nodes).forEach((i) => {\r\n            if (nodes[i].type)\r\n                parseNode(nodes[i], resultingStruct);\r\n            else if (nodes[i].$ref)\r\n                parseNode(ket[nodes[i].$ref], resultingStruct);\r\n        });\r\n        resultingStruct.name = ket.header ? ket.header.moleculeName : null;\r\n        return resultingStruct;\r\n    }\r\n    serialize(struct) {\r\n        const result = {\r\n            root: {\r\n                nodes: []\r\n            }\r\n        };\r\n        const header = headerToKet(struct);\r\n        if (header)\r\n            result.header = header;\r\n        const ketNodes = prepareStructForKet(struct);\r\n        let moleculeId = 0;\r\n        ketNodes.forEach((item) => {\r\n            switch (item.type) {\r\n                case 'molecule': {\r\n                    result.root.nodes.push({ $ref: `mol${moleculeId}` });\r\n                    result[`mol${moleculeId++}`] = moleculeToKet(item.fragment);\r\n                    break;\r\n                }\r\n                case 'rgroup': {\r\n                    result.root.nodes.push({ $ref: `rg${item.data.rgnumber}` });\r\n                    result[`rg${item.data.rgnumber}`] = rgroupToKet(item.fragment, item.data);\r\n                    break;\r\n                }\r\n                case 'plus': {\r\n                    result.root.nodes.push(plusToKet(item));\r\n                    break;\r\n                }\r\n                case 'arrow': {\r\n                    result.root.nodes.push(arrowToKet(item));\r\n                    break;\r\n                }\r\n                case 'simpleObject': {\r\n                    result.root.nodes.push(simpleObjectToKet(item));\r\n                    break;\r\n                }\r\n                case 'text': {\r\n                    result.root.nodes.push(textToKet(item));\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n        return JSON.stringify(result, null, 4);\r\n    }\r\n}\r\n//# sourceMappingURL=ketSerializer.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/toKet/rxnToKet.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/serializers.types.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/toKet/headerToKet.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/toKet/moleculeToKet.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/fromKet/moleculeToStruct.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/toKet/prepare.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/toKet/rgroupToKet.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/fromKet/rgroupToStruct.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/fromKet/rxnToStruct.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/toKet/simpleObjectToKet.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/fromKet/simpleObjectToStruct.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/toKet/textToKet.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/fromKet/textToStruct.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/ket/validate.ts"],"map":"{\"version\":3,\"file\":\"ketSerializer.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/domain/serializers/ket/ketSerializer.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,uBAAuB;AAC9C,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAA;AAGxD,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAA;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAA;AACrD,OAAO,EAAE,gBAAgB,EAAE,MAAM,4BAA4B,CAAA;AAC7D,OAAO,EAAE,mBAAmB,EAAE,MAAM,iBAAiB,CAAA;AACrD,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAA;AACjD,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAA;AACzD,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AACnD,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAA;AAC7D,OAAO,EAAE,oBAAoB,EAAE,MAAM,gCAAgC,CAAA;AACrE,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAA;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAA;AACrD,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAA;AAErC,SAAS,SAAS,CAAC,IAAS,EAAE,MAAW;IACvC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;IACtB,QAAQ,IAAI,EAAE;QACZ,KAAK,OAAO,CAAC,CAAC;YACZ,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;YACzB,MAAK;SACN;QACD,KAAK,MAAM,CAAC,CAAC;YACX,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;YACzB,MAAK;SACN;QACD,KAAK,cAAc,CAAC,CAAC;YACnB,oBAAoB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;YAClC,MAAK;SACN;QACD,KAAK,UAAU,CAAC,CAAC;YACf,MAAM,aAAa,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAA;YAC5C,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBAC3B,MAAM,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAE,CAAA;gBAC5C,QAAQ,CAAC,kBAAkB,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;aAChE;YAED,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;YAC/B,MAAK;SACN;QACD,KAAK,QAAQ,CAAC,CAAC;YACb,cAAc,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;YACtC,MAAK;SACN;QACD,KAAK,MAAM,CAAC,CAAC;YACX,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;YAC1B,MAAK;SACN;QACD;YACE,MAAK;KACR;AACH,CAAC;AACD,MAAM,OAAO,aAAa;IACxB,WAAW,CAAC,OAAe;QACzB,MAAM,eAAe,GAAG,IAAI,MAAM,EAAE,CAAA;QACpC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QAC/B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAA;SAClD;QACD,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAA;QAC5B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YAC/B,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;gBAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAA;iBAClD,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;gBAAE,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,CAAA;QACxE,CAAC,CAAC,CAAA;QACF,eAAe,CAAC,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAA;QAElE,OAAO,eAAe,CAAA;IACxB,CAAC;IAED,SAAS,CAAC,MAAc;QACtB,MAAM,MAAM,GAAQ;YAClB,IAAI,EAAE;gBACJ,KAAK,EAAE,EAAE;aACV;SACF,CAAA;QAED,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAA;QAClC,IAAI,MAAM;YAAE,MAAM,CAAC,MAAM,GAAG,MAAM,CAAA;QAElC,MAAM,QAAQ,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAA;QAE5C,IAAI,UAAU,GAAG,CAAC,CAAA;QAClB,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACxB,QAAQ,IAAI,CAAC,IAAI,EAAE;gBACjB,KAAK,UAAU,CAAC,CAAC;oBACf,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,UAAU,EAAE,EAAE,CAAC,CAAA;oBACpD,MAAM,CAAC,MAAM,UAAU,EAAE,EAAE,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,QAAS,CAAC,CAAA;oBAC5D,MAAK;iBACN;gBACD,KAAK,QAAQ,CAAC,CAAC;oBACb,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,IAAI,CAAC,IAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA;oBAC5D,MAAM,CAAC,KAAK,IAAI,CAAC,IAAK,CAAC,QAAQ,EAAE,CAAC,GAAG,WAAW,CAC9C,IAAI,CAAC,QAAS,EACd,IAAI,CAAC,IAAI,CACV,CAAA;oBACD,MAAK;iBACN;gBACD,KAAK,MAAM,CAAC,CAAC;oBACX,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;oBACvC,MAAK;iBACN;gBACD,KAAK,OAAO,CAAC,CAAC;oBACZ,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAA;oBACxC,MAAK;iBACN;gBACD,KAAK,cAAc,CAAC,CAAC;oBACnB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAA;oBAC/C,MAAK;iBACN;gBACD,KAAK,MAAM,CAAC,CAAC;oBACX,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;oBACvC,MAAK;iBACN;gBACD;oBACE,MAAK;aACR;QACH,CAAC,CAAC,CAAA;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;IACxC,CAAC;CACF\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/serializers/ket/ketSerializer.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Struct } from \"../../entities\";\r\nimport { Serializer } from '../serializers.types';\r\nexport declare class KetSerializer implements Serializer<Struct> {\r\n    deserialize(content: string): Struct;\r\n    serialize(struct: Struct): string;\r\n}\r\n"}}
