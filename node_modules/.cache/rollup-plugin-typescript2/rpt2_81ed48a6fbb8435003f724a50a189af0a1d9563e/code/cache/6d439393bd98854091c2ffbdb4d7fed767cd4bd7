{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { BaseOperation } from './base';\r\nimport { OperationType } from './OperationType';\r\nexport class CanvasLoad extends BaseOperation {\r\n    data;\r\n    constructor(struct) {\r\n        super(OperationType.CANVAS_LOAD);\r\n        this.data = { struct };\r\n    }\r\n    execute(restruct) {\r\n        const oldStruct = restruct.molecule;\r\n        restruct.clearVisels(); // TODO: What is it?\r\n        if (this.data.struct) {\r\n            restruct.render.setMolecule(this.data.struct);\r\n        }\r\n        this.data.struct = oldStruct;\r\n    }\r\n    invert() {\r\n        const inverted = new CanvasLoad();\r\n        inverted.data = this.data;\r\n        return inverted;\r\n    }\r\n}\r\n//# sourceMappingURL=CanvasLoad.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/base.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/OperationType.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts"],"map":"{\"version\":3,\"file\":\"CanvasLoad.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/application/editor/operations/CanvasLoad.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,OAAO,EAAE,aAAa,EAAE,MAAM,QAAQ,CAAA;AACtC,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAA;AAI/C,MAAM,OAAO,UAAW,SAAQ,aAAa;IAC3C,IAAI,CAEH;IAED,YAAY,MAAe;QACzB,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,CAAA;QAChC,IAAI,CAAC,IAAI,GAAG,EAAE,MAAM,EAAE,CAAA;IACxB,CAAC;IAED,OAAO,CAAC,QAAkB;QACxB,MAAM,SAAS,GAAG,QAAQ,CAAC,QAAQ,CAAA;QACnC,QAAQ,CAAC,WAAW,EAAE,CAAA,CAAC,oBAAoB;QAC3C,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACpB,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SAC9C;QAED,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAA;IAC9B,CAAC;IAED,MAAM;QACJ,MAAM,QAAQ,GAAG,IAAI,UAAU,EAAE,CAAA;QACjC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;QACzB,OAAO,QAAQ,CAAA;IACjB,CAAC;CACF\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/operations/CanvasLoad.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { BaseOperation } from './base';\r\nimport { ReStruct } from '../../render';\r\nimport { Struct } from \"../../../domain/entities\";\r\nexport declare class CanvasLoad extends BaseOperation {\r\n    data: {\r\n        struct?: Struct;\r\n    };\r\n    constructor(struct?: Struct);\r\n    execute(restruct: ReStruct): void;\r\n    invert(): CanvasLoad;\r\n}\r\n"}}
