{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nexport var ChemicalMimeType;\r\n(function (ChemicalMimeType) {\r\n    ChemicalMimeType[\"Mol\"] = \"chemical/x-mdl-molfile\";\r\n    ChemicalMimeType[\"Rxn\"] = \"chemical/x-mdl-rxnfile\";\r\n    ChemicalMimeType[\"DaylightSmiles\"] = \"chemical/x-daylight-smiles\";\r\n    ChemicalMimeType[\"ExtendedSmiles\"] = \"chemical/x-chemaxon-cxsmiles\";\r\n    ChemicalMimeType[\"DaylightSmarts\"] = \"chemical/x-daylight-smarts\";\r\n    ChemicalMimeType[\"InChI\"] = \"chemical/x-inchi\";\r\n    ChemicalMimeType[\"InChIAuxInfo\"] = \"chemical/x-inchi-aux\";\r\n    ChemicalMimeType[\"CDX\"] = \"chemical/x-cdx\";\r\n    ChemicalMimeType[\"CDXML\"] = \"chemical/x-cdxml\";\r\n    ChemicalMimeType[\"CML\"] = \"chemical/x-cml\";\r\n    ChemicalMimeType[\"KET\"] = \"chemical/x-indigo-ket\";\r\n    ChemicalMimeType[\"UNKNOWN\"] = \"chemical/x-unknown\";\r\n})(ChemicalMimeType || (ChemicalMimeType = {}));\r\n//# sourceMappingURL=structService.types.js.map","references":[],"map":"{\"version\":3,\"file\":\"structService.types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/domain/services/struct/structService.types.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,MAAM,CAAN,IAAY,gBAaX;AAbD,WAAY,gBAAgB;IAC1B,kDAA8B,CAAA;IAC9B,kDAA8B,CAAA;IAC9B,iEAA6C,CAAA;IAC7C,mEAA+C,CAAA;IAC/C,iEAA6C,CAAA;IAC7C,8CAA0B,CAAA;IAC1B,yDAAqC,CAAA;IACrC,0CAAsB,CAAA;IACtB,8CAA0B,CAAA;IAC1B,0CAAsB,CAAA;IACtB,iDAA6B,CAAA;IAC7B,kDAA8B,CAAA;AAChC,CAAC,EAbW,gBAAgB,KAAhB,gBAAgB,QAa3B\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/services/struct/structService.types.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nexport declare enum ChemicalMimeType {\r\n    Mol = \"chemical/x-mdl-molfile\",\r\n    Rxn = \"chemical/x-mdl-rxnfile\",\r\n    DaylightSmiles = \"chemical/x-daylight-smiles\",\r\n    ExtendedSmiles = \"chemical/x-chemaxon-cxsmiles\",\r\n    DaylightSmarts = \"chemical/x-daylight-smarts\",\r\n    InChI = \"chemical/x-inchi\",\r\n    InChIAuxInfo = \"chemical/x-inchi-aux\",\r\n    CDX = \"chemical/x-cdx\",\r\n    CDXML = \"chemical/x-cdxml\",\r\n    CML = \"chemical/x-cml\",\r\n    KET = \"chemical/x-indigo-ket\",\r\n    UNKNOWN = \"chemical/x-unknown\"\r\n}\r\nexport interface WithStruct {\r\n    struct: string;\r\n}\r\nexport interface WithFormat {\r\n    format: ChemicalMimeType;\r\n}\r\nexport interface WithOutputFormat {\r\n    output_format: ChemicalMimeType;\r\n}\r\nexport interface WithSelection {\r\n    selected?: Array<number>;\r\n}\r\nexport declare type CheckTypes = 'radicals' | 'pseudoatoms' | 'stereo' | 'query' | 'overlapping_atoms' | 'overlapping_bonds' | 'rgroups' | 'chiral' | '3d' | 'chiral_flag' | 'valence';\r\nexport interface CheckData extends WithStruct {\r\n    types: Array<CheckTypes>;\r\n}\r\nexport interface CheckResult {\r\n    [key: string]: string;\r\n}\r\nexport interface ConvertData extends WithStruct, WithOutputFormat {\r\n}\r\nexport interface ConvertResult extends WithStruct, WithFormat {\r\n}\r\nexport interface LayoutData extends WithStruct, WithOutputFormat {\r\n}\r\nexport interface LayoutResult extends WithStruct, WithFormat {\r\n}\r\nexport interface CleanData extends WithStruct, WithSelection, WithOutputFormat {\r\n}\r\nexport interface CleanResult extends WithStruct, WithFormat {\r\n}\r\nexport interface AromatizeData extends WithStruct, WithOutputFormat {\r\n}\r\nexport interface AromatizeResult extends WithStruct, WithFormat {\r\n}\r\nexport interface DearomatizeData extends WithStruct, WithOutputFormat {\r\n}\r\nexport interface DearomatizeResult extends WithStruct, WithFormat {\r\n}\r\nexport interface CalculateCipData extends WithStruct, WithOutputFormat {\r\n}\r\nexport interface CalculateCipResult extends WithStruct, WithFormat {\r\n}\r\nexport declare type CalculateProps = 'molecular-weight' | 'most-abundant-mass' | 'monoisotopic-mass' | 'gross' | 'mass-composition';\r\nexport interface CalculateData extends WithStruct, WithSelection {\r\n    properties: Array<CalculateProps>;\r\n}\r\nexport declare type CalculateResult = Record<CalculateProps, string | number | boolean>;\r\nexport declare type AutomapMode = 'discard' | 'keep' | 'alter' | 'clear';\r\nexport interface AutomapData extends WithStruct, WithOutputFormat {\r\n    mode: AutomapMode;\r\n}\r\nexport interface AutomapResult extends WithStruct, WithFormat {\r\n}\r\nexport interface InfoResult {\r\n    indigoVersion: string;\r\n    imagoVersions: Array<string>;\r\n    isAvailable: boolean;\r\n}\r\nexport interface RecognizeResult extends WithStruct, WithOutputFormat {\r\n}\r\nexport interface StructServiceOptions {\r\n    [key: string]: string | number | boolean | undefined;\r\n}\r\nexport declare type OutputFormatType = 'png' | 'svg';\r\nexport interface GenerateImageOptions extends StructServiceOptions {\r\n    outputFormat: OutputFormatType;\r\n    backgroundColor?: string;\r\n}\r\nexport interface StructService {\r\n    info: () => Promise<InfoResult>;\r\n    convert: (data: ConvertData, options?: StructServiceOptions) => Promise<ConvertResult>;\r\n    layout: (data: LayoutData, options?: StructServiceOptions) => Promise<LayoutResult>;\r\n    clean: (data: CleanData, options?: StructServiceOptions) => Promise<CleanResult>;\r\n    aromatize: (data: AromatizeData, options?: StructServiceOptions) => Promise<AromatizeResult>;\r\n    dearomatize: (data: DearomatizeData, options?: StructServiceOptions) => Promise<DearomatizeResult>;\r\n    calculateCip: (data: CalculateCipData, options?: StructServiceOptions) => Promise<CalculateCipResult>;\r\n    automap: (data: AutomapData, options?: StructServiceOptions) => Promise<AutomapResult>;\r\n    check: (data: CheckData, options?: StructServiceOptions) => Promise<CheckResult>;\r\n    calculate: (data: CalculateData, options?: StructServiceOptions) => Promise<CalculateResult>;\r\n    recognize: (blob: Blob, version: string) => Promise<RecognizeResult>;\r\n    generateInchIKey: (struct: string) => Promise<string>;\r\n    generateImageAsBase64: (data: string, options?: GenerateImageOptions) => Promise<string>;\r\n}\r\n"}}
