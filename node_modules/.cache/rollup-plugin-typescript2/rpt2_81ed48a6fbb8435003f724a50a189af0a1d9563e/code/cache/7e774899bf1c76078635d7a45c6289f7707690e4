{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Atom, Bond, SGroup, Struct } from \"../../../entities\";\r\nimport { Elements } from \"../../../constants\";\r\nimport { ifDef } from \"../../../../utilities\";\r\nexport function toRlabel(values) {\r\n    let res = 0;\r\n    values.forEach((val) => {\r\n        const rgi = val - 1;\r\n        res |= 1 << rgi;\r\n    });\r\n    return res;\r\n}\r\nexport function moleculeToStruct(ketItem) {\r\n    const struct = new Struct();\r\n    ketItem.atoms.forEach((atom) => {\r\n        if (atom.type === 'rg-label')\r\n            struct.atoms.add(rglabelToStruct(atom));\r\n        if (atom.type === 'atom-list')\r\n            struct.atoms.add(atomListToStruct(atom));\r\n        if (!atom.type)\r\n            struct.atoms.add(atomToStruct(atom));\r\n    });\r\n    if (ketItem.bonds) {\r\n        ketItem.bonds.forEach((bond) => struct.bonds.add(bondToStruct(bond)));\r\n    }\r\n    if (ketItem.sgroups) {\r\n        ketItem.sgroups.forEach((sgroup) => struct.sgroups.add(sgroupToStruct(sgroup)));\r\n    }\r\n    struct.initHalfBonds();\r\n    struct.initNeighbors();\r\n    struct.markFragments();\r\n    struct.bindSGroupsToFunctionalGroups();\r\n    return struct;\r\n}\r\nexport function atomToStruct(source) {\r\n    const params = {};\r\n    ifDef(params, 'label', source.label);\r\n    ifDef(params, 'alias', source.alias);\r\n    ifDef(params, 'pp', {\r\n        x: source.location[0],\r\n        y: -source.location[1],\r\n        z: source.location[2] || 0.0\r\n    });\r\n    ifDef(params, 'charge', source.charge);\r\n    ifDef(params, 'explicitValence', source.explicitValence);\r\n    ifDef(params, 'isotope', source.isotope);\r\n    ifDef(params, 'radical', source.radical);\r\n    ifDef(params, 'attpnt', source.attachmentPoints);\r\n    // stereo\r\n    ifDef(params, 'stereoLabel', source.stereoLabel);\r\n    ifDef(params, 'stereoParity', source.stereoParity);\r\n    ifDef(params, 'weight', source.weight);\r\n    // query\r\n    ifDef(params, 'ringBondCount', source.ringBondCount);\r\n    ifDef(params, 'substitutionCount', source.substitutionCount);\r\n    ifDef(params, 'unsaturatedAtom', Number(Boolean(source.unsaturatedAtom)));\r\n    ifDef(params, 'hCount', source.hCount);\r\n    // reaction\r\n    ifDef(params, 'aam', source.mapping);\r\n    ifDef(params, 'invRet', source.invRet);\r\n    ifDef(params, 'exactChangeFlag', Number(Boolean(source.exactChangeFlag)));\r\n    return new Atom(params);\r\n}\r\nexport function rglabelToStruct(source) {\r\n    const params = {};\r\n    params.label = 'R#';\r\n    ifDef(params, 'pp', {\r\n        x: source.location[0],\r\n        y: -source.location[1],\r\n        z: source.location[2] || 0.0\r\n    });\r\n    ifDef(params, 'attpnt', source.attachmentPoints);\r\n    const rglabel = toRlabel(source.$refs.map((el) => parseInt(el.slice(3))));\r\n    ifDef(params, 'rglabel', rglabel);\r\n    return new Atom(params);\r\n}\r\nexport function atomListToStruct(source) {\r\n    const params = {};\r\n    params.label = 'L#';\r\n    ifDef(params, 'pp', {\r\n        x: source.location[0],\r\n        y: -source.location[1],\r\n        z: source.location[2] || 0.0\r\n    });\r\n    ifDef(params, 'attpnt', source.attachmentPoints);\r\n    const ids = source.elements\r\n        .map((el) => Elements.get(el)?.number)\r\n        .filter((id) => id);\r\n    ifDef(params, 'atomList', {\r\n        ids,\r\n        notList: source.notList\r\n    });\r\n    return new Atom(params);\r\n}\r\nexport function bondToStruct(source) {\r\n    const params = {};\r\n    ifDef(params, 'type', source.type);\r\n    ifDef(params, 'topology', source.topology);\r\n    ifDef(params, 'reactingCenterStatus', source.center);\r\n    ifDef(params, 'stereo', source.stereo);\r\n    // if (params.stereo)\r\n    // \tparams.stereo = params.stereo > 1 ? params.stereo * 2 : params.stereo;\r\n    // params.xxx = 0;\r\n    ifDef(params, 'begin', source.atoms[0]);\r\n    ifDef(params, 'end', source.atoms[1]);\r\n    return new Bond(params);\r\n}\r\nexport function sgroupToStruct(source) {\r\n    const sgroup = new SGroup(source.type);\r\n    ifDef(sgroup, 'atoms', source.atoms);\r\n    switch (source.type) {\r\n        case 'GEN':\r\n            break;\r\n        case 'MUL': {\r\n            ifDef(sgroup.data, 'mul', source.mul);\r\n            break;\r\n        }\r\n        case 'SRU': {\r\n            ifDef(sgroup.data, 'subscript', source.subscript);\r\n            ifDef(sgroup.data, 'connectivity', source.connectivity.toLowerCase());\r\n            break;\r\n        }\r\n        case 'SUP': {\r\n            ifDef(sgroup.data, 'name', source.name);\r\n            ifDef(sgroup.data, 'expanded', source.expanded);\r\n            ifDef(sgroup, 'id', source.id);\r\n            break;\r\n        }\r\n        case 'DAT': {\r\n            ifDef(sgroup.data, 'absolute', source.placement);\r\n            ifDef(sgroup.data, 'attached', source.display);\r\n            ifDef(sgroup.data, 'context', source.context);\r\n            ifDef(sgroup.data, 'fieldName', source.fieldName);\r\n            ifDef(sgroup.data, 'fieldValue', source.fieldData);\r\n            break;\r\n        }\r\n        default:\r\n            break;\r\n    }\r\n    return sgroup;\r\n}\r\n//# sourceMappingURL=moleculeToStruct.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/constants/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/utilities/index.ts"],"map":"{\"version\":3,\"file\":\"moleculeToStruct.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/domain/serializers/ket/fromKet/moleculeToStruct.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/serializers/ket/fromKet/moleculeToStruct.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Atom, Bond, SGroup, Struct } from \"../../../entities\";\r\nexport declare function toRlabel(values: any): number;\r\nexport declare function moleculeToStruct(ketItem: any): Struct;\r\nexport declare function atomToStruct(source: any): Atom;\r\nexport declare function rglabelToStruct(source: any): Atom;\r\nexport declare function atomListToStruct(source: any): Atom;\r\nexport declare function bondToStruct(source: any): Bond;\r\nexport declare function sgroupToStruct(source: any): SGroup;\r\n"}}
