{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { SGroup } from \"../../../entities\";\r\nimport { ifDef } from \"../../../../utilities\";\r\nfunction fromRlabel(rg) {\r\n    const res = [];\r\n    let rgi;\r\n    let val;\r\n    for (rgi = 0; rgi < 32; rgi++) {\r\n        if (rg & (1 << rgi)) {\r\n            val = rgi + 1;\r\n            res.push(val); // push the string\r\n        }\r\n    }\r\n    return res;\r\n}\r\nexport function moleculeToKet(struct) {\r\n    const body = {\r\n        atoms: Array.from(struct.atoms.values()).map((atom) => {\r\n            if (atom.label === 'R#')\r\n                return rglabelToKet(atom);\r\n            if (atom.label === 'L#')\r\n                return atomListToKet(atom);\r\n            return atomToKet(atom);\r\n        })\r\n    };\r\n    if (struct.bonds.size !== 0) {\r\n        body.bonds = Array.from(struct.bonds.values()).map(bondToKet);\r\n    }\r\n    if (struct.sgroups.size !== 0) {\r\n        body.sgroups = Array.from(struct.sgroups.values()).map((sGroup) => sgroupToKet(struct, sGroup));\r\n    }\r\n    const fragment = struct.frags.get(0);\r\n    if (fragment) {\r\n        ifDef(body, 'stereoFlagPosition', fragment.stereoFlagPosition, null);\r\n    }\r\n    return {\r\n        type: 'molecule',\r\n        ...body\r\n    };\r\n}\r\nfunction atomToKet(source) {\r\n    const result = {};\r\n    ifDef(result, 'label', source.label);\r\n    ifDef(result, 'alias', source.alias);\r\n    ifDef(result, 'location', [source.pp.x, -source.pp.y, source.pp.z]);\r\n    ifDef(result, 'charge', source.charge, 0);\r\n    ifDef(result, 'explicitValence', source.explicitValence, -1);\r\n    ifDef(result, 'isotope', source.isotope, 0);\r\n    ifDef(result, 'radical', source.radical, 0);\r\n    ifDef(result, 'attachmentPoints', source.attpnt, 0);\r\n    // stereo\r\n    ifDef(result, 'stereoLabel', source.stereoLabel, null);\r\n    ifDef(result, 'stereoParity', source.stereoCare, 0);\r\n    ifDef(result, 'weight', source.weight, 0);\r\n    // query\r\n    ifDef(result, 'ringBondCount', source.ringBondCount, 0);\r\n    ifDef(result, 'substitutionCount', source.substitutionCount, 0);\r\n    ifDef(result, 'unsaturatedAtom', !!source.unsaturatedAtom, false);\r\n    ifDef(result, 'hCount', source.hCount, 0);\r\n    // reaction\r\n    ifDef(result, 'mapping', parseInt(source.aam), 0);\r\n    ifDef(result, 'invRet', source.invRet, 0);\r\n    ifDef(result, 'exactChangeFlag', !!source.exactChangeFlag, false);\r\n    return result;\r\n}\r\nfunction rglabelToKet(source) {\r\n    const result = {\r\n        type: 'rg-label'\r\n    };\r\n    ifDef(result, 'location', [source.pp.x, -source.pp.y, source.pp.z]);\r\n    ifDef(result, 'attachmentPoints', source.attpnt, 0);\r\n    const refsToRGroups = fromRlabel(source.rglabel).map((rgnumber) => `rg-${rgnumber}`);\r\n    ifDef(result, '$refs', refsToRGroups);\r\n    return result;\r\n}\r\nfunction atomListToKet(source) {\r\n    const result = {\r\n        type: 'atom-list'\r\n    };\r\n    ifDef(result, 'location', [source.pp.x, -source.pp.y, source.pp.z]);\r\n    ifDef(result, 'attachmentPoints', source.attpnt, 0);\r\n    ifDef(result, 'elements', source.atomList.labelList());\r\n    ifDef(result, 'notList', source.atomList.notList, false);\r\n    return result;\r\n}\r\nfunction bondToKet(source) {\r\n    const result = {};\r\n    ifDef(result, 'type', source.type);\r\n    ifDef(result, 'atoms', [source.begin, source.end]);\r\n    ifDef(result, 'stereo', source.stereo, 0);\r\n    ifDef(result, 'topology', source.topology, 0);\r\n    ifDef(result, 'center', source.reactingCenterStatus, 0);\r\n    return result;\r\n}\r\nfunction sgroupToKet(struct, source) {\r\n    const result = {};\r\n    ifDef(result, 'type', source.type);\r\n    ifDef(result, 'atoms', source.atoms);\r\n    switch (source.type) {\r\n        case 'GEN':\r\n            break;\r\n        case 'MUL': {\r\n            ifDef(result, 'mul', source.data.mul || 1);\r\n            break;\r\n        }\r\n        case 'SRU': {\r\n            ifDef(result, 'subscript', source.data.subscript || 'n');\r\n            ifDef(result, 'connectivity', source.data.connectivity.toUpperCase() || 'ht');\r\n            break;\r\n        }\r\n        case 'SUP': {\r\n            ifDef(result, 'name', source.data.name || '');\r\n            ifDef(result, 'expanded', source.data.expanded);\r\n            ifDef(result, 'id', source.id);\r\n            break;\r\n        }\r\n        case 'DAT': {\r\n            const data = source.data;\r\n            ifDef(result, 'placement', data.absolute, true);\r\n            ifDef(result, 'display', data.attached, false);\r\n            ifDef(result, 'context', data.context);\r\n            ifDef(result, 'fieldName', data.fieldName);\r\n            ifDef(result, 'fieldData', data.fieldValue);\r\n            ifDef(result, 'bonds', SGroup.getBonds(struct, source));\r\n            break;\r\n        }\r\n        default:\r\n            break;\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=moleculeToKet.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/utilities/index.ts"],"map":"{\"version\":3,\"file\":\"moleculeToKet.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/domain/serializers/ket/toKet/moleculeToKet.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/serializers/ket/toKet/moleculeToKet.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Struct } from \"../../../entities\";\r\nexport declare function moleculeToKet(struct: Struct): any;\r\n"}}
