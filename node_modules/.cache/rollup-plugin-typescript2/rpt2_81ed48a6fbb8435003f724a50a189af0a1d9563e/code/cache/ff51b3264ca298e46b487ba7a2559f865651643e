{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Atom, Bond, StereoLabel } from \"../../../domain/entities\";\r\nimport { AtomAdd, AtomAttr, BondAdd, BondAttr, BondDelete, CalcImplicitH, FragmentAdd, FragmentStereoFlag } from '../operations';\r\nimport { atomForNewBond, atomGetAttr } from './utils';\r\nimport { fromAtomMerge, fromStereoAtomAttrs, mergeFragmentsIfNeeded, mergeSgroups } from './atom';\r\nimport { Action } from './action';\r\nimport { StereoValidator } from \"../../../domain/helpers\";\r\nimport utils from '../shared/utils';\r\nexport function fromBondAddition(restruct, bond, begin, end, pos, pos2) {\r\n    // eslint-disable-line\r\n    if (end === undefined) {\r\n        const atom = atomForNewBond(restruct, begin, bond);\r\n        end = atom.atom;\r\n        pos = atom.pos;\r\n    }\r\n    const action = new Action();\r\n    const struct = restruct.molecule;\r\n    let mergeFragments = false;\r\n    let frid = null;\r\n    if (!(typeof begin === 'number')) {\r\n        if (typeof end === 'number')\r\n            frid = atomGetAttr(restruct, end, 'fragment');\r\n    }\r\n    else {\r\n        frid = atomGetAttr(restruct, begin, 'fragment');\r\n        if (typeof end === 'number')\r\n            mergeFragments = true;\r\n    }\r\n    if (frid == null) {\r\n        frid = action.addOp(new FragmentAdd().perform(restruct))\r\n            .frid;\r\n    }\r\n    if (!(typeof begin === 'number')) {\r\n        begin.fragment = frid;\r\n        begin = action.addOp(new AtomAdd(begin, pos).perform(restruct))\r\n            .data.aid;\r\n        if (typeof end === 'number')\r\n            mergeSgroups(action, restruct, [begin], end);\r\n        pos = pos2;\r\n    }\r\n    else if (atomGetAttr(restruct, begin, 'label') === '*') {\r\n        action.addOp(new AtomAttr(begin, 'label', 'C').perform(restruct));\r\n    }\r\n    if (!(typeof end === 'number')) {\r\n        end.fragment = frid;\r\n        // TODO: <op>.data.aid here is a hack, need a better way to access the id of a created atom\r\n        end = action.addOp(new AtomAdd(end, pos).perform(restruct))\r\n            .data.aid;\r\n        if (typeof begin === 'number')\r\n            mergeSgroups(action, restruct, [end], begin);\r\n    }\r\n    else if (atomGetAttr(restruct, end, 'label') === '*') {\r\n        action.addOp(new AtomAttr(end, 'label', 'C').perform(restruct));\r\n    }\r\n    const bid = action.addOp(new BondAdd(begin, end, bond).perform(restruct)).data.bid;\r\n    const bnd = struct.bonds.get(bid);\r\n    if (bnd) {\r\n        action.addOp(new CalcImplicitH([bnd.begin, bnd.end]).perform(restruct));\r\n        action.mergeWith(fromBondStereoUpdate(restruct, bnd));\r\n    }\r\n    action.operations.reverse();\r\n    if (mergeFragments)\r\n        mergeFragmentsIfNeeded(action, restruct, begin, end);\r\n    if (struct.frags.get(frid || 0)?.stereoAtoms && !bond.stereo) {\r\n        action.addOp(new FragmentStereoFlag(frid || 0).perform(restruct));\r\n    }\r\n    return [action, begin, end, bid];\r\n}\r\nexport function fromBondsAttrs(restruct, ids, attrs, reset) {\r\n    const struct = restruct.molecule;\r\n    const action = new Action();\r\n    const bids = Array.isArray(ids) ? ids : [ids];\r\n    bids.forEach((bid) => {\r\n        Object.keys(Bond.attrlist).forEach((key) => {\r\n            if (!(key in attrs) && !reset)\r\n                return;\r\n            const value = key in attrs ? attrs[key] : Bond.attrGetDefault(key);\r\n            action.addOp(new BondAttr(bid, key, value).perform(restruct));\r\n            if (key === 'stereo' && key in attrs) {\r\n                const bond = struct.bonds.get(bid);\r\n                if (bond) {\r\n                    action.addOp(new CalcImplicitH([bond.begin, bond.end]).perform(restruct));\r\n                    action.mergeWith(fromBondStereoUpdate(restruct, bond));\r\n                }\r\n            }\r\n        });\r\n    });\r\n    return action;\r\n}\r\nexport function fromBondsMerge(restruct, mergeMap) {\r\n    const struct = restruct.molecule;\r\n    const atomPairs = new Map();\r\n    let action = new Action();\r\n    mergeMap.forEach((dstId, srcId) => {\r\n        const bond = struct.bonds.get(srcId);\r\n        const bondCI = struct.bonds.get(dstId);\r\n        if (!bond || !bondCI)\r\n            return;\r\n        const params = utils.mergeBondsParams(struct, bond, struct, bondCI);\r\n        if (!params.merged)\r\n            return;\r\n        atomPairs.set(bond.begin, !params.cross ? bondCI.begin : bondCI.end);\r\n        atomPairs.set(bond.end, !params.cross ? bondCI.end : bondCI.begin);\r\n    });\r\n    atomPairs.forEach((dst, src) => {\r\n        action = fromAtomMerge(restruct, src, dst).mergeWith(action);\r\n    });\r\n    return action;\r\n}\r\nfunction fromBondFlipping(restruct, id) {\r\n    const bond = restruct.molecule.bonds.get(id);\r\n    const action = new Action();\r\n    action.addOp(new BondDelete(id).perform(restruct));\r\n    // TODO: find better way to avoid problem with bond.begin = 0\r\n    if (Number.isInteger(bond?.end) && Number.isInteger(bond?.begin)) {\r\n        action.addOp(new BondAdd(bond?.end, bond?.begin, bond).perform(restruct));\r\n    }\r\n    // todo: swap atoms stereoLabels and stereoAtoms in fragment\r\n    return action;\r\n}\r\nexport function fromBondStereoUpdate(restruct, bond, withReverse) {\r\n    const action = new Action();\r\n    const struct = restruct.molecule;\r\n    const beginFrId = struct.atoms.get(bond?.begin)?.fragment;\r\n    const endFrId = struct.atoms.get(bond?.end)?.fragment;\r\n    const fragmentStereoBonds = [];\r\n    struct.bonds.forEach((bond) => {\r\n        if (struct.atoms.get(bond.begin)?.fragment === beginFrId) {\r\n            fragmentStereoBonds.push(bond);\r\n        }\r\n        if (beginFrId !== endFrId &&\r\n            struct.atoms.get(bond.begin)?.fragment === endFrId) {\r\n            fragmentStereoBonds.push(bond);\r\n        }\r\n    });\r\n    const stereoAtomsMap = getStereoAtomsMap(struct, fragmentStereoBonds, bond);\r\n    stereoAtomsMap.forEach((stereoProp, aId) => {\r\n        if (struct.atoms.get(aId)?.stereoLabel !== stereoProp.stereoLabel) {\r\n            action.mergeWith(fromStereoAtomAttrs(restruct, aId, stereoProp, withReverse));\r\n        }\r\n    });\r\n    return action;\r\n}\r\nexport function getStereoAtomsMap(struct, bonds, bond) {\r\n    const stereoAtomsMap = new Map();\r\n    const correctAtomIds = [];\r\n    bonds.forEach((bond) => {\r\n        if (bond) {\r\n            const beginNeighs = struct.atomGetNeighbors(bond.begin);\r\n            const endNeighs = struct.atomGetNeighbors(bond.end);\r\n            if (StereoValidator.isCorrectStereoCenter(bond, beginNeighs, endNeighs, struct)) {\r\n                const stereoLabel = struct.atoms.get(bond.begin)?.stereoLabel;\r\n                if (stereoLabel == null ||\r\n                    stereoAtomsMap.get(bond.begin)?.stereoLabel == null) {\r\n                    stereoAtomsMap.set(bond.begin, {\r\n                        stereoParity: getStereoParity(bond.stereo),\r\n                        stereoLabel: stereoLabel || `${StereoLabel.Abs}`\r\n                    });\r\n                }\r\n                correctAtomIds.push(bond.begin);\r\n            }\r\n            else {\r\n                if (!correctAtomIds.includes(bond.begin)) {\r\n                    stereoAtomsMap.set(bond.begin, {\r\n                        stereoParity: Atom.PATTERN.STEREO_PARITY.NONE,\r\n                        stereoLabel: null\r\n                    });\r\n                }\r\n                if (!correctAtomIds.includes(bond.end)) {\r\n                    stereoAtomsMap.set(bond.end, {\r\n                        stereoParity: Atom.PATTERN.STEREO_PARITY.NONE,\r\n                        stereoLabel: null\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    });\r\n    // in case the stereo band is flipped, changed or removed\r\n    // TODO the duplication of the code below should be fixed, mayby by function\r\n    if (bond) {\r\n        if (!correctAtomIds.includes(bond.begin)) {\r\n            stereoAtomsMap.set(bond.begin, {\r\n                stereoParity: Atom.PATTERN.STEREO_PARITY.NONE,\r\n                stereoLabel: null\r\n            });\r\n        }\r\n        if (!correctAtomIds.includes(bond.end)) {\r\n            stereoAtomsMap.set(bond.end, {\r\n                stereoParity: Atom.PATTERN.STEREO_PARITY.NONE,\r\n                stereoLabel: null\r\n            });\r\n        }\r\n    }\r\n    return stereoAtomsMap;\r\n}\r\nfunction getStereoParity(stereo) {\r\n    let newAtomParity = null;\r\n    switch (stereo) {\r\n        case Bond.PATTERN.STEREO.UP:\r\n            newAtomParity = Atom.PATTERN.STEREO_PARITY.ODD;\r\n            break;\r\n        case Bond.PATTERN.STEREO.EITHER:\r\n            newAtomParity = Atom.PATTERN.STEREO_PARITY.EITHER;\r\n            break;\r\n        case Bond.PATTERN.STEREO.DOWN:\r\n            newAtomParity = Atom.PATTERN.STEREO_PARITY.EVEN;\r\n            break;\r\n    }\r\n    return newAtomParity;\r\n}\r\nexport function bondChangingAction(restruct, itemID, bond, bondProps) {\r\n    const action = new Action();\r\n    let newItemId = itemID;\r\n    if (((bondProps.stereo !== Bond.PATTERN.STEREO.NONE && //\r\n        bondProps.type === Bond.PATTERN.TYPE.SINGLE) ||\r\n        bond.type === Bond.PATTERN.TYPE.DATIVE) &&\r\n        bond.type === bondProps.type &&\r\n        bond.stereo === bondProps.stereo) {\r\n        action.mergeWith(fromBondFlipping(restruct, itemID));\r\n        newItemId = action.operations[1].data.bid;\r\n    }\r\n    // if bondTool is stereo and equal to bond for change\r\n    const loop = plainBondTypes.includes(bondProps.type) ? plainBondTypes : null;\r\n    if (bondProps.stereo === Bond.PATTERN.STEREO.NONE &&\r\n        bondProps.type === Bond.PATTERN.TYPE.SINGLE &&\r\n        bond.stereo === Bond.PATTERN.STEREO.NONE &&\r\n        loop) {\r\n        // if `Single bond` tool is chosen and bond for change in `plainBondTypes`\r\n        bondProps.type = loop[(loop.indexOf(bond.type) + 1) % loop.length];\r\n    }\r\n    return fromBondsAttrs(restruct, newItemId, bondProps).mergeWith(action);\r\n}\r\nconst plainBondTypes = [\r\n    Bond.PATTERN.TYPE.SINGLE,\r\n    Bond.PATTERN.TYPE.DOUBLE,\r\n    Bond.PATTERN.TYPE.TRIPLE\r\n];\r\n//# sourceMappingURL=bond.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/utils.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/atom.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/action.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/helpers/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/shared/utils.js"],"map":"{\"version\":3,\"file\":\"bond.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/application/editor/actions/bond.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/actions/bond.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Bond, Struct, Vec2 } from \"../../../domain/entities\";\r\nimport { Action } from './action';\r\nimport { ReStruct } from '../../render';\r\nexport declare function fromBondAddition(restruct: ReStruct, bond: any, begin: any, end: any, pos?: Vec2, pos2?: Vec2): [Action, number, number, number];\r\nexport declare function fromBondsAttrs(restruct: ReStruct, ids: Array<number> | number, attrs: Bond, reset?: boolean): Action;\r\nexport declare function fromBondsMerge(restruct: ReStruct, mergeMap: Map<number, number>): Action;\r\nexport declare function fromBondStereoUpdate(restruct: ReStruct, bond: Bond, withReverse?: boolean): Action;\r\nexport declare function getStereoAtomsMap(struct: Struct, bonds: Array<Bond>, bond?: Bond): Map<any, any>;\r\nexport declare function bondChangingAction(restruct: ReStruct, itemID: number, bond: Bond, bondProps: any): Action;\r\n"}}
