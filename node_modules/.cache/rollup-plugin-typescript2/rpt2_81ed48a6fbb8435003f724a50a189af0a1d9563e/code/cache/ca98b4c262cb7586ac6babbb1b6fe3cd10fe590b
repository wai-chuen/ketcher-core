{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Atom } from './atom';\r\nimport { Bond } from './bond';\r\nimport { Box2Abs } from './box2Abs';\r\nimport { Pile } from './pile';\r\nimport { SaltsAndSolventsProvider } from '../helpers';\r\nimport { Vec2 } from './vec2';\r\nexport class SGroupBracketParams {\r\n    c;\r\n    d;\r\n    n;\r\n    w;\r\n    h;\r\n    constructor(c, d, w, h) {\r\n        this.c = c;\r\n        this.d = d;\r\n        this.n = d.rotateSC(1, 0);\r\n        this.w = w;\r\n        this.h = h;\r\n    }\r\n}\r\nexport class SGroup {\r\n    static TYPES = {\r\n        SUP: 'SUP',\r\n        MUL: 'MUL',\r\n        SRU: 'SRU',\r\n        MON: 'MON',\r\n        MER: 'MER',\r\n        COP: 'COP',\r\n        CRO: 'CRO',\r\n        MOD: 'MOD',\r\n        GRA: 'GRA',\r\n        COM: 'COM',\r\n        MIX: 'MIX',\r\n        FOR: 'FOR',\r\n        DAT: 'DAT',\r\n        ANY: 'ANY',\r\n        GEN: 'GEN'\r\n    };\r\n    type;\r\n    id;\r\n    label;\r\n    bracketBox;\r\n    bracketDir;\r\n    areas;\r\n    hover;\r\n    hovering;\r\n    selected;\r\n    selectionPlate;\r\n    atoms;\r\n    atomSet;\r\n    parentAtomSet;\r\n    patoms;\r\n    allAtoms;\r\n    bonds;\r\n    xBonds;\r\n    neiAtoms;\r\n    pp;\r\n    data;\r\n    firstSgroupAtom;\r\n    constructor(type) {\r\n        this.type = type;\r\n        this.id = -1;\r\n        this.label = -1;\r\n        this.bracketBox = null;\r\n        this.bracketDir = new Vec2(1, 0);\r\n        this.areas = [];\r\n        this.hover = false;\r\n        this.hovering = null;\r\n        this.selected = false;\r\n        this.selectionPlate = null;\r\n        this.atoms = [];\r\n        this.patoms = [];\r\n        this.bonds = [];\r\n        this.xBonds = [];\r\n        this.neiAtoms = [];\r\n        this.pp = null;\r\n        this.data = {\r\n            mul: 1,\r\n            connectivity: 'ht',\r\n            name: '',\r\n            subscript: 'n',\r\n            expanded: undefined,\r\n            // data s-group fields\r\n            attached: false,\r\n            absolute: true,\r\n            showUnits: false,\r\n            nCharsToDisplay: -1,\r\n            tagChar: '',\r\n            daspPos: 1,\r\n            fieldType: 'F',\r\n            fieldName: '',\r\n            fieldValue: '',\r\n            units: '',\r\n            query: '',\r\n            queryOp: ''\r\n        };\r\n    }\r\n    // TODO: these methods should be overridden\r\n    //      and should only accept valid attributes for each S-group type.\r\n    //      The attributes should be accessed via these methods only and not directly through this.data.\r\n    // stub\r\n    getAttr(attr) {\r\n        return this.data[attr];\r\n    }\r\n    // TODO: should be group-specific\r\n    getAttrs() {\r\n        const attrs = {};\r\n        Object.keys(this.data).forEach((attr) => {\r\n            attrs[attr] = this.data[attr];\r\n        });\r\n        return attrs;\r\n    }\r\n    // stub\r\n    setAttr(attr, value) {\r\n        const oldValue = this.data[attr];\r\n        this.data[attr] = value;\r\n        return oldValue;\r\n    }\r\n    // stub\r\n    checkAttr(attr, value) {\r\n        return this.data[attr] === value;\r\n    }\r\n    updateOffset(offset) {\r\n        this.pp = Vec2.sum(this.bracketBox.p1, offset);\r\n    }\r\n    calculatePP(struct) {\r\n        let topLeftPoint;\r\n        if (this.data.context === 'Atom' || this.data.context === 'Bond') {\r\n            const contentBoxes = [];\r\n            let contentBB = null;\r\n            const direction = new Vec2(1, 0);\r\n            this.atoms.forEach((aid) => {\r\n                const atom = struct.atoms.get(aid);\r\n                const pos = new Vec2(atom.pp);\r\n                const ext = new Vec2(0.05 * 3, 0.05 * 3);\r\n                const bba = new Box2Abs(pos, pos).extend(ext, ext);\r\n                contentBoxes.push(bba);\r\n            });\r\n            contentBoxes.forEach((bba) => {\r\n                let bbb = null;\r\n                [bba.p0.x, bba.p1.x].forEach((x) => {\r\n                    ;\r\n                    [bba.p0.y, bba.p1.y].forEach((y) => {\r\n                        const v = new Vec2(x, y);\r\n                        const p = new Vec2(Vec2.dot(v, direction), Vec2.dot(v, direction.rotateSC(1, 0)));\r\n                        bbb = !bbb ? new Box2Abs(p, p) : bbb.include(p);\r\n                    });\r\n                });\r\n                contentBB = !contentBB ? bbb : Box2Abs.union(contentBB, bbb);\r\n            });\r\n            topLeftPoint = contentBB.p0;\r\n        }\r\n        else {\r\n            topLeftPoint = this.bracketBox.p1.add(new Vec2(0.5, 0.5));\r\n        }\r\n        const sgroups = Array.from(struct.sgroups.values());\r\n        for (let i = 0; i < struct.sgroups.size; ++i) {\r\n            if (!descriptorIntersects(sgroups, topLeftPoint))\r\n                break;\r\n            topLeftPoint = topLeftPoint.add(new Vec2(0, 0.5));\r\n        }\r\n        // TODO: the code below is a temporary solution that will be removed after the implementation of the internal format\r\n        // TODO: in schema.json required fields [\"context\", \"FieldValue\"] in sgroups type DAT must be returned\r\n        if (this.data.fieldName === 'INDIGO_CIP_DESC') {\r\n            if (this.atoms.length === 1) {\r\n                const sAtom = this.atoms[0];\r\n                const sAtomPP = struct.atoms.get(sAtom)?.pp;\r\n                if (sAtomPP) {\r\n                    topLeftPoint = sAtomPP;\r\n                }\r\n            }\r\n            else {\r\n                topLeftPoint = SGroup.getMassCentre(struct, this.atoms);\r\n            }\r\n        }\r\n        this.pp = topLeftPoint;\r\n    }\r\n    getAttAtomId(struct) {\r\n        for (const atomId of this.atoms) {\r\n            const atom = struct.atoms.get(atomId);\r\n            if (!atom)\r\n                continue;\r\n            if (Number.isInteger(atom.attpnt))\r\n                return atomId;\r\n        }\r\n        // in normal circumstances this should never be invoked\r\n        return this.atoms[0];\r\n    }\r\n    isGroupAttached(struct) {\r\n        const attachPointId = this.getAttAtomId(struct);\r\n        const neighbours = struct.atomGetNeighbors(attachPointId);\r\n        return !neighbours?.every(({ aid }) => this.atoms.includes(aid));\r\n    }\r\n    static getOffset(sgroup) {\r\n        if (!sgroup?.pp)\r\n            return null;\r\n        return Vec2.diff(sgroup.pp, sgroup.bracketBox.p1);\r\n    }\r\n    static isSaltOrSolvent(moleculeName) {\r\n        const saltsAndSolventsProvider = SaltsAndSolventsProvider.getInstance();\r\n        const saltsAndSolvents = saltsAndSolventsProvider.getSaltsAndSolventsList();\r\n        return saltsAndSolvents.some(({ name, abbreviation }) => name === moleculeName || moleculeName === abbreviation);\r\n    }\r\n    static isAtomInSaltOrSolvent(atomId, sgroupsOnCanvas) {\r\n        const onlySaltsOrSolvents = sgroupsOnCanvas.filter((sgroup) => this.isSaltOrSolvent(sgroup.data.name));\r\n        return onlySaltsOrSolvents.some(({ atoms }) => atoms.some((atomIdInSaltOrSolvent) => atomIdInSaltOrSolvent === atomId));\r\n    }\r\n    static isBondInSaltOrSolvent(bondId, sgroupsOnCanvas) {\r\n        const onlySaltsOrSolvents = sgroupsOnCanvas.filter((sgroup) => this.isSaltOrSolvent(sgroup.data.name));\r\n        return onlySaltsOrSolvents.some(({ bonds }) => bonds.some((bondIdInSaltOrSolvent) => bondIdInSaltOrSolvent === bondId));\r\n    }\r\n    static filterAtoms(atoms, map) {\r\n        const newAtoms = [];\r\n        for (let i = 0; i < atoms.length; ++i) {\r\n            const aid = atoms[i];\r\n            if (typeof map[aid] !== 'number')\r\n                newAtoms.push(aid);\r\n            else if (map[aid] >= 0)\r\n                newAtoms.push(map[aid]);\r\n            else\r\n                newAtoms.push(-1);\r\n        }\r\n        return newAtoms;\r\n    }\r\n    static removeNegative(atoms) {\r\n        const newAtoms = [];\r\n        for (let j = 0; j < atoms.length; ++j) {\r\n            if (atoms[j] >= 0)\r\n                newAtoms.push(atoms[j]);\r\n        }\r\n        return newAtoms;\r\n    }\r\n    static filter(_mol, sg, atomMap) {\r\n        sg.atoms = SGroup.removeNegative(SGroup.filterAtoms(sg.atoms, atomMap));\r\n    }\r\n    static clone(sgroup, aidMap) {\r\n        const cp = new SGroup(sgroup.type);\r\n        Object.keys(sgroup.data).forEach((field) => {\r\n            cp.data[field] = sgroup.data[field];\r\n        });\r\n        cp.atoms = sgroup.atoms.map((elem) => aidMap.get(elem));\r\n        cp.pp = sgroup.pp;\r\n        cp.bracketBox = sgroup.bracketBox;\r\n        cp.patoms = null;\r\n        cp.bonds = null;\r\n        cp.allAtoms = sgroup.allAtoms;\r\n        cp.data.expanded = sgroup.data.expanded;\r\n        return cp;\r\n    }\r\n    static addAtom(sgroup, aid) {\r\n        sgroup.atoms.push(aid);\r\n    }\r\n    static removeAtom(sgroup, aid) {\r\n        if (!sgroup) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < sgroup.atoms.length; ++i) {\r\n            if (sgroup.atoms[i] === aid) {\r\n                sgroup.atoms.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    static getCrossBonds(mol, parentAtomSet) {\r\n        const crossBonds = {};\r\n        mol.bonds.forEach((bond, bid) => {\r\n            if (parentAtomSet.has(bond.begin) && !parentAtomSet.has(bond.end)) {\r\n                if (!crossBonds[bond.begin]) {\r\n                    crossBonds[bond.begin] = [];\r\n                }\r\n                crossBonds[bond.begin].push(bid);\r\n            }\r\n            else if (parentAtomSet.has(bond.end) &&\r\n                !parentAtomSet.has(bond.begin)) {\r\n                if (!crossBonds[bond.end]) {\r\n                    crossBonds[bond.end] = [];\r\n                }\r\n                crossBonds[bond.end].push(bid);\r\n            }\r\n        });\r\n        return crossBonds;\r\n    }\r\n    static bracketPos(sGroup, mol, crossBondsPerAtom, remol, render) {\r\n        const atoms = sGroup.atoms;\r\n        const crossBonds = crossBondsPerAtom\r\n            ? Object.values(crossBondsPerAtom).flat()\r\n            : null;\r\n        if (!crossBonds || crossBonds.length !== 2) {\r\n            sGroup.bracketDir = new Vec2(1, 0);\r\n        }\r\n        else {\r\n            const p1 = mol.bonds.get(crossBonds[0]).getCenter(mol);\r\n            const p2 = mol.bonds.get(crossBonds[1]).getCenter(mol);\r\n            sGroup.bracketDir = Vec2.diff(p2, p1).normalized();\r\n        }\r\n        const d = sGroup.bracketDir;\r\n        let braketBox = null;\r\n        const contentBoxes = [];\r\n        const getAtom = (aid) => {\r\n            if (remol && render) {\r\n                return remol.atoms.get(aid);\r\n            }\r\n            return mol.atoms.get(aid);\r\n        };\r\n        atoms.forEach((aid) => {\r\n            const atom = getAtom(aid);\r\n            const ext = new Vec2(0.05 * 3, 0.05 * 3);\r\n            let position;\r\n            let structBoundingBox;\r\n            if ('getVBoxObj' in atom && render) {\r\n                structBoundingBox = atom.getVBoxObj(render);\r\n            }\r\n            else {\r\n                position = new Vec2(atom.pp);\r\n                structBoundingBox = new Box2Abs(position, position);\r\n            }\r\n            contentBoxes.push(structBoundingBox.extend(ext, ext));\r\n        });\r\n        contentBoxes.forEach((bba) => {\r\n            let bbb = null;\r\n            [bba.p0.x, bba.p1.x].forEach((x) => {\r\n                ;\r\n                [bba.p0.y, bba.p1.y].forEach((y) => {\r\n                    const v = new Vec2(x, y);\r\n                    const p = new Vec2(Vec2.dot(v, d), Vec2.dot(v, d.rotateSC(1, 0)));\r\n                    bbb = !bbb ? new Box2Abs(p, p) : bbb.include(p);\r\n                });\r\n            });\r\n            braketBox = !braketBox ? bbb : Box2Abs.union(braketBox, bbb);\r\n        });\r\n        const vext = new Vec2(0.2, 0.4);\r\n        if (braketBox)\r\n            braketBox = braketBox.extend(vext, vext);\r\n        sGroup.bracketBox = braketBox;\r\n    }\r\n    static getBracketParameters(mol, crossBondsPerAtom, atomSet, bb, d, n) {\r\n        const brackets = [];\r\n        const crossBondsPerAtomValues = Object.values(crossBondsPerAtom);\r\n        const crossBonds = crossBondsPerAtomValues.flat();\r\n        if (crossBonds.length < 2) {\r\n            ;\r\n            (function () {\r\n                d = d || new Vec2(1, 0);\r\n                n = n || d.rotateSC(1, 0);\r\n                const bracketWidth = Math.min(0.25, bb.sz().x * 0.3);\r\n                const cl = Vec2.lc2(d, bb.p0.x, n, 0.5 * (bb.p0.y + bb.p1.y));\r\n                const cr = Vec2.lc2(d, bb.p1.x, n, 0.5 * (bb.p0.y + bb.p1.y));\r\n                const bracketHeight = bb.sz().y;\r\n                brackets.push(new SGroupBracketParams(cl, d.negated(), bracketWidth, bracketHeight), new SGroupBracketParams(cr, d, bracketWidth, bracketHeight));\r\n            })();\r\n        }\r\n        else if (crossBonds.length === 2 &&\r\n            crossBondsPerAtomValues.length === 2) {\r\n            ;\r\n            (function () {\r\n                const b1 = mol.bonds.get(crossBonds[0]);\r\n                const b2 = mol.bonds.get(crossBonds[1]);\r\n                const cl0 = b1.getCenter(mol);\r\n                const cr0 = b2.getCenter(mol);\r\n                const dr = Vec2.diff(cr0, cl0).normalized();\r\n                const dl = dr.negated();\r\n                const bracketWidth = 0.25;\r\n                const bracketHeight = 1.5;\r\n                brackets.push(new SGroupBracketParams(cl0.addScaled(dl, 0), dl, bracketWidth, bracketHeight), new SGroupBracketParams(cr0.addScaled(dr, 0), dr, bracketWidth, bracketHeight));\r\n            })();\r\n        }\r\n        else {\r\n            ;\r\n            (function () {\r\n                for (let i = 0; i < crossBonds.length; ++i) {\r\n                    const b = mol.bonds.get(crossBonds[i]);\r\n                    const c = b.getCenter(mol);\r\n                    const d = atomSet.has(b.begin)\r\n                        ? b.getDir(mol)\r\n                        : b.getDir(mol).negated();\r\n                    brackets.push(new SGroupBracketParams(c, d, 0.2, 1.0));\r\n                }\r\n            })();\r\n        }\r\n        return brackets;\r\n    }\r\n    static getObjBBox(atoms, mol) {\r\n        const a0 = mol.atoms.get(atoms[0]).pp;\r\n        let bb = new Box2Abs(a0, a0);\r\n        for (let i = 1; i < atoms.length; ++i) {\r\n            const aid = atoms[i];\r\n            const atom = mol.atoms.get(aid);\r\n            const p = atom.pp;\r\n            bb = bb.include(p);\r\n        }\r\n        return bb;\r\n    }\r\n    static getAtoms(mol, sg) {\r\n        if (!sg.allAtoms)\r\n            return sg.atoms;\r\n        const atoms = [];\r\n        mol.atoms.forEach((_atom, aid) => {\r\n            atoms.push(aid);\r\n        });\r\n        return atoms;\r\n    }\r\n    static getBonds(mol, sg) {\r\n        const atoms = SGroup.getAtoms(mol, sg);\r\n        const bonds = [];\r\n        mol.bonds.forEach((bond, bid) => {\r\n            if (atoms.indexOf(bond.begin) >= 0 && atoms.indexOf(bond.end) >= 0) {\r\n                bonds.push(bid);\r\n            }\r\n        });\r\n        return bonds;\r\n    }\r\n    static prepareMulForSaving(sgroup, mol) {\r\n        sgroup.atoms.sort((a, b) => a - b);\r\n        sgroup.atomSet = new Pile(sgroup.atoms);\r\n        sgroup.parentAtomSet = new Pile(sgroup.atomSet);\r\n        const inBonds = [];\r\n        const xBonds = [];\r\n        mol.bonds.forEach((bond, bid) => {\r\n            if (sgroup.parentAtomSet.has(bond.begin) &&\r\n                sgroup.parentAtomSet.has(bond.end)) {\r\n                inBonds.push(bid);\r\n            }\r\n            else if (sgroup.parentAtomSet.has(bond.begin) ||\r\n                sgroup.parentAtomSet.has(bond.end)) {\r\n                xBonds.push(bid);\r\n            }\r\n        });\r\n        if (xBonds.length !== 0 && xBonds.length !== 2) {\r\n            throw Error('Unsupported cross-bonds number');\r\n        }\r\n        let xAtom1 = -1;\r\n        let xAtom2 = -1;\r\n        let crossBond = null;\r\n        if (xBonds.length === 2) {\r\n            const bond1 = mol.bonds.get(xBonds[0]);\r\n            xAtom1 = sgroup.parentAtomSet.has(bond1.begin) ? bond1.begin : bond1.end;\r\n            const bond2 = mol.bonds.get(xBonds[1]);\r\n            xAtom2 = sgroup.parentAtomSet.has(bond2.begin) ? bond2.begin : bond2.end;\r\n            crossBond = bond2;\r\n        }\r\n        let tailAtom = xAtom2;\r\n        const newAtoms = [];\r\n        for (let j = 0; j < sgroup.data.mul - 1; j++) {\r\n            const amap = {};\r\n            sgroup.atoms.forEach((aid) => {\r\n                const atom = mol.atoms.get(aid);\r\n                const aid2 = mol.atoms.add(new Atom(atom));\r\n                newAtoms.push(aid2);\r\n                sgroup.atomSet.add(aid2);\r\n                amap[aid] = aid2;\r\n            });\r\n            inBonds.forEach((bid) => {\r\n                const bond = mol.bonds.get(bid);\r\n                const newBond = new Bond(bond);\r\n                newBond.begin = amap[newBond.begin];\r\n                newBond.end = amap[newBond.end];\r\n                mol.bonds.add(newBond);\r\n            });\r\n            if (crossBond !== null) {\r\n                const newCrossBond = new Bond(crossBond);\r\n                newCrossBond.begin = tailAtom;\r\n                newCrossBond.end = amap[xAtom1];\r\n                mol.bonds.add(newCrossBond);\r\n                tailAtom = amap[xAtom2];\r\n            }\r\n        }\r\n        if (tailAtom >= 0) {\r\n            const xBond2 = mol.bonds.get(xBonds[1]);\r\n            if (xBond2.begin === xAtom2)\r\n                xBond2.begin = tailAtom;\r\n            else\r\n                xBond2.end = tailAtom;\r\n        }\r\n        sgroup.bonds = xBonds;\r\n        newAtoms.forEach((aid) => {\r\n            mol.sGroupForest\r\n                .getPathToRoot(sgroup.id)\r\n                .reverse()\r\n                .forEach((sgid) => {\r\n                mol.atomAddToSGroup(sgid, aid);\r\n            });\r\n        });\r\n    }\r\n    static getMassCentre(mol, atoms) {\r\n        let c = new Vec2(); // mass centre\r\n        for (let i = 0; i < atoms.length; ++i) {\r\n            c = c.addScaled(mol.atoms.get(atoms[i]).pp, 1.0 / atoms.length);\r\n        }\r\n        return c;\r\n    }\r\n}\r\nfunction descriptorIntersects(sgroups, topLeftPoint) {\r\n    return sgroups.some((sg) => {\r\n        if (!sg.pp)\r\n            return false;\r\n        const sgBottomRightPoint = sg.pp.add(new Vec2(0.5, 0.5));\r\n        const bottomRightPoint = topLeftPoint.add(new Vec2(0.5, 0.5));\r\n        return Box2Abs.segmentIntersection(sg.pp, sgBottomRightPoint, topLeftPoint, bottomRightPoint);\r\n    });\r\n}\r\n//# sourceMappingURL=sgroup.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/atom.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/bond.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/box2Abs.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/pile.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/struct.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/helpers/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/vec2.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/index.ts"],"map":"{\"version\":3,\"file\":\"sgroup.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/domain/entities/sgroup.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/entities/sgroup.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Bond } from './bond';\r\nimport { Box2Abs } from './box2Abs';\r\nimport { Pile } from './pile';\r\nimport { Struct } from './struct';\r\nimport { Vec2 } from './vec2';\r\nimport { ReStruct } from '../../application/render';\r\nexport declare class SGroupBracketParams {\r\n    readonly c: Vec2;\r\n    readonly d: Vec2;\r\n    readonly n: Vec2;\r\n    readonly w: number;\r\n    readonly h: number;\r\n    constructor(c: Vec2, d: Vec2, w: number, h: number);\r\n}\r\nexport declare class SGroup {\r\n    static TYPES: {\r\n        SUP: string;\r\n        MUL: string;\r\n        SRU: string;\r\n        MON: string;\r\n        MER: string;\r\n        COP: string;\r\n        CRO: string;\r\n        MOD: string;\r\n        GRA: string;\r\n        COM: string;\r\n        MIX: string;\r\n        FOR: string;\r\n        DAT: string;\r\n        ANY: string;\r\n        GEN: string;\r\n    };\r\n    type: string;\r\n    id: number;\r\n    label: number;\r\n    bracketBox: any;\r\n    bracketDir: Vec2;\r\n    areas: any;\r\n    hover: boolean;\r\n    hovering: any;\r\n    selected: boolean;\r\n    selectionPlate: any;\r\n    atoms: any;\r\n    atomSet: any;\r\n    parentAtomSet: any;\r\n    patoms?: any;\r\n    allAtoms: any;\r\n    bonds: any;\r\n    xBonds: any;\r\n    neiAtoms: any;\r\n    pp: Vec2 | null;\r\n    data: any;\r\n    firstSgroupAtom: any;\r\n    constructor(type: string);\r\n    getAttr(attr: string): any;\r\n    getAttrs(): any;\r\n    setAttr(attr: string, value: any): any;\r\n    checkAttr(attr: string, value: any): boolean;\r\n    updateOffset(offset: Vec2): void;\r\n    calculatePP(struct: Struct): void;\r\n    getAttAtomId(struct: Struct): number;\r\n    isGroupAttached(struct: Struct): boolean;\r\n    static getOffset(sgroup: SGroup): null | Vec2;\r\n    static isSaltOrSolvent(moleculeName: string): boolean;\r\n    static isAtomInSaltOrSolvent(atomId: number, sgroupsOnCanvas: SGroup[]): boolean;\r\n    static isBondInSaltOrSolvent(bondId: number, sgroupsOnCanvas: SGroup[]): boolean;\r\n    static filterAtoms(atoms: any, map: any): any[];\r\n    static removeNegative(atoms: any): any[];\r\n    static filter(_mol: any, sg: any, atomMap: any): void;\r\n    static clone(sgroup: SGroup, aidMap: Map<number, number>): SGroup;\r\n    static addAtom(sgroup: SGroup, aid: number): void;\r\n    static removeAtom(sgroup: SGroup, aid: number): void;\r\n    static getCrossBonds(mol: any, parentAtomSet: Pile<number>): {\r\n        [key: number]: Array<Bond>;\r\n    };\r\n    static bracketPos(sGroup: any, mol: any, crossBondsPerAtom: {\r\n        [key: number]: Array<Bond>;\r\n    }, remol?: ReStruct, render?: any): void;\r\n    static getBracketParameters(mol: any, crossBondsPerAtom: {\r\n        [key: number]: Array<Bond>;\r\n    }, atomSet: Pile<number>, bb: any, d: any, n: any): Array<any>;\r\n    static getObjBBox(atoms: any, mol: any): Box2Abs;\r\n    static getAtoms(mol: any, sg: any): Array<any>;\r\n    static getBonds(mol: any, sg: any): Array<any>;\r\n    static prepareMulForSaving(sgroup: any, mol: any): void;\r\n    static getMassCentre(mol: any, atoms: any): Vec2;\r\n}\r\n"}}
