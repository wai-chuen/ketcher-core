{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { StereoFlag } from \"../../entities\";\r\nimport { Elements } from \"../../constants\";\r\nimport common from './common';\r\nimport utils from './utils';\r\nconst END_V2000 = '2D 1   1.00000     0.00000     0';\r\nexport class Molfile {\r\n    molecule;\r\n    molfile;\r\n    reaction;\r\n    mapping;\r\n    bondMapping;\r\n    constructor() {\r\n        this.molecule = null;\r\n        this.molfile = null;\r\n        this.reaction = false;\r\n        this.mapping = {};\r\n        this.bondMapping = {};\r\n    }\r\n    parseCTFile(props) {\r\n        const { molfileLines, shouldReactionRelayout, ignoreChiralFlag } = props;\r\n        let ret;\r\n        if (molfileLines[0].search('\\\\$RXN') === 0) {\r\n            ret = common.parseRxn(molfileLines, shouldReactionRelayout, ignoreChiralFlag);\r\n        }\r\n        else {\r\n            ret = common.parseMol(molfileLines, ignoreChiralFlag);\r\n        }\r\n        ret.initHalfBonds();\r\n        ret.initNeighbors();\r\n        ret.bindSGroupsToFunctionalGroups();\r\n        return ret;\r\n    }\r\n    prepareSGroups(skipErrors, preserveIndigoDesc) {\r\n        const mol = this.molecule;\r\n        const toRemove = [];\r\n        let errors = 0;\r\n        this.molecule?.sGroupForest\r\n            .getSGroupsBFS()\r\n            .reverse()\r\n            .forEach((id) => {\r\n            const sgroup = mol.sgroups.get(id);\r\n            let errorIgnore = false;\r\n            try {\r\n                common.prepareForSaving[sgroup.type](sgroup, mol);\r\n            }\r\n            catch (ex) {\r\n                if (!skipErrors || typeof ex.id !== 'number') {\r\n                    throw new Error(`Error: ${ex.message}`);\r\n                }\r\n                errorIgnore = true;\r\n            }\r\n            /* eslint-disable no-mixed-operators */\r\n            if (errorIgnore ||\r\n                (!preserveIndigoDesc &&\r\n                    /^INDIGO_.+_DESC$/i.test(sgroup.data.fieldName))) {\r\n                errors += +errorIgnore;\r\n                toRemove.push(sgroup.id);\r\n            }\r\n        }, this);\r\n        if (errors) {\r\n            throw new Error('Warning: ' +\r\n                errors +\r\n                ' invalid S-groups were detected. They will be omitted.');\r\n        }\r\n        for (let i = 0; i < toRemove.length; ++i) {\r\n            mol?.sGroupDelete(toRemove[i]);\r\n        }\r\n    }\r\n    getCTab(molecule, rgroups) {\r\n        /* saver */\r\n        this.molecule = molecule.clone();\r\n        this.prepareSGroups(false, false);\r\n        this.molfile = '';\r\n        this.writeCTab2000(rgroups);\r\n        return this.molfile;\r\n    }\r\n    saveMolecule(molecule, skipSGroupErrors, norgroups, preserveIndigoDesc, ignoreChiralFlag) {\r\n        // eslint-disable-line max-statements\r\n        /* saver */\r\n        this.reaction = molecule.hasRxnArrow();\r\n        this.molfile = '' + molecule.name;\r\n        if (this.reaction) {\r\n            if (molecule.rgroups.size > 0) {\r\n                throw new Error('Reactions with r-groups are not supported at the moment');\r\n            }\r\n            const components = molecule.getComponents();\r\n            const reactants = components.reactants;\r\n            const products = components.products;\r\n            const all = reactants.concat(products);\r\n            this.molfile =\r\n                '$RXN\\n' +\r\n                    molecule.name +\r\n                    '\\n\\n\\n' +\r\n                    utils.paddedNum(reactants.length, 3) +\r\n                    utils.paddedNum(products.length, 3) +\r\n                    utils.paddedNum(0, 3) +\r\n                    '\\n';\r\n            for (let i = 0; i < all.length; ++i) {\r\n                const saver = new Molfile();\r\n                const submol = molecule.clone(all[i], null, true);\r\n                const molfile = saver.saveMolecule(submol, false, true);\r\n                this.molfile += '$MOL\\n' + molfile;\r\n            }\r\n            return this.molfile;\r\n        }\r\n        if (molecule.rgroups.size > 0) {\r\n            if (norgroups) {\r\n                molecule = molecule.getScaffold();\r\n            }\r\n            else {\r\n                const scaffold = new Molfile().getCTab(molecule.getScaffold(), molecule.rgroups);\r\n                this.molfile =\r\n                    '$MDL  REV  1\\n$MOL\\n$HDR\\n' + molecule.name + '\\n\\n\\n$END HDR\\n';\r\n                this.molfile += '$CTAB\\n' + scaffold + '$END CTAB\\n';\r\n                molecule.rgroups.forEach((rg, rgid) => {\r\n                    this.molfile += '$RGP\\n';\r\n                    this.writePaddedNumber(rgid, 3);\r\n                    this.molfile += '\\n';\r\n                    rg.frags.forEach((fid) => {\r\n                        const group = new Molfile().getCTab(molecule.getFragment(fid));\r\n                        this.molfile += '$CTAB\\n' + group + '$END CTAB\\n';\r\n                    });\r\n                    this.molfile += '$END RGP\\n';\r\n                });\r\n                this.molfile += '$END MOL\\n';\r\n                return this.molfile;\r\n            }\r\n        }\r\n        this.molecule = molecule.clone();\r\n        this.prepareSGroups(skipSGroupErrors, preserveIndigoDesc);\r\n        this.writeHeader();\r\n        this.writeCTab2000(undefined, ignoreChiralFlag);\r\n        return this.molfile;\r\n    }\r\n    writeHeader() {\r\n        /* saver */\r\n        const date = new Date();\r\n        this.writeCR(); // TODO: write structure name\r\n        this.writeWhiteSpace(2);\r\n        this.write('Ketcher');\r\n        this.writeWhiteSpace();\r\n        this.writeCR((date.getMonth() + 1 + '').padStart(2) +\r\n            (date.getDate() + '').padStart(2) +\r\n            ((date.getFullYear() % 100) + '').padStart(2) +\r\n            (date.getHours() + '').padStart(2) +\r\n            (date.getMinutes() + '').padStart(2) +\r\n            END_V2000);\r\n        this.writeCR();\r\n    }\r\n    write(str) {\r\n        /* saver */\r\n        this.molfile += str;\r\n    }\r\n    writeCR(str) {\r\n        /* saver */\r\n        if (arguments.length === 0) {\r\n            str = '';\r\n        }\r\n        this.molfile += str + '\\n';\r\n    }\r\n    writeWhiteSpace(length = 0) {\r\n        /* saver */\r\n        if (arguments.length === 0) {\r\n            length = 1;\r\n        }\r\n        this.write(' '.repeat(Math.max(length, 0)));\r\n    }\r\n    writePadded(str, width) {\r\n        /* saver */\r\n        this.write(str);\r\n        this.writeWhiteSpace(width - str.length);\r\n    }\r\n    writePaddedNumber(number, width) {\r\n        /* saver */\r\n        const str = (number - 0).toString();\r\n        this.writeWhiteSpace(width - str.length);\r\n        this.write(str);\r\n    }\r\n    writePaddedFloat(number, width, precision) {\r\n        /* saver */\r\n        this.write(utils.paddedNum(number, width, precision));\r\n    }\r\n    writeCTab2000Header(ignoreChiralFlag) {\r\n        /* saver */\r\n        this.writePaddedNumber(this.molecule.atoms.size, 3);\r\n        this.writePaddedNumber(this.molecule.bonds.size, 3);\r\n        this.writePaddedNumber(0, 3);\r\n        this.writePaddedNumber(0, 3);\r\n        const isAbsFlag = Array.from(this.molecule.frags.values()).some((fr) => fr ? fr.enhancedStereoFlag === StereoFlag.Abs : false);\r\n        this.writePaddedNumber(isAbsFlag || ignoreChiralFlag ? 1 : 0, 3);\r\n        this.writePaddedNumber(0, 3);\r\n        this.writePaddedNumber(0, 3);\r\n        this.writePaddedNumber(0, 3);\r\n        this.writePaddedNumber(0, 3);\r\n        this.writePaddedNumber(0, 3);\r\n        this.writePaddedNumber(999, 3);\r\n        this.writeCR(' V2000');\r\n    }\r\n    writeCTab2000(rgroups, ignoreChiralFlag) {\r\n        // eslint-disable-line max-statements\r\n        /* saver */\r\n        this.writeCTab2000Header(ignoreChiralFlag);\r\n        this.mapping = {};\r\n        let i = 1;\r\n        const atomsIds = [];\r\n        const atomsProps = [];\r\n        this.molecule.atoms.forEach((atom, id) => {\r\n            let label = atom.label;\r\n            if (atom.atomList != null) {\r\n                label = 'L';\r\n                atomsIds.push(id);\r\n            }\r\n            else if (atom.pseudo) {\r\n                if (atom.pseudo.length > 3) {\r\n                    label = 'A';\r\n                    atomsProps.push({ id, value: `'${atom.pseudo}'` });\r\n                }\r\n            }\r\n            else if (atom.alias) {\r\n                atomsProps.push({ id, value: atom.alias });\r\n            }\r\n            else if (!Elements.get(atom.label) &&\r\n                ['A', 'Q', 'X', '*', 'R#'].indexOf(atom.label) === -1) {\r\n                // search in generics?\r\n                label = 'C';\r\n                atomsProps.push({ id, value: atom.label });\r\n            }\r\n            this.writeAtom(atom, label);\r\n            this.mapping[id] = i++;\r\n        }, this);\r\n        this.bondMapping = {};\r\n        i = 1;\r\n        this.molecule.bonds.forEach((bond, id) => {\r\n            this.bondMapping[id] = i++;\r\n            this.writeBond(bond);\r\n        }, this);\r\n        while (atomsProps.length > 0) {\r\n            this.writeAtomProps(atomsProps[0]);\r\n            atomsProps.splice(0, 1);\r\n        }\r\n        const chargeList = [];\r\n        const isotopeList = [];\r\n        const radicalList = [];\r\n        const rglabelList = [];\r\n        const rglogicList = [];\r\n        const aplabelList = [];\r\n        const rbcountList = [];\r\n        const unsaturatedList = [];\r\n        const substcountList = [];\r\n        this.molecule.atoms.forEach((atom, id) => {\r\n            if (atom.charge !== 0) {\r\n                chargeList.push([id, atom.charge]);\r\n            }\r\n            if (atom.isotope !== 0) {\r\n                isotopeList.push([id, atom.isotope]);\r\n            }\r\n            if (atom.radical !== 0) {\r\n                radicalList.push([id, atom.radical]);\r\n            }\r\n            if (atom.rglabel != null && atom.label === 'R#') {\r\n                // TODO need to force rglabel=null when label is not 'R#'\r\n                for (let rgi = 0; rgi < 32; rgi++) {\r\n                    if (atom.rglabel & (1 << rgi)) {\r\n                        rglabelList.push([id, rgi + 1]);\r\n                    }\r\n                }\r\n            }\r\n            if (atom.attpnt != null) {\r\n                aplabelList.push([id, atom.attpnt]);\r\n            }\r\n            if (atom.ringBondCount !== 0) {\r\n                rbcountList.push([id, atom.ringBondCount]);\r\n            }\r\n            if (atom.substitutionCount !== 0) {\r\n                substcountList.push([id, atom.substitutionCount]);\r\n            }\r\n            if (atom.unsaturatedAtom !== 0) {\r\n                unsaturatedList.push([id, atom.unsaturatedAtom]);\r\n            }\r\n        });\r\n        if (rgroups) {\r\n            rgroups.forEach((rg, rgid) => {\r\n                if (rg.resth || rg.ifthen > 0 || rg.range.length > 0) {\r\n                    const line = '  1 ' +\r\n                        utils.paddedNum(rgid, 3) +\r\n                        ' ' +\r\n                        utils.paddedNum(rg.ifthen, 3) +\r\n                        ' ' +\r\n                        utils.paddedNum(rg.resth ? 1 : 0, 3) +\r\n                        '   ' +\r\n                        rg.range;\r\n                    rglogicList.push(line);\r\n                }\r\n            });\r\n        }\r\n        this.writeAtomPropList('M  CHG', chargeList);\r\n        this.writeAtomPropList('M  ISO', isotopeList);\r\n        this.writeAtomPropList('M  RAD', radicalList);\r\n        this.writeAtomPropList('M  RGP', rglabelList);\r\n        for (let j = 0; j < rglogicList.length; ++j) {\r\n            this.write('M  LOG' + rglogicList[j] + '\\n');\r\n        }\r\n        this.writeAtomPropList('M  APO', aplabelList);\r\n        this.writeAtomPropList('M  RBC', rbcountList);\r\n        this.writeAtomPropList('M  SUB', substcountList);\r\n        this.writeAtomPropList('M  UNS', unsaturatedList);\r\n        if (atomsIds.length > 0) {\r\n            for (let j = 0; j < atomsIds.length; ++j) {\r\n                const atomId = atomsIds[j];\r\n                const atomList = this.molecule.atoms.get(atomId).atomList;\r\n                this.write('M  ALS');\r\n                this.writePaddedNumber(atomId + 1, 4);\r\n                this.writePaddedNumber(atomList.ids.length, 3);\r\n                this.writeWhiteSpace();\r\n                this.write(atomList.notList ? 'T' : 'F');\r\n                const labelList = atomList.labelList();\r\n                for (let k = 0; k < labelList.length; ++k) {\r\n                    this.writeWhiteSpace();\r\n                    this.writePadded(labelList[k], 3);\r\n                }\r\n                this.writeWhiteSpace();\r\n                this.writeCR();\r\n            }\r\n        }\r\n        const sgmap = {};\r\n        let cnt = 1;\r\n        const sgmapback = {};\r\n        const sgorder = this.molecule.sGroupForest.getSGroupsBFS();\r\n        sgorder.forEach((id) => {\r\n            sgmapback[cnt] = id;\r\n            sgmap[id] = cnt++;\r\n        });\r\n        for (let q = 1; q < cnt; ++q) {\r\n            // each group on its own\r\n            const id = sgmapback[q];\r\n            const sgroup = this.molecule.sgroups.get(id);\r\n            this.write('M  STY');\r\n            this.writePaddedNumber(1, 3);\r\n            this.writeWhiteSpace(1);\r\n            this.writePaddedNumber(q, 3);\r\n            this.writeWhiteSpace(1);\r\n            this.writePadded(sgroup.type, 3);\r\n            this.writeCR();\r\n            // TODO: write subtype, M SST\r\n            this.write('M  SLB');\r\n            this.writePaddedNumber(1, 3);\r\n            this.writeWhiteSpace(1);\r\n            this.writePaddedNumber(q, 3);\r\n            this.writeWhiteSpace(1);\r\n            this.writePaddedNumber(q, 3);\r\n            this.writeCR();\r\n            const parentId = this.molecule.sGroupForest.parent.get(id);\r\n            if (parentId >= 0) {\r\n                this.write('M  SPL');\r\n                this.writePaddedNumber(1, 3);\r\n                this.writeWhiteSpace(1);\r\n                this.writePaddedNumber(q, 3);\r\n                this.writeWhiteSpace(1);\r\n                this.writePaddedNumber(sgmap[parentId], 3);\r\n                this.writeCR();\r\n            }\r\n            // connectivity\r\n            if (sgroup.type === 'SRU' && sgroup.data.connectivity) {\r\n                const connectivity = ` ${q.toString().padStart(3)} ${(sgroup.data.connectivity || '').padEnd(3)}`;\r\n                this.write('M  SCN');\r\n                this.writePaddedNumber(1, 3);\r\n                this.write(connectivity.toUpperCase());\r\n                this.writeCR();\r\n            }\r\n            if (sgroup.type === 'SRU') {\r\n                this.write('M  SMT ');\r\n                this.writePaddedNumber(q, 3);\r\n                this.writeWhiteSpace();\r\n                this.write(sgroup.data.subscript || 'n');\r\n                this.writeCR();\r\n            }\r\n            this.writeCR(common.saveToMolfile[sgroup.type](sgroup, this.molecule, sgmap, this.mapping, this.bondMapping));\r\n        }\r\n        // TODO: write M  APO\r\n        // TODO: write M  AAL\r\n        // TODO: write M  RGP\r\n        // TODO: write M  LOG\r\n        const expandedGroups = [];\r\n        this.molecule.sgroups.forEach((sg) => {\r\n            if (sg.data.expanded)\r\n                expandedGroups.push(sg.id + 1);\r\n        });\r\n        if (expandedGroups.length) {\r\n            const expandedGroupsLine = `M  SDS EXP  ${expandedGroups.length}   ${expandedGroups.join('   ')}`;\r\n            this.writeCR(expandedGroupsLine);\r\n        }\r\n        this.writeCR('M  END');\r\n    }\r\n    writeAtom(atom, atomLabel) {\r\n        this.writePaddedFloat(atom.pp.x, 10, 4);\r\n        this.writePaddedFloat(-atom.pp.y, 10, 4);\r\n        this.writePaddedFloat(atom.pp.z, 10, 4);\r\n        this.writeWhiteSpace();\r\n        this.writePadded(atomLabel, 3);\r\n        this.writePaddedNumber(0, 2);\r\n        this.writePaddedNumber(0, 3);\r\n        this.writePaddedNumber(0, 3);\r\n        if (typeof atom.hCount === 'undefined') {\r\n            atom.hCount = 0;\r\n        }\r\n        this.writePaddedNumber(atom.hCount, 3);\r\n        if (typeof atom.stereoCare === 'undefined') {\r\n            atom.stereoCare = 0;\r\n        }\r\n        this.writePaddedNumber(atom.stereoCare, 3);\r\n        let number;\r\n        if (atom.explicitValence < 0) {\r\n            number = 0;\r\n        }\r\n        else if (atom.explicitValence === 0) {\r\n            number = 15;\r\n        }\r\n        else {\r\n            number = atom.explicitValence;\r\n        }\r\n        this.writePaddedNumber(number, 3);\r\n        this.writePaddedNumber(0, 3);\r\n        this.writePaddedNumber(0, 3);\r\n        this.writePaddedNumber(0, 3);\r\n        if (typeof atom.aam === 'undefined') {\r\n            atom.aam = 0;\r\n        }\r\n        this.writePaddedNumber(atom.aam, 3);\r\n        if (typeof atom.invRet === 'undefined') {\r\n            atom.invRet = 0;\r\n        }\r\n        this.writePaddedNumber(atom.invRet, 3);\r\n        if (typeof atom.exactChangeFlag === 'undefined') {\r\n            atom.exactChangeFlag = 0;\r\n        }\r\n        this.writePaddedNumber(atom.exactChangeFlag, 3);\r\n        this.writeCR();\r\n    }\r\n    writeBond(bond) {\r\n        this.writePaddedNumber(this.mapping[bond.begin], 3);\r\n        this.writePaddedNumber(this.mapping[bond.end], 3);\r\n        this.writePaddedNumber(bond.type, 3);\r\n        if (typeof bond.stereo === 'undefined') {\r\n            bond.stereo = 0;\r\n        }\r\n        this.writePaddedNumber(bond.stereo, 3);\r\n        this.writePadded(bond.xxx, 3);\r\n        if (typeof bond.topology === 'undefined') {\r\n            bond.topology = 0;\r\n        }\r\n        this.writePaddedNumber(bond.topology, 3);\r\n        if (typeof bond.reactingCenterStatus === 'undefined') {\r\n            bond.reactingCenterStatus = 0;\r\n        }\r\n        this.writePaddedNumber(bond.reactingCenterStatus, 3);\r\n        this.writeCR();\r\n    }\r\n    writeAtomProps(props) {\r\n        this.write('A  ');\r\n        this.writePaddedNumber(props.id + 1, 3);\r\n        this.writeCR();\r\n        this.writeCR(props.value);\r\n    }\r\n    writeAtomPropList(propId, values) {\r\n        while (values.length > 0) {\r\n            const part = [];\r\n            while (values.length > 0 && part.length < 8) {\r\n                part.push(values[0]);\r\n                values.splice(0, 1);\r\n            }\r\n            this.write(propId);\r\n            this.writePaddedNumber(part.length, 3);\r\n            part.forEach((value) => {\r\n                this.writeWhiteSpace();\r\n                this.writePaddedNumber(this.mapping[value[0]], 3);\r\n                this.writeWhiteSpace();\r\n                this.writePaddedNumber(value[1], 3);\r\n            });\r\n            this.writeCR();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=molfile.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/constants/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/mol/common.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/mol/utils.js"],"map":"{\"version\":3,\"file\":\"molfile.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/domain/serializers/mol/molfile.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/serializers/mol/molfile.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Struct } from \"../../entities\";\r\ndeclare type Mapping = {\r\n    [key in number]: number;\r\n};\r\ninterface ParseCTFileProps {\r\n    molfileLines: string[];\r\n    shouldReactionRelayout?: boolean;\r\n    ignoreChiralFlag?: boolean;\r\n}\r\nexport declare class Molfile {\r\n    molecule: Struct | null;\r\n    molfile: string | null;\r\n    reaction: boolean;\r\n    mapping: Mapping;\r\n    bondMapping: Mapping;\r\n    constructor();\r\n    parseCTFile(props: ParseCTFileProps): any;\r\n    prepareSGroups(skipErrors: boolean, preserveIndigoDesc?: boolean): void;\r\n    getCTab(molecule: Struct, rgroups?: Map<any, any>): string;\r\n    saveMolecule(molecule: Struct, skipSGroupErrors: boolean, norgroups?: boolean, preserveIndigoDesc?: boolean, ignoreChiralFlag?: boolean): string;\r\n    writeHeader(): void;\r\n    write(str: string): void;\r\n    writeCR(str?: string): void;\r\n    writeWhiteSpace(length?: number): void;\r\n    writePadded(str: string, width: number): void;\r\n    writePaddedNumber(number: number, width: number): void;\r\n    writePaddedFloat(number: string | number, width: number, precision: number): void;\r\n    writeCTab2000Header(ignoreChiralFlag: any): void;\r\n    writeCTab2000(rgroups?: Map<any, any>, ignoreChiralFlag?: boolean): void;\r\n    private writeAtom;\r\n    private writeBond;\r\n    private writeAtomProps;\r\n    private writeAtomPropList;\r\n}\r\nexport {};\r\n"}}
