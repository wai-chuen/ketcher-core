{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nfunction pollDeferred(process, complete, timeGap, startTimeGap) {\r\n    return new Promise((resolve, reject) => {\r\n        function iterate() {\r\n            process().then((val) => {\r\n                try {\r\n                    if (complete(val))\r\n                        resolve(val);\r\n                    else\r\n                        setTimeout(iterate, timeGap);\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }, (err) => reject(err));\r\n        }\r\n        setTimeout(iterate, startTimeGap || 0);\r\n    });\r\n}\r\nfunction parametrizeUrl(url, params) {\r\n    return url.replace(/:(\\w+)/g, (_, val) => params[val]);\r\n}\r\nfunction request(method, url, data, headers, responseHandler) {\r\n    let requestUrl = url;\r\n    if (data && method === 'GET')\r\n        requestUrl = parametrizeUrl(url, data);\r\n    let response = fetch(requestUrl, {\r\n        method,\r\n        headers: Object.assign({\r\n            Accept: 'application/json'\r\n        }, headers),\r\n        body: method !== 'GET' ? data : undefined,\r\n        credentials: 'same-origin'\r\n    });\r\n    if (responseHandler) {\r\n        response = responseHandler(response);\r\n    }\r\n    else {\r\n        response = response.then((response) => response\r\n            .json()\r\n            .then((res) => (response.ok ? res : Promise.reject(res.error))));\r\n    }\r\n    return response;\r\n}\r\nfunction indigoCall(method, url, baseUrl, defaultOptions, customHeaders) {\r\n    return function (data, options, responseHandler) {\r\n        const body = Object.assign({}, data);\r\n        body.options = Object.assign(body.options || {}, defaultOptions, options);\r\n        return request(method, baseUrl + url, JSON.stringify(body), {\r\n            'Content-Type': 'application/json',\r\n            ...customHeaders\r\n        }, responseHandler);\r\n    };\r\n}\r\nexport class RemoteStructService {\r\n    apiPath;\r\n    defaultOptions;\r\n    customHeaders;\r\n    constructor(apiPath, defaultOptions, customHeaders) {\r\n        this.apiPath = apiPath;\r\n        this.defaultOptions = defaultOptions;\r\n        this.customHeaders = customHeaders;\r\n    }\r\n    generateInchIKey(struct) {\r\n        return indigoCall('POST', 'indigo/convert', this.apiPath, this.defaultOptions, this.customHeaders)({\r\n            struct,\r\n            output_format: 'chemical/x-inchi'\r\n        }, {});\r\n    }\r\n    async info() {\r\n        let indigoVersion;\r\n        let imagoVersions;\r\n        let isAvailable = false;\r\n        try {\r\n            const response = await request('GET', this.apiPath + 'info');\r\n            indigoVersion = response.indigo_version;\r\n            imagoVersions = response.imago_versions;\r\n            isAvailable = true;\r\n        }\r\n        catch (e) {\r\n            indigoVersion = '';\r\n            imagoVersions = [];\r\n            isAvailable = false;\r\n        }\r\n        return {\r\n            indigoVersion,\r\n            imagoVersions,\r\n            isAvailable\r\n        };\r\n    }\r\n    convert(data, options) {\r\n        return indigoCall('POST', 'indigo/convert', this.apiPath, this.defaultOptions, this.customHeaders)(data, options);\r\n    }\r\n    layout(data, options) {\r\n        return indigoCall('POST', 'indigo/layout', this.apiPath, this.defaultOptions, this.customHeaders)(data, options);\r\n    }\r\n    clean(data, options) {\r\n        return indigoCall('POST', 'indigo/clean', this.apiPath, this.defaultOptions, this.customHeaders)(data, options);\r\n    }\r\n    aromatize(data, options) {\r\n        return indigoCall('POST', 'indigo/aromatize', this.apiPath, this.defaultOptions, this.customHeaders)(data, options);\r\n    }\r\n    dearomatize(data, options) {\r\n        return indigoCall('POST', 'indigo/dearomatize', this.apiPath, this.defaultOptions, this.customHeaders)(data, options);\r\n    }\r\n    calculateCip(data, options) {\r\n        return indigoCall('POST', 'indigo/calculate_cip', this.apiPath, this.defaultOptions, this.customHeaders)(data, options);\r\n    }\r\n    automap(data, options) {\r\n        return indigoCall('POST', 'indigo/automap', this.apiPath, this.defaultOptions, this.customHeaders)(data, options);\r\n    }\r\n    check(data, options) {\r\n        return indigoCall('POST', 'indigo/check', this.apiPath, this.defaultOptions, this.customHeaders)(data, options);\r\n    }\r\n    calculate(data, options) {\r\n        return indigoCall('POST', 'indigo/calculate', this.apiPath, this.defaultOptions, this.customHeaders)(data, options);\r\n    }\r\n    recognize(blob, version) {\r\n        const parVersion = version ? `?version=${version}` : '';\r\n        const req = request('POST', this.apiPath + `imago/uploads${parVersion}`, blob, {\r\n            'Content-Type': blob.type || 'application/octet-stream'\r\n        });\r\n        const status = request.bind(null, 'GET', this.apiPath + 'imago/uploads/:id');\r\n        return req\r\n            .then((data) => pollDeferred(status.bind(null, { id: data.upload_id }), (response) => {\r\n            if (response.state === 'FAILURE')\r\n                throw response;\r\n            return response.state === 'SUCCESS';\r\n        }, 500, 300))\r\n            .then((response) => ({ struct: response.metadata.mol_str }));\r\n    }\r\n    generateImageAsBase64(data, options) {\r\n        const outputFormat = options?.outputFormat || 'png';\r\n        return indigoCall('POST', 'indigo/render', this.apiPath, this.defaultOptions, this.customHeaders)({ struct: data }, { 'render-output-format': outputFormat }, (response) => response.then((resp) => resp.text()));\r\n    }\r\n}\r\n//# sourceMappingURL=remoteStructService.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/services/index.ts"],"map":"{\"version\":3,\"file\":\"remoteStructService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/infrastructure/services/struct/remoteStructService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/infrastructure/services/struct/remoteStructService.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { AromatizeData, AromatizeResult, AutomapData, AutomapResult, CalculateCipData, CalculateCipResult, CalculateData, CalculateResult, CheckData, CheckResult, CleanData, CleanResult, ConvertData, ConvertResult, DearomatizeData, DearomatizeResult, GenerateImageOptions, InfoResult, LayoutData, LayoutResult, RecognizeResult, StructService, StructServiceOptions } from \"../../../domain/services\";\r\nexport declare class RemoteStructService implements StructService {\r\n    private readonly apiPath;\r\n    private readonly defaultOptions;\r\n    private readonly customHeaders?;\r\n    constructor(apiPath: string, defaultOptions: StructServiceOptions, customHeaders?: Record<string, string>);\r\n    generateInchIKey(struct: string): Promise<string>;\r\n    info(): Promise<InfoResult>;\r\n    convert(data: ConvertData, options?: StructServiceOptions): Promise<ConvertResult>;\r\n    layout(data: LayoutData, options?: StructServiceOptions): Promise<LayoutResult>;\r\n    clean(data: CleanData, options?: StructServiceOptions): Promise<CleanResult>;\r\n    aromatize(data: AromatizeData, options?: StructServiceOptions): Promise<AromatizeResult>;\r\n    dearomatize(data: DearomatizeData, options?: StructServiceOptions): Promise<DearomatizeResult>;\r\n    calculateCip(data: CalculateCipData, options?: StructServiceOptions): Promise<CalculateCipResult>;\r\n    automap(data: AutomapData, options?: StructServiceOptions): Promise<AutomapResult>;\r\n    check(data: CheckData, options?: StructServiceOptions): Promise<CheckResult>;\r\n    calculate(data: CalculateData, options?: StructServiceOptions): Promise<CalculateResult>;\r\n    recognize(blob: Blob, version: string): Promise<RecognizeResult>;\r\n    generateImageAsBase64(data: string, options?: GenerateImageOptions): Promise<string>;\r\n}\r\n"}}
