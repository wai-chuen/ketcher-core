{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { radicalElectrons } from './atom';\r\nimport { Bond } from './bond';\r\nimport { Box2Abs } from './box2Abs';\r\nimport { Elements } from \"../constants\";\r\nimport { Fragment } from './fragment';\r\nimport { FunctionalGroup } from './functionalGroup';\r\nimport { HalfBond } from './halfBond';\r\nimport { Loop } from './loop';\r\nimport { Pile } from './pile';\r\nimport { Pool } from './pool';\r\nimport { SGroup } from './sgroup';\r\nimport { SGroupForest } from './sgroupForest';\r\nimport { Vec2 } from './vec2';\r\nfunction arrayAddIfMissing(array, item) {\r\n    for (let i = 0; i < array.length; ++i) {\r\n        if (array[i] === item)\r\n            return false;\r\n    }\r\n    array.push(item);\r\n    return true;\r\n}\r\nexport class Struct {\r\n    atoms;\r\n    bonds;\r\n    sgroups;\r\n    halfBonds;\r\n    loops;\r\n    isReaction;\r\n    rxnArrows;\r\n    rxnPluses;\r\n    frags;\r\n    rgroups;\r\n    name;\r\n    abbreviation;\r\n    sGroupForest;\r\n    simpleObjects;\r\n    texts;\r\n    functionalGroups;\r\n    highlights;\r\n    constructor() {\r\n        this.atoms = new Pool();\r\n        this.bonds = new Pool();\r\n        this.sgroups = new Pool();\r\n        this.halfBonds = new Pool();\r\n        this.loops = new Pool();\r\n        this.isReaction = false;\r\n        this.rxnArrows = new Pool();\r\n        this.rxnPluses = new Pool();\r\n        this.frags = new Pool();\r\n        this.rgroups = new Pool();\r\n        this.name = '';\r\n        this.abbreviation = '';\r\n        this.sGroupForest = new SGroupForest();\r\n        this.simpleObjects = new Pool();\r\n        this.texts = new Pool();\r\n        this.functionalGroups = new Pool();\r\n        this.highlights = new Pool();\r\n    }\r\n    hasRxnProps() {\r\n        return !!(this.atoms.find((_aid, atom) => atom.hasRxnProps()) ||\r\n            this.bonds.find((_bid, bond) => bond.hasRxnProps()));\r\n    }\r\n    hasRxnArrow() {\r\n        return this.rxnArrows.size >= 1;\r\n    }\r\n    hasRxnPluses() {\r\n        return this.rxnPluses.size > 0;\r\n    }\r\n    isRxn() {\r\n        return this.hasRxnArrow() || this.hasRxnPluses();\r\n    }\r\n    isBlank() {\r\n        return (this.atoms.size === 0 &&\r\n            this.rxnArrows.size === 0 &&\r\n            this.rxnPluses.size === 0 &&\r\n            this.simpleObjects.size === 0 &&\r\n            this.texts.size === 0);\r\n    }\r\n    isSingleGroup() {\r\n        if (!this.sgroups.size || this.sgroups.size > 1)\r\n            return false;\r\n        const sgroup = this.sgroups.values().next().value; // get sgroup from map\r\n        return this.atoms.size === sgroup.atoms.length;\r\n    }\r\n    clone(atomSet, bondSet, dropRxnSymbols, aidMap, simpleObjectsSet, textsSet) {\r\n        return this.mergeInto(new Struct(), atomSet, bondSet, dropRxnSymbols, false, aidMap, simpleObjectsSet, textsSet);\r\n    }\r\n    getScaffold() {\r\n        const atomSet = new Pile();\r\n        this.atoms.forEach((_atom, aid) => {\r\n            atomSet.add(aid);\r\n        });\r\n        this.rgroups.forEach((rg) => {\r\n            rg.frags.forEach((_fnum, fid) => {\r\n                this.atoms.forEach((atom, aid) => {\r\n                    if (atom.fragment === fid)\r\n                        atomSet.delete(aid);\r\n                });\r\n            });\r\n        });\r\n        return this.clone(atomSet);\r\n    }\r\n    getFragmentIds(fid) {\r\n        const atomSet = new Pile();\r\n        this.atoms.forEach((atom, aid) => {\r\n            if (atom.fragment === fid)\r\n                atomSet.add(aid);\r\n        });\r\n        return atomSet;\r\n    }\r\n    getFragment(fid) {\r\n        return this.clone(this.getFragmentIds(fid), null, true);\r\n    }\r\n    mergeInto(cp, atomSet, bondSet, dropRxnSymbols, keepAllRGroups, aidMap, simpleObjectsSet, textsSet) {\r\n        atomSet = atomSet || new Pile(this.atoms.keys());\r\n        bondSet = bondSet || new Pile(this.bonds.keys());\r\n        simpleObjectsSet =\r\n            simpleObjectsSet || new Pile(this.simpleObjects.keys());\r\n        textsSet = textsSet || new Pile(this.texts.keys());\r\n        aidMap = aidMap || new Map();\r\n        bondSet = bondSet.filter((bid) => {\r\n            const bond = this.bonds.get(bid);\r\n            return atomSet.has(bond.begin) && atomSet.has(bond.end);\r\n        });\r\n        const fidMask = new Pile();\r\n        this.atoms.forEach((atom, aid) => {\r\n            if (atomSet.has(aid))\r\n                fidMask.add(atom.fragment);\r\n        });\r\n        const fidMap = new Map();\r\n        this.frags.forEach((_frag, fid) => {\r\n            if (fidMask.has(fid))\r\n                fidMap.set(fid, cp.frags.add(null));\r\n        });\r\n        const rgroupsIds = [];\r\n        this.rgroups.forEach((rgroup, rgid) => {\r\n            let keepGroup = keepAllRGroups;\r\n            if (!keepGroup) {\r\n                rgroup.frags.forEach((_fnum, fid) => {\r\n                    rgroupsIds.push(fid);\r\n                    if (fidMask.has(fid))\r\n                        keepGroup = true;\r\n                });\r\n                if (!keepGroup)\r\n                    return;\r\n            }\r\n            const rg = cp.rgroups.get(rgid);\r\n            if (rg) {\r\n                rgroup.frags.forEach((_fnum, fid) => {\r\n                    rgroupsIds.push(fid);\r\n                    if (fidMask.has(fid))\r\n                        rg.frags.add(fidMap.get(fid));\r\n                });\r\n            }\r\n            else {\r\n                cp.rgroups.set(rgid, rgroup.clone(fidMap));\r\n            }\r\n        });\r\n        // atoms in not RGroup\r\n        this.atoms.forEach((atom, aid) => {\r\n            if (atomSet.has(aid) && rgroupsIds.indexOf(atom.fragment) === -1) {\r\n                aidMap.set(aid, cp.atoms.add(atom.clone(fidMap)));\r\n            }\r\n        });\r\n        // atoms in RGroup\r\n        this.atoms.forEach((atom, aid) => {\r\n            if (atomSet.has(aid) && rgroupsIds.indexOf(atom.fragment) !== -1) {\r\n                aidMap.set(aid, cp.atoms.add(atom.clone(fidMap)));\r\n            }\r\n        });\r\n        fidMap.forEach((newfid, oldfid) => {\r\n            const fragment = this.frags.get(oldfid);\r\n            // TODO: delete type check\r\n            if (fragment && fragment instanceof Fragment) {\r\n                cp.frags.set(newfid, this.frags.get(oldfid).clone(aidMap)); // clone Fragments\r\n            }\r\n        });\r\n        const bidMap = new Map();\r\n        this.bonds.forEach((bond, bid) => {\r\n            if (bondSet.has(bid))\r\n                bidMap.set(bid, cp.bonds.add(bond.clone(aidMap)));\r\n        });\r\n        this.sgroups.forEach((sg) => {\r\n            if (sg.atoms.some((aid) => !atomSet.has(aid)))\r\n                return;\r\n            sg = SGroup.clone(sg, aidMap);\r\n            const id = cp.sgroups.add(sg);\r\n            sg.id = id;\r\n            sg.atoms.forEach((aid) => {\r\n                const atom = cp.atoms.get(aid);\r\n                if (atom) {\r\n                    atom.sgs.add(id);\r\n                }\r\n            });\r\n            if (sg.type === 'DAT')\r\n                cp.sGroupForest.insert(sg, -1, []);\r\n            else\r\n                cp.sGroupForest.insert(sg);\r\n        });\r\n        this.functionalGroups.forEach((fg) => {\r\n            fg = FunctionalGroup.clone(fg);\r\n            cp.functionalGroups.add(fg);\r\n        });\r\n        simpleObjectsSet.forEach((soid) => {\r\n            cp.simpleObjects.add(this.simpleObjects.get(soid).clone());\r\n        });\r\n        textsSet.forEach((id) => {\r\n            cp.texts.add(this.texts.get(id).clone());\r\n        });\r\n        if (!dropRxnSymbols) {\r\n            cp.isReaction = this.isReaction;\r\n            this.rxnArrows.forEach((item) => {\r\n                cp.rxnArrows.add(item.clone());\r\n            });\r\n            this.rxnPluses.forEach((item) => {\r\n                cp.rxnPluses.add(item.clone());\r\n            });\r\n        }\r\n        cp.name = this.name;\r\n        return cp;\r\n    }\r\n    // NB: this updates the structure without modifying the corresponding ReStruct.\r\n    //  To be applied to standalone structures only.\r\n    prepareLoopStructure() {\r\n        this.initHalfBonds();\r\n        this.initNeighbors();\r\n        this.updateHalfBonds(Array.from(this.atoms.keys()));\r\n        this.sortNeighbors(Array.from(this.atoms.keys()));\r\n        this.findLoops();\r\n    }\r\n    atomAddToSGroup(sgid, aid) {\r\n        // TODO: [MK] make sure the addition does not break the hierarchy?\r\n        SGroup.addAtom(this.sgroups.get(sgid), aid);\r\n        this.atoms.get(aid).sgs.add(sgid);\r\n    }\r\n    calcConn(atom) {\r\n        let conn = 0;\r\n        for (let i = 0; i < atom.neighbors.length; ++i) {\r\n            const hb = this.halfBonds.get(atom.neighbors[i]);\r\n            const bond = this.bonds.get(hb.bid);\r\n            switch (bond.type) {\r\n                case Bond.PATTERN.TYPE.SINGLE:\r\n                    conn += 1;\r\n                    break;\r\n                case Bond.PATTERN.TYPE.DOUBLE:\r\n                    conn += 2;\r\n                    break;\r\n                case Bond.PATTERN.TYPE.TRIPLE:\r\n                    conn += 3;\r\n                    break;\r\n                case Bond.PATTERN.TYPE.DATIVE:\r\n                    break;\r\n                case Bond.PATTERN.TYPE.HYDROGEN:\r\n                    break;\r\n                case Bond.PATTERN.TYPE.AROMATIC:\r\n                    if (atom.neighbors.length === 1)\r\n                        return [-1, true];\r\n                    return [atom.neighbors.length, true];\r\n                default:\r\n                    return [-1, false];\r\n            }\r\n        }\r\n        return [conn, false];\r\n    }\r\n    findBondId(begin, end) {\r\n        return this.bonds.find((_bid, bond) => (bond.begin === begin && bond.end === end) ||\r\n            (bond.begin === end && bond.end === begin));\r\n    }\r\n    initNeighbors() {\r\n        this.atoms.forEach((atom) => {\r\n            atom.neighbors = [];\r\n        });\r\n        this.bonds.forEach((bond) => {\r\n            const a1 = this.atoms.get(bond.begin);\r\n            const a2 = this.atoms.get(bond.end);\r\n            a1.neighbors.push(bond.hb1);\r\n            a2.neighbors.push(bond.hb2);\r\n        });\r\n    }\r\n    bondInitHalfBonds(bid, bond) {\r\n        bond = bond || this.bonds.get(bid);\r\n        bond.hb1 = 2 * bid;\r\n        bond.hb2 = 2 * bid + 1; // eslint-disable-line no-mixed-operators\r\n        this.halfBonds.set(bond.hb1, new HalfBond(bond.begin, bond.end, bid));\r\n        this.halfBonds.set(bond.hb2, new HalfBond(bond.end, bond.begin, bid));\r\n        const hb1 = this.halfBonds.get(bond.hb1);\r\n        const hb2 = this.halfBonds.get(bond.hb2);\r\n        hb1.contra = bond.hb2;\r\n        hb2.contra = bond.hb1;\r\n    }\r\n    halfBondUpdate(halfBondId) {\r\n        const halfBond = this.halfBonds.get(halfBondId);\r\n        const startCoords = this.atoms.get(halfBond.begin).pp;\r\n        const endCoords = this.atoms.get(halfBond.end).pp;\r\n        const coordsDifference = Vec2.diff(endCoords, startCoords).normalized();\r\n        halfBond.dir =\r\n            Vec2.dist(endCoords, startCoords) > 1e-4\r\n                ? coordsDifference\r\n                : new Vec2(1, 0);\r\n        halfBond.norm = halfBond.dir.turnLeft();\r\n        halfBond.ang = halfBond.dir.oxAngle();\r\n        if (halfBond.loop < 0)\r\n            halfBond.loop = -1;\r\n    }\r\n    initHalfBonds() {\r\n        this.halfBonds.clear();\r\n        this.bonds.forEach((bond, bid) => {\r\n            this.bondInitHalfBonds(bid, bond);\r\n        });\r\n    }\r\n    setHbNext(hbid, next) {\r\n        this.halfBonds.get(this.halfBonds.get(hbid).contra).next = next;\r\n    }\r\n    halfBondSetAngle(hbid, left) {\r\n        const hb = this.halfBonds.get(hbid);\r\n        const hbl = this.halfBonds.get(left);\r\n        hbl.rightCos = Vec2.dot(hbl.dir, hb.dir);\r\n        hb.leftCos = Vec2.dot(hbl.dir, hb.dir);\r\n        hbl.rightSin = Vec2.cross(hbl.dir, hb.dir);\r\n        hb.leftSin = Vec2.cross(hbl.dir, hb.dir);\r\n        hb.leftNeighbor = left;\r\n        hbl.rightNeighbor = hbid;\r\n    }\r\n    atomAddNeighbor(hbid) {\r\n        const hb = this.halfBonds.get(hbid);\r\n        const atom = this.atoms.get(hb.begin);\r\n        let i;\r\n        for (i = 0; i < atom.neighbors.length; ++i) {\r\n            if (this.halfBonds.get(atom.neighbors[i]).ang > hb.ang)\r\n                break;\r\n        }\r\n        atom.neighbors.splice(i, 0, hbid);\r\n        const ir = atom.neighbors[(i + 1) % atom.neighbors.length];\r\n        const il = atom.neighbors[(i + atom.neighbors.length - 1) % atom.neighbors.length];\r\n        this.setHbNext(il, hbid);\r\n        this.setHbNext(hbid, ir);\r\n        this.halfBondSetAngle(hbid, il);\r\n        this.halfBondSetAngle(ir, hbid);\r\n    }\r\n    atomSortNeighbors(aid) {\r\n        const atom = this.atoms.get(aid);\r\n        const halfBonds = this.halfBonds;\r\n        atom.neighbors\r\n            .sort((nei, nei2) => halfBonds.get(nei).ang - halfBonds.get(nei2).ang)\r\n            .forEach((nei, i) => {\r\n            const nextNei = atom.neighbors[(i + 1) % atom.neighbors.length];\r\n            this.halfBonds.get(this.halfBonds.get(nei).contra).next = nextNei;\r\n            this.halfBondSetAngle(nextNei, nei);\r\n        });\r\n    }\r\n    sortNeighbors(list) {\r\n        if (!list) {\r\n            this.atoms.forEach((_atom, aid) => {\r\n                this.atomSortNeighbors(aid);\r\n            });\r\n        }\r\n        else {\r\n            list.forEach((aid) => {\r\n                this.atomSortNeighbors(aid);\r\n            });\r\n        }\r\n    }\r\n    atomUpdateHalfBonds(atomId) {\r\n        this.atoms.get(atomId).neighbors.forEach((hbid) => {\r\n            this.halfBondUpdate(hbid);\r\n            this.halfBondUpdate(this.halfBonds.get(hbid).contra);\r\n        });\r\n    }\r\n    updateHalfBonds(list) {\r\n        if (!list) {\r\n            this.atoms.forEach((_atom, atomId) => {\r\n                this.atomUpdateHalfBonds(atomId);\r\n            });\r\n        }\r\n        else {\r\n            list.forEach((atomId) => {\r\n                this.atomUpdateHalfBonds(atomId);\r\n            });\r\n        }\r\n    }\r\n    sGroupsRecalcCrossBonds() {\r\n        this.sgroups.forEach((sg) => {\r\n            sg.xBonds = [];\r\n            sg.neiAtoms = [];\r\n        });\r\n        this.bonds.forEach((bond, bid) => {\r\n            const a1 = this.atoms.get(bond.begin);\r\n            const a2 = this.atoms.get(bond.end);\r\n            a1.sgs.forEach((sgid) => {\r\n                if (!a2.sgs.has(sgid)) {\r\n                    const sg = this.sgroups.get(sgid);\r\n                    sg.xBonds.push(bid);\r\n                    arrayAddIfMissing(sg.neiAtoms, bond.end);\r\n                }\r\n            });\r\n            a2.sgs.forEach((sgid) => {\r\n                if (!a1.sgs.has(sgid)) {\r\n                    const sg = this.sgroups.get(sgid);\r\n                    sg.xBonds.push(bid);\r\n                    arrayAddIfMissing(sg.neiAtoms, bond.begin);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    sGroupDelete(sgid) {\r\n        this.sgroups.get(sgid).atoms.forEach((atom) => {\r\n            this.atoms.get(atom).sgs.delete(sgid);\r\n        });\r\n        this.sGroupForest.remove(sgid);\r\n        this.sgroups.delete(sgid);\r\n    }\r\n    atomSetPos(id, pp) {\r\n        const item = this.atoms.get(id);\r\n        item.pp = pp;\r\n    }\r\n    rxnPlusSetPos(id, pp) {\r\n        const item = this.rxnPluses.get(id);\r\n        item.pp = pp;\r\n    }\r\n    rxnArrowSetPos(id, pos) {\r\n        const item = this.rxnArrows.get(id);\r\n        if (item) {\r\n            item.pos = pos;\r\n        }\r\n    }\r\n    simpleObjectSetPos(id, pos) {\r\n        const item = this.simpleObjects.get(id);\r\n        item.pos = pos;\r\n    }\r\n    textSetPosition(id, position) {\r\n        const item = this.texts.get(id);\r\n        if (item) {\r\n            item.position = position;\r\n        }\r\n    }\r\n    getCoordBoundingBox(atomSet) {\r\n        let bb = null;\r\n        function extend(pp) {\r\n            if (!bb) {\r\n                bb = {\r\n                    min: pp,\r\n                    max: pp\r\n                };\r\n            }\r\n            else {\r\n                if (pp instanceof Array) {\r\n                    pp.forEach((vec) => {\r\n                        bb.min = Vec2.min(bb.min, vec);\r\n                        bb.max = Vec2.max(bb.max, vec);\r\n                    });\r\n                }\r\n                else {\r\n                    bb.min = Vec2.min(bb.min, pp);\r\n                    bb.max = Vec2.max(bb.max, pp);\r\n                }\r\n            }\r\n        }\r\n        const global = !atomSet || atomSet.size === 0;\r\n        this.atoms.forEach((atom, aid) => {\r\n            if (global || atomSet.has(aid))\r\n                extend(atom.pp);\r\n        });\r\n        if (global) {\r\n            this.rxnPluses.forEach((item) => {\r\n                extend(item.pp);\r\n            });\r\n            this.rxnArrows.forEach((item) => {\r\n                extend(item.pos);\r\n            });\r\n            this.simpleObjects.forEach((item) => {\r\n                extend(item.pos);\r\n            });\r\n            this.texts.forEach((item) => {\r\n                extend(item.position);\r\n            });\r\n        }\r\n        if (!bb && global) {\r\n            bb = {\r\n                min: new Vec2(0, 0),\r\n                max: new Vec2(1, 1)\r\n            };\r\n        }\r\n        return bb;\r\n    }\r\n    getCoordBoundingBoxObj() {\r\n        let bb = null;\r\n        function extend(pp) {\r\n            if (!bb) {\r\n                bb = {\r\n                    min: new Vec2(pp),\r\n                    max: new Vec2(pp)\r\n                };\r\n            }\r\n            else {\r\n                bb.min = Vec2.min(bb.min, pp);\r\n                bb.max = Vec2.max(bb.max, pp);\r\n            }\r\n        }\r\n        this.atoms.forEach((atom) => {\r\n            extend(atom.pp);\r\n        });\r\n        return bb;\r\n    }\r\n    getBondLengthData() {\r\n        let totalLength = 0;\r\n        let cnt = 0;\r\n        this.bonds.forEach((bond) => {\r\n            totalLength += Vec2.dist(this.atoms.get(bond.begin).pp, this.atoms.get(bond.end).pp);\r\n            cnt++;\r\n        });\r\n        return { cnt, totalLength };\r\n    }\r\n    getAvgBondLength() {\r\n        const bld = this.getBondLengthData();\r\n        return bld.cnt > 0 ? bld.totalLength / bld.cnt : -1;\r\n    }\r\n    getAvgClosestAtomDistance() {\r\n        let totalDist = 0;\r\n        let minDist;\r\n        let dist = 0;\r\n        const keys = Array.from(this.atoms.keys());\r\n        let k;\r\n        let j;\r\n        for (k = 0; k < keys.length; ++k) {\r\n            minDist = -1;\r\n            for (j = 0; j < keys.length; ++j) {\r\n                if (j === k)\r\n                    continue; // eslint-disable-line no-continue\r\n                dist = Vec2.dist(this.atoms.get(keys[j]).pp, this.atoms.get(keys[k]).pp);\r\n                if (minDist < 0 || minDist > dist)\r\n                    minDist = dist;\r\n            }\r\n            totalDist += minDist;\r\n        }\r\n        return keys.length > 0 ? totalDist / keys.length : -1;\r\n    }\r\n    checkBondExists(begin, end) {\r\n        const key = this.bonds.find((_bid, bond) => (bond.begin === begin && bond.end === end) ||\r\n            (bond.end === begin && bond.begin === end));\r\n        return key !== undefined;\r\n    }\r\n    findConnectedComponent(firstaid) {\r\n        const list = [firstaid];\r\n        const ids = new Pile();\r\n        while (list.length > 0) {\r\n            const aid = list.pop();\r\n            ids.add(aid);\r\n            const atom = this.atoms.get(aid);\r\n            atom.neighbors.forEach((nei) => {\r\n                const neiId = this.halfBonds.get(nei).end;\r\n                if (!ids.has(neiId))\r\n                    list.push(neiId);\r\n            });\r\n        }\r\n        return ids;\r\n    }\r\n    findConnectedComponents(discardExistingFragments) {\r\n        // NB: this is a hack\r\n        // TODO: need to maintain half-bond and neighbor structure permanently\r\n        if (!this.halfBonds.size) {\r\n            this.initHalfBonds();\r\n            this.initNeighbors();\r\n            this.updateHalfBonds(Array.from(this.atoms.keys()));\r\n            this.sortNeighbors(Array.from(this.atoms.keys()));\r\n        }\r\n        let addedAtoms = new Pile();\r\n        const components = [];\r\n        this.atoms.forEach((atom, aid) => {\r\n            if ((discardExistingFragments || atom.fragment < 0) &&\r\n                !addedAtoms.has(aid)) {\r\n                const component = this.findConnectedComponent(aid);\r\n                components.push(component);\r\n                addedAtoms = addedAtoms.union(component);\r\n            }\r\n        });\r\n        return components;\r\n    }\r\n    markFragment(idSet) {\r\n        const frag = new Fragment();\r\n        const fid = this.frags.add(frag);\r\n        idSet.forEach((aid) => {\r\n            const atom = this.atoms.get(aid);\r\n            if (atom.stereoLabel)\r\n                frag.updateStereoAtom(this, aid, fid, true);\r\n            atom.fragment = fid;\r\n        });\r\n    }\r\n    markFragments() {\r\n        const components = this.findConnectedComponents();\r\n        components.forEach((comp) => {\r\n            this.markFragment(comp);\r\n        });\r\n    }\r\n    scale(scale) {\r\n        if (scale === 1)\r\n            return;\r\n        this.atoms.forEach((atom) => {\r\n            atom.pp = atom.pp.scaled(scale);\r\n        });\r\n        this.rxnPluses.forEach((item) => {\r\n            item.pp = item.pp.scaled(scale);\r\n        });\r\n        this.rxnArrows.forEach((item) => {\r\n            item.pos = item.pos.map((p) => p.scaled(scale));\r\n        });\r\n        this.sgroups.forEach((item) => {\r\n            item.pp = item.pp ? item.pp.scaled(scale) : null;\r\n        });\r\n        this.texts.forEach((item) => {\r\n            // Scale text only for reactions - i.e file contains reaction arrows\r\n            const isReactionStruct = this.rxnArrows.size;\r\n            if (isReactionStruct) {\r\n                item.pos = item.pos.map((p) => p.scaled(scale));\r\n                item.position = item.position.scaled(scale);\r\n            }\r\n        });\r\n    }\r\n    rescale() {\r\n        let avg = this.getAvgBondLength();\r\n        if (avg < 0 && !this.isReaction) {\r\n            // TODO [MK] this doesn't work well for reactions as the distances between\r\n            // the atoms in different components are generally larger than those between atoms of a single component\r\n            // (KETCHER-341)\r\n            avg = this.getAvgClosestAtomDistance();\r\n        }\r\n        if (avg < 1e-3)\r\n            avg = 1;\r\n        const scale = 1 / avg;\r\n        this.scale(scale);\r\n    }\r\n    loopHasSelfIntersections(hbs) {\r\n        for (let i = 0; i < hbs.length; ++i) {\r\n            const hbi = this.halfBonds.get(hbs[i]);\r\n            const ai = this.atoms.get(hbi.begin).pp;\r\n            const bi = this.atoms.get(hbi.end).pp;\r\n            const set = new Pile([hbi.begin, hbi.end]);\r\n            for (let j = i + 2; j < hbs.length; ++j) {\r\n                const hbj = this.halfBonds.get(hbs[j]);\r\n                if (set.has(hbj.begin) || set.has(hbj.end))\r\n                    continue; // skip edges sharing an atom\r\n                const aj = this.atoms.get(hbj.begin).pp;\r\n                const bj = this.atoms.get(hbj.end).pp;\r\n                if (Box2Abs.segmentIntersection(ai, bi, aj, bj))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // partition a cycle into simple cycles\r\n    // TODO: [MK] rewrite the detection algorithm to only find simple ones right away?\r\n    partitionLoop(loop) {\r\n        // eslint-disable-line max-statements\r\n        const subloops = [];\r\n        let continueFlag = true;\r\n        while (continueFlag) {\r\n            const atomToHalfBond = {}; // map from every atom in the loop to the index of the first half-bond starting from that atom in the uniqHb array\r\n            continueFlag = false;\r\n            for (let l = 0; l < loop.length; ++l) {\r\n                const hbid = loop[l];\r\n                const aid1 = this.halfBonds.get(hbid).begin;\r\n                const aid2 = this.halfBonds.get(hbid).end;\r\n                if (aid2 in atomToHalfBond) {\r\n                    // subloop found\r\n                    const s = atomToHalfBond[aid2]; // where the subloop begins\r\n                    const subloop = loop.slice(s, l + 1);\r\n                    subloops.push(subloop);\r\n                    if (l < loop.length) {\r\n                        // remove half-bonds corresponding to the subloop\r\n                        loop.splice(s, l - s + 1);\r\n                    }\r\n                    continueFlag = true;\r\n                    break;\r\n                }\r\n                atomToHalfBond[aid1] = l;\r\n            }\r\n            if (!continueFlag)\r\n                subloops.push(loop); // we're done, no more subloops found\r\n        }\r\n        return subloops;\r\n    }\r\n    halfBondAngle(hbid1, hbid2) {\r\n        const hba = this.halfBonds.get(hbid1);\r\n        const hbb = this.halfBonds.get(hbid2);\r\n        return Math.atan2(Vec2.cross(hba.dir, hbb.dir), Vec2.dot(hba.dir, hbb.dir));\r\n    }\r\n    loopIsConvex(loop) {\r\n        return loop.every((item, k, loopArr) => {\r\n            const angle = this.halfBondAngle(item, loopArr[(k + 1) % loopArr.length]);\r\n            return angle <= 0;\r\n        });\r\n    }\r\n    // check whether a loop is on the inner or outer side of the polygon\r\n    //  by measuring the total angle between bonds\r\n    loopIsInner(loop) {\r\n        let totalAngle = 2 * Math.PI;\r\n        loop.forEach((hbida, k, loopArr) => {\r\n            const hbidb = loopArr[(k + 1) % loopArr.length];\r\n            const hbb = this.halfBonds.get(hbidb);\r\n            const angle = this.halfBondAngle(hbida, hbidb);\r\n            totalAngle += hbb.contra === hbida ? Math.PI : angle; // back and forth along the same edge\r\n        });\r\n        return Math.abs(totalAngle) < Math.PI;\r\n    }\r\n    findLoops() {\r\n        const newLoops = [];\r\n        const bondsToMark = new Pile();\r\n        /*\r\n          Starting from each half-bond not known to be in a loop yet,\r\n          follow the 'next' links until the initial half-bond is reached or\r\n          the length of the sequence exceeds the number of half-bonds available.\r\n          In a planar graph, as long as every bond is a part of some \"loop\" -\r\n          either an outer or an inner one - every iteration either yields a loop\r\n          or doesn't start at all. Thus this has linear complexity in the number\r\n          of bonds for planar graphs.\r\n       */\r\n        let hbIdNext, c, loop;\r\n        this.halfBonds.forEach((hb, hbId) => {\r\n            if (hb.loop !== -1)\r\n                return;\r\n            for (hbIdNext = hbId, c = 0, loop = []; c <= this.halfBonds.size; hbIdNext = this.halfBonds.get(hbIdNext).next, ++c) {\r\n                if (!(c > 0 && hbIdNext === hbId)) {\r\n                    loop.push(hbIdNext);\r\n                    continue; // eslint-disable-line no-continue\r\n                }\r\n                // loop found\r\n                const subloops = this.partitionLoop(loop);\r\n                subloops.forEach((loop) => {\r\n                    let loopId;\r\n                    if (this.loopIsInner(loop) && !this.loopHasSelfIntersections(loop)) {\r\n                        /*\r\n                                    loop is internal\r\n                                    use lowest half-bond id in the loop as the loop id\r\n                                    this ensures that the loop gets the same id if it is discarded and then recreated,\r\n                                    which in turn is required to enable redrawing while dragging, as actions store item id's\r\n                                 */\r\n                        loopId = Math.min(...loop);\r\n                        this.loops.set(loopId, new Loop(loop, this, this.loopIsConvex(loop)));\r\n                    }\r\n                    else {\r\n                        loopId = -2;\r\n                    }\r\n                    loop.forEach((hbid) => {\r\n                        this.halfBonds.get(hbid).loop = loopId;\r\n                        bondsToMark.add(this.halfBonds.get(hbid).bid);\r\n                    });\r\n                    if (loopId >= 0)\r\n                        newLoops.push(loopId);\r\n                });\r\n                break;\r\n            }\r\n        });\r\n        return {\r\n            newLoops,\r\n            bondsToMark: Array.from(bondsToMark)\r\n        };\r\n    }\r\n    calcImplicitHydrogen(aid) {\r\n        const atom = this.atoms.get(aid);\r\n        const [conn, isAromatic] = this.calcConn(atom);\r\n        let correctConn = conn;\r\n        atom.badConn = false;\r\n        if (isAromatic) {\r\n            if (atom.label === 'C' && atom.charge === 0) {\r\n                if (conn === 3) {\r\n                    atom.implicitH = -radicalElectrons(atom.radical);\r\n                    return;\r\n                }\r\n                if (conn === 2) {\r\n                    atom.implicitH = 1 - radicalElectrons(atom.radical);\r\n                    return;\r\n                }\r\n            }\r\n            else if ((atom.label === 'O' && atom.charge === 0) ||\r\n                (atom.label === 'N' && atom.charge === 0 && conn === 3) ||\r\n                (atom.label === 'N' && atom.charge === 1 && conn === 3) ||\r\n                (atom.label === 'S' && atom.charge === 0 && conn === 3)) {\r\n                atom.implicitH = 0;\r\n                return;\r\n            }\r\n            else if (!atom.hasImplicitH) {\r\n                correctConn++;\r\n            }\r\n        }\r\n        if (correctConn < 0 || atom.isQuery()) {\r\n            atom.implicitH = 0;\r\n            return;\r\n        }\r\n        if (atom.explicitValence >= 0) {\r\n            const elem = Elements.get(atom.label);\r\n            atom.implicitH = elem\r\n                ? atom.explicitValence - atom.calcValenceMinusHyd(correctConn)\r\n                : 0;\r\n            if (atom.implicitH < 0) {\r\n                atom.implicitH = 0;\r\n                atom.badConn = true;\r\n            }\r\n        }\r\n        else {\r\n            atom.calcValence(correctConn);\r\n        }\r\n    }\r\n    setImplicitHydrogen(list) {\r\n        this.sgroups.forEach((item) => {\r\n            if (item.data.fieldName === 'MRV_IMPLICIT_H') {\r\n                this.atoms.get(item.atoms[0]).hasImplicitH = true;\r\n            }\r\n        });\r\n        if (!list) {\r\n            this.atoms.forEach((_atom, aid) => {\r\n                this.calcImplicitHydrogen(aid);\r\n            });\r\n        }\r\n        else {\r\n            list.forEach((aid) => {\r\n                if (this.atoms.get(aid)) {\r\n                    this.calcImplicitHydrogen(aid);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    atomGetNeighbors(aid) {\r\n        return this.atoms.get(aid)?.neighbors.map((nei) => {\r\n            const hb = this.halfBonds.get(nei);\r\n            return {\r\n                aid: hb.end,\r\n                bid: hb.bid\r\n            };\r\n        });\r\n    }\r\n    getComponents() {\r\n        // eslint-disable-line max-statements\r\n        /* saver */\r\n        const connectedComponents = this.findConnectedComponents(true);\r\n        const barriers = [];\r\n        let arrowPos = null;\r\n        this.rxnArrows.forEach((item) => {\r\n            // there's just one arrow\r\n            arrowPos = item.center().x;\r\n        });\r\n        this.rxnPluses.forEach((item) => {\r\n            barriers.push(item.pp.x);\r\n        });\r\n        if (arrowPos !== null)\r\n            barriers.push(arrowPos);\r\n        barriers.sort((a, b) => a - b);\r\n        const components = [];\r\n        connectedComponents.forEach((component) => {\r\n            const bb = this.getCoordBoundingBox(component);\r\n            const c = Vec2.lc2(bb.min, 0.5, bb.max, 0.5);\r\n            let j = 0;\r\n            while (c.x > barriers[j])\r\n                ++j;\r\n            components[j] = components[j] || new Pile();\r\n            components[j] = components[j].union(component);\r\n        });\r\n        const submolTexts = [];\r\n        const reactants = [];\r\n        const products = [];\r\n        components.forEach((component) => {\r\n            if (!component) {\r\n                submolTexts.push('');\r\n                return;\r\n            }\r\n            const rxnFragmentType = this.defineRxnFragmentTypeForAtomset(component, arrowPos || 0);\r\n            if (rxnFragmentType === 1)\r\n                reactants.push(component);\r\n            else\r\n                products.push(component);\r\n        });\r\n        return {\r\n            reactants,\r\n            products\r\n        };\r\n    }\r\n    defineRxnFragmentTypeForAtomset(atomset, arrowpos) {\r\n        const bb = this.getCoordBoundingBox(atomset);\r\n        const c = Vec2.lc2(bb.min, 0.5, bb.max, 0.5);\r\n        return c.x < arrowpos ? 1 : 2;\r\n    }\r\n    getBondFragment(bid) {\r\n        const aid = this.bonds.get(bid)?.begin;\r\n        return aid && this.atoms.get(aid)?.fragment;\r\n    }\r\n    bindSGroupsToFunctionalGroups() {\r\n        this.sgroups.forEach((sgroup) => {\r\n            if (FunctionalGroup.isFunctionalGroup(sgroup)) {\r\n                this.functionalGroups.add(new FunctionalGroup(sgroup));\r\n            }\r\n        });\r\n    }\r\n    getGroupIdFromAtomId(atomId) {\r\n        for (const [groupId, sgroup] of Array.from(this.sgroups)) {\r\n            if (sgroup.atoms.includes(atomId))\r\n                return groupId;\r\n        }\r\n        return null;\r\n    }\r\n    // TODO: simplify if bonds ids ever appear in sgroup\r\n    // ! deprecate\r\n    getGroupIdFromBondId(bondId) {\r\n        const bond = this.bonds.get(bondId);\r\n        if (!bond)\r\n            return null;\r\n        for (const [groupId, sgroup] of Array.from(this.sgroups)) {\r\n            if (sgroup.atoms.includes(bond.begin) ||\r\n                sgroup.atoms.includes(bond.end)) {\r\n                return groupId;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    getGroupsIdsFromBondId(bondId) {\r\n        const bond = this.bonds.get(bondId);\r\n        if (!bond)\r\n            return [];\r\n        const groupsIds = [];\r\n        for (const [groupId, sgroup] of Array.from(this.sgroups)) {\r\n            if (sgroup.atoms.includes(bond.begin) ||\r\n                sgroup.atoms.includes(bond.end)) {\r\n                groupsIds.push(groupId);\r\n            }\r\n        }\r\n        return groupsIds;\r\n    }\r\n}\r\n//# sourceMappingURL=struct.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/atom.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/bond.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/box2Abs.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/constants/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/fragment.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/functionalGroup.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/halfBond.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/loop.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/pile.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/pool.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/rgroup.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/rxnArrow.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/rxnPlus.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/sgroup.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/sgroupForest.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/simpleObject.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/text.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/vec2.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/highlight.ts"],"map":"{\"version\":3,\"file\":\"struct.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/domain/entities/struct.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/entities/struct.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Atom } from './atom';\r\nimport { Bond } from './bond';\r\nimport { Fragment } from './fragment';\r\nimport { FunctionalGroup } from './functionalGroup';\r\nimport { HalfBond } from './halfBond';\r\nimport { Loop } from './loop';\r\nimport { Pile } from './pile';\r\nimport { Pool } from './pool';\r\nimport { RGroup } from './rgroup';\r\nimport { RxnArrow } from './rxnArrow';\r\nimport { RxnPlus } from './rxnPlus';\r\nimport { SGroup } from './sgroup';\r\nimport { SGroupForest } from './sgroupForest';\r\nimport { SimpleObject } from './simpleObject';\r\nimport { Text } from './text';\r\nimport { Vec2 } from './vec2';\r\nimport { Highlight } from './highlight';\r\nexport declare type Neighbor = {\r\n    aid: number;\r\n    bid: number;\r\n};\r\nexport declare class Struct {\r\n    atoms: Pool<Atom>;\r\n    bonds: Pool<Bond>;\r\n    sgroups: Pool<SGroup>;\r\n    halfBonds: Pool<HalfBond>;\r\n    loops: Pool<Loop>;\r\n    isReaction: boolean;\r\n    rxnArrows: Pool<RxnArrow>;\r\n    rxnPluses: Pool<RxnPlus>;\r\n    frags: Pool<Fragment | null>;\r\n    rgroups: Pool<RGroup>;\r\n    name: string;\r\n    abbreviation?: string;\r\n    sGroupForest: SGroupForest;\r\n    simpleObjects: Pool<SimpleObject>;\r\n    texts: Pool<Text>;\r\n    functionalGroups: Pool<FunctionalGroup>;\r\n    highlights: Pool<Highlight>;\r\n    constructor();\r\n    hasRxnProps(): boolean;\r\n    hasRxnArrow(): boolean;\r\n    hasRxnPluses(): boolean;\r\n    isRxn(): boolean;\r\n    isBlank(): boolean;\r\n    isSingleGroup(): boolean;\r\n    clone(atomSet?: Pile<number> | null, bondSet?: Pile<number> | null, dropRxnSymbols?: boolean, aidMap?: Map<number, number> | null, simpleObjectsSet?: Pile<number> | null, textsSet?: Pile<number> | null): Struct;\r\n    getScaffold(): Struct;\r\n    getFragmentIds(fid: number): Pile<number>;\r\n    getFragment(fid: number): Struct;\r\n    mergeInto(cp: Struct, atomSet?: Pile<number> | null, bondSet?: Pile<number> | null, dropRxnSymbols?: boolean, keepAllRGroups?: boolean, aidMap?: Map<number, number> | null, simpleObjectsSet?: Pile<number> | null, textsSet?: Pile<number> | null): Struct;\r\n    prepareLoopStructure(): void;\r\n    atomAddToSGroup(sgid: any, aid: any): void;\r\n    calcConn(atom: any): any[];\r\n    findBondId(begin: any, end: any): number | null;\r\n    initNeighbors(): void;\r\n    bondInitHalfBonds(bid: any, bond?: Bond): void;\r\n    halfBondUpdate(halfBondId: number): void;\r\n    initHalfBonds(): void;\r\n    setHbNext(hbid: any, next: any): void;\r\n    halfBondSetAngle(hbid: any, left: any): void;\r\n    atomAddNeighbor(hbid: any): void;\r\n    atomSortNeighbors(aid: any): void;\r\n    sortNeighbors(list: any): void;\r\n    atomUpdateHalfBonds(atomId: number): void;\r\n    updateHalfBonds(list: any): void;\r\n    sGroupsRecalcCrossBonds(): void;\r\n    sGroupDelete(sgid: number): void;\r\n    atomSetPos(id: number, pp: Vec2): void;\r\n    rxnPlusSetPos(id: number, pp: Vec2): void;\r\n    rxnArrowSetPos(id: number, pos: Array<Vec2>): void;\r\n    simpleObjectSetPos(id: number, pos: Array<Vec2>): void;\r\n    textSetPosition(id: number, position: Vec2): void;\r\n    getCoordBoundingBox(atomSet?: Pile<number>): any;\r\n    getCoordBoundingBoxObj(): any;\r\n    getBondLengthData(): {\r\n        cnt: number;\r\n        totalLength: number;\r\n    };\r\n    getAvgBondLength(): number;\r\n    getAvgClosestAtomDistance(): number;\r\n    checkBondExists(begin: number, end: number): boolean;\r\n    findConnectedComponent(firstaid: number): Pile<number>;\r\n    findConnectedComponents(discardExistingFragments?: boolean): any[];\r\n    markFragment(idSet: Pile<number>): void;\r\n    markFragments(): void;\r\n    scale(scale: number): void;\r\n    rescale(): void;\r\n    loopHasSelfIntersections(hbs: Array<number>): boolean;\r\n    partitionLoop(loop: any): any[];\r\n    halfBondAngle(hbid1: number, hbid2: number): number;\r\n    loopIsConvex(loop: Array<any>): boolean;\r\n    loopIsInner(loop: Array<any>): boolean;\r\n    findLoops(): {\r\n        newLoops: any[];\r\n        bondsToMark: number[];\r\n    };\r\n    calcImplicitHydrogen(aid: number): void;\r\n    setImplicitHydrogen(list?: Array<number>): void;\r\n    atomGetNeighbors(aid: number): Array<Neighbor> | undefined;\r\n    getComponents(): {\r\n        reactants: any[];\r\n        products: any[];\r\n    };\r\n    defineRxnFragmentTypeForAtomset(atomset: Pile<number>, arrowpos: number): 1 | 2;\r\n    getBondFragment(bid: number): number | undefined;\r\n    bindSGroupsToFunctionalGroups(): void;\r\n    getGroupIdFromAtomId(atomId: number): number | null;\r\n    getGroupIdFromBondId(bondId: number): number | null;\r\n    getGroupsIdsFromBondId(bondId: number): number[];\r\n}\r\n"}}
