{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Action } from './action';\r\nimport { Bond } from \"../../../domain/entities\";\r\nimport { BondAttr } from '../operations';\r\nimport { MolSerializer } from \"../../../domain/serializers\";\r\n/**\r\n * @param restruct { ReStruct }\r\n * @param events { Array<PipelineSubscription> }\r\n * @param bid { number }\r\n * @param template {{\r\n * \t\tmolecule: Struct,\r\n * \t\tbid: number\r\n *  }}\r\n * @param simpleFusing { Function }\r\n * @returns { Promise }\r\n */\r\nexport function fromAromaticTemplateOnBond(restruct, template, bid, events, simpleFusing) {\r\n    const tmpl = template.molecule;\r\n    const struct = restruct.molecule;\r\n    const frid = struct.getBondFragment(bid);\r\n    const beforeMerge = getFragmentWithBondMap(struct, frid);\r\n    let afterMerge = null;\r\n    let pasteItems = null;\r\n    let action = new Action();\r\n    if (true) {\r\n        action = simpleFusing(restruct, template, bid);\r\n        return Promise.resolve(action);\r\n    }\r\n    const molSerialzer = new MolSerializer();\r\n    return Promise.all([\r\n        events.aromatizeStruct\r\n            .dispatch(beforeMerge.frag)\r\n            .then((res) => molSerialzer.deserialize(res.struct)),\r\n        events.aromatizeStruct\r\n            .dispatch(tmpl)\r\n            .then((res) => molSerialzer.deserialize(res.struct))\r\n    ])\r\n        .then(([astruct, atmpl]) => {\r\n        // aromatize restruct fragment\r\n        const aromatizeAction = fromAromatize(restruct, astruct, beforeMerge.bondMap);\r\n        // merge template with fragment\r\n        const aromTemplate = { bid: template.bid, molecule: atmpl };\r\n        const templateFusingAction = simpleFusing(restruct, aromTemplate, bid);\r\n        pasteItems = templateFusingAction[1];\r\n        action = templateFusingAction[0].mergeWith(aromatizeAction);\r\n        afterMerge = getFragmentWithBondMap(restruct.molecule, frid);\r\n        return events.dearomatizeStruct\r\n            .dispatch(afterMerge.frag)\r\n            .then((res) => molSerialzer.deserialize(res.struct));\r\n    })\r\n        .then((destruct) => {\r\n        destruct.bonds.forEach((bond) => {\r\n            if (bond.type === Bond.PATTERN.TYPE.AROMATIC) {\r\n                throw Error('Bad dearomatize');\r\n            }\r\n        });\r\n        // dearomatize restruct fragment\r\n        const dearomatizeAction = fromDearomatize(restruct, destruct, afterMerge.bondMap);\r\n        action = dearomatizeAction.mergeWith(action);\r\n        return [action, pasteItems];\r\n    })\r\n        .catch((err) => {\r\n        console.info(err.message);\r\n        action.perform(restruct); // revert actions if error\r\n        return simpleFusing(restruct, template, bid);\r\n    });\r\n}\r\nfunction fromAromatize(restruct, astruct, bondMap) {\r\n    const action = new Action();\r\n    astruct.bonds.forEach((bond, bid) => {\r\n        if (bond.type !== Bond.PATTERN.TYPE.AROMATIC)\r\n            return;\r\n        action.addOp(new BondAttr(bondMap.get(bid), 'type', Bond.PATTERN.TYPE.AROMATIC).perform(restruct));\r\n    });\r\n    return action;\r\n}\r\n/**\r\n * @param restruct { ReStruct }\r\n * @param dastruct { ReStruct }\r\n * @param bondMap { Map<number, number> }\r\n * @returns { Action }\r\n */\r\nfunction fromDearomatize(restruct, dastruct, bondMap) {\r\n    const action = new Action();\r\n    dastruct.bonds.forEach((bond, bid) => {\r\n        action.addOp(new BondAttr(bondMap.get(bid), 'type', bond.type).perform(restruct));\r\n    });\r\n    return action;\r\n}\r\n/* UTILS */\r\n// function canBeAromatized(struct) {\r\n//   // TODO correct this checking && move to chem.Struct ??\r\n//   if (struct.loops.size === 0) struct.prepareLoopStructure()\r\n//\r\n//   const hasAromLoop = struct.loops.find((_id, loop) => loop.aromatic)\r\n//   if (struct.loops.size === 0 || hasAromLoop) return false\r\n//\r\n//   const correctDblBonds = struct.loops.find(\r\n//     (_id, loop) => loop.dblBonds === loop.hbs.length / 2\r\n//   )\r\n//\r\n//   return correctDblBonds !== undefined\r\n// }\r\n/**\r\n * @param struct { Struct }\r\n * @param frid { number }\r\n * @returns {{\r\n * \t\tfrag: Struct,\r\n * \t\tbondMap: Map<number, number>\r\n *  }}\r\n */\r\nfunction getFragmentWithBondMap(struct, frid) {\r\n    const atomSet = struct.getFragmentIds(frid);\r\n    const atomsInStruct = Array.from(atomSet);\r\n    const frag = struct.clone(atomSet);\r\n    const bondMap = new Map();\r\n    frag.bonds.forEach((bond, bid) => {\r\n        bondMap.set(bid, struct.findBondId(atomsInStruct[bond.begin], atomsInStruct[bond.end]));\r\n    });\r\n    return { frag, bondMap };\r\n}\r\n//# sourceMappingURL=aromaticFusing.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/action.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/index.ts"],"map":"{\"version\":3,\"file\":\"aromaticFusing.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/application/editor/actions/aromaticFusing.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/actions/aromaticFusing.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\n/**\r\n * @param restruct { ReStruct }\r\n * @param events { Array<PipelineSubscription> }\r\n * @param bid { number }\r\n * @param template {{\r\n * \t\tmolecule: Struct,\r\n * \t\tbid: number\r\n *  }}\r\n * @param simpleFusing { Function }\r\n * @returns { Promise }\r\n */\r\nexport declare function fromAromaticTemplateOnBond(restruct: any, template: any, bid: any, events: any, simpleFusing: any): Promise<any>;\r\n"}}
