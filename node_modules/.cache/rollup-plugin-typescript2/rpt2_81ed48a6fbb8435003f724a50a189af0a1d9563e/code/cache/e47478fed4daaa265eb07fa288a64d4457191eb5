{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { MolSerializer } from '../mol/molSerializer';\r\nconst DelimeterRegex = /^[^]+?\\$\\$\\$\\$$/gm;\r\nexport class SdfSerializer {\r\n    deserialize(content) {\r\n        let m;\r\n        const result = [];\r\n        const molSerializer = new MolSerializer();\r\n        while ((m = DelimeterRegex.exec(content)) !== null) {\r\n            const chunk = m[0].replace(/\\r/g, '').trim(); // TODO: normalize newline?\r\n            const end = chunk.indexOf('M  END');\r\n            if (end !== -1) {\r\n                const propChunks = chunk\r\n                    .substr(end + 7)\r\n                    .trim()\r\n                    .split(/^$\\n?/m);\r\n                const struct = molSerializer.deserialize(chunk.substring(0, end + 6));\r\n                const props = propChunks.reduce((acc, pc) => {\r\n                    const m = pc.match(/^> [ \\d]*<(\\S+)>/);\r\n                    if (m) {\r\n                        const field = m[1];\r\n                        const value = pc.split('\\n')[1].trim();\r\n                        acc[field] = Number.isFinite(value) ? +value : value.toString(); // eslint-disable-line\r\n                    }\r\n                    return acc;\r\n                }, {});\r\n                result.push({ struct, props });\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    serialize(sdfItems) {\r\n        const molSerializer = new MolSerializer();\r\n        return sdfItems.reduce((res, item) => {\r\n            res += molSerializer.serialize(item.struct);\r\n            Object.keys(item.props).forEach((prop) => {\r\n                res += `> <${prop}>\\n`;\r\n                res += `${item.props[prop]}\\n\\n`;\r\n            });\r\n            return `${res}$$$$\\n`;\r\n        }, '');\r\n    }\r\n}\r\n//# sourceMappingURL=sdfSerializer.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/sdf/sdf.types.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/mol/molSerializer.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/serializers.types.ts"],"map":"{\"version\":3,\"file\":\"sdfSerializer.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/domain/serializers/sdf/sdfSerializer.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAI7E,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AAGpD,MAAM,cAAc,GAAG,mBAAmB,CAAA;AAC1C,MAAM,OAAO,aAAa;IACxB,WAAW,CAAC,OAAe;QACzB,IAAI,CAAM,CAAA;QACV,MAAM,MAAM,GAAmB,EAAE,CAAA;QACjC,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAA;QACzC,OAAO,CAAC,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,IAAI,EAAE;YAClD,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAA,CAAC,2BAA2B;YACxE,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;YACnC,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;gBACd,MAAM,UAAU,GAAQ,KAAK;qBAC1B,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;qBACf,IAAI,EAAE;qBACN,KAAK,CAAC,QAAQ,CAAC,CAAA;gBAElB,MAAM,MAAM,GAAG,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA;gBACrE,MAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAC7B,CAAC,GAAyB,EAAE,EAAU,EAAE,EAAE;oBACxC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAA;oBACtC,IAAI,CAAC,EAAE;wBACL,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;wBAClB,MAAM,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;wBACtC,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAA,CAAC,sBAAsB;qBACvF;oBACD,OAAO,GAAG,CAAA;gBACZ,CAAC,EACD,EAA0B,CAC3B,CAAA;gBAED,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAA;aAC/B;SACF;QACD,OAAO,MAAM,CAAA;IACf,CAAC;IAED,SAAS,CAAC,QAAwB;QAChC,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAA;QACzC,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YACnC,GAAG,IAAI,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAE3C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACvC,GAAG,IAAI,MAAM,IAAI,KAAK,CAAA;gBACtB,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAA;YAClC,CAAC,CAAC,CAAA;YAEF,OAAO,GAAG,GAAG,QAAQ,CAAA;QACvB,CAAC,EAAE,EAAE,CAAC,CAAA;IACR,CAAC;CACF\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/serializers/sdf/sdfSerializer.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { SdfItem } from './sdf.types';\r\nimport { Serializer } from '../serializers.types';\r\nexport declare class SdfSerializer implements Serializer<Array<SdfItem>> {\r\n    deserialize(content: string): Array<SdfItem>;\r\n    serialize(sdfItems: Array<SdfItem>): string;\r\n}\r\n"}}
