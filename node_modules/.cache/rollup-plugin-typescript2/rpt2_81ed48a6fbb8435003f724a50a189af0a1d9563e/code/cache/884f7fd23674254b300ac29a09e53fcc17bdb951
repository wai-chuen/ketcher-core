{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { FunctionalGroup, SGroup, Vec2 } from \"../../../../domain/entities\";\r\nimport { ReSGroup } from '../../../render';\r\nimport { BaseOperation } from '../base';\r\nimport { OperationType } from '../OperationType';\r\nclass SGroupCreate extends BaseOperation {\r\n    data;\r\n    constructor(sgroupId, type, pp, expanded, name) {\r\n        super(OperationType.S_GROUP_CREATE);\r\n        this.data = {\r\n            sgid: sgroupId,\r\n            type,\r\n            pp,\r\n            expanded,\r\n            name\r\n        };\r\n    }\r\n    execute(restruct) {\r\n        const struct = restruct.molecule;\r\n        const sgroup = new SGroup(this.data.type);\r\n        const { sgid, pp, expanded, name } = this.data;\r\n        sgroup.id = sgid;\r\n        struct.sgroups.set(sgid, sgroup);\r\n        if (pp) {\r\n            struct.sgroups.get(sgid).pp = new Vec2(pp);\r\n        }\r\n        if (expanded) {\r\n            sgroup.data.expanded = expanded;\r\n        }\r\n        if (name) {\r\n            sgroup.data.name = name;\r\n        }\r\n        restruct.sgroups.set(sgid, new ReSGroup(struct.sgroups.get(sgid)));\r\n        if (FunctionalGroup.isFunctionalGroup(sgroup)) {\r\n            restruct.molecule.functionalGroups.add(new FunctionalGroup(sgroup));\r\n        }\r\n        this.data.sgid = sgid;\r\n    }\r\n    invert() {\r\n        const inverted = new SGroupDelete();\r\n        inverted.data = this.data;\r\n        return inverted;\r\n    }\r\n}\r\nclass SGroupDelete extends BaseOperation {\r\n    data;\r\n    constructor(sgroupId) {\r\n        super(OperationType.S_GROUP_DELETE, 95);\r\n        this.data = { sgid: sgroupId };\r\n    }\r\n    execute(restruct) {\r\n        const struct = restruct.molecule;\r\n        const { sgid } = this.data;\r\n        const sgroup = restruct.sgroups.get(sgid);\r\n        const sgroupData = restruct.sgroupData.get(sgid);\r\n        if (!sgroup)\r\n            return;\r\n        this.data.type = sgroup.item.type;\r\n        this.data.pp = sgroup.item.pp;\r\n        if (sgroup.item.type === 'DAT' && sgroupData) {\r\n            restruct.clearVisel(sgroupData.visel);\r\n            restruct.sgroupData.delete(sgid);\r\n        }\r\n        restruct.clearVisel(sgroup.visel);\r\n        if (sgroup.item.atoms.length !== 0) {\r\n            throw new Error('S-Group not empty!');\r\n        }\r\n        if (FunctionalGroup.isFunctionalGroup(sgroup.item)) {\r\n            let relatedFGroupId;\r\n            this.data.name = sgroup.item.data.name;\r\n            this.data.expanded = sgroup.item.expanded;\r\n            restruct.molecule.functionalGroups.forEach((fg, fgid) => {\r\n                if (fg.relatedSGroupId === sgid) {\r\n                    relatedFGroupId = fgid;\r\n                }\r\n            });\r\n            restruct.molecule.functionalGroups.delete(relatedFGroupId);\r\n        }\r\n        restruct.sgroups.delete(sgid);\r\n        struct.sgroups.delete(sgid);\r\n    }\r\n    invert() {\r\n        const inverted = new SGroupCreate();\r\n        inverted.data = this.data;\r\n        return inverted;\r\n    }\r\n}\r\nexport { SGroupCreate, SGroupDelete };\r\nexport * from './sgroupAtom';\r\nexport * from './SGroupAttr';\r\nexport * from './SGroupDataMove';\r\nexport * from './sgroupHierarchy';\r\n//# sourceMappingURL=index.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/base.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/OperationType.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/sgroup/sgroupAtom.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/sgroup/SGroupAttr.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/sgroup/SGroupDataMove.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/sgroup/sgroupHierarchy.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/application/editor/operations/sgroup/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/operations/sgroup/index.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { ReStruct } from '../../../render';\r\nimport { BaseOperation } from '../base';\r\ndeclare type Data = {\r\n    sgid: any;\r\n    type?: any;\r\n    pp?: any;\r\n    expanded?: boolean;\r\n    name?: string;\r\n};\r\ndeclare class SGroupCreate extends BaseOperation {\r\n    data: Data;\r\n    constructor(sgroupId?: any, type?: any, pp?: any, expanded?: boolean, name?: string);\r\n    execute(restruct: ReStruct): void;\r\n    invert(): SGroupDelete;\r\n}\r\ndeclare class SGroupDelete extends BaseOperation {\r\n    data: Data;\r\n    constructor(sgroupId?: any);\r\n    execute(restruct: ReStruct): void;\r\n    invert(): SGroupCreate;\r\n}\r\nexport { SGroupCreate, SGroupDelete };\r\nexport * from './sgroupAtom';\r\nexport * from './SGroupAttr';\r\nexport * from './SGroupDataMove';\r\nexport * from './sgroupHierarchy';\r\n"}}
