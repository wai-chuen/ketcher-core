{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { BaseOperation } from '../base';\r\nimport { OperationType } from '../OperationType';\r\nclass SGroupAddToHierarchy extends BaseOperation {\r\n    data;\r\n    constructor(sgroupId, parent, children) {\r\n        super(OperationType.S_GROUP_ADD_TO_HIERACHY, 100);\r\n        this.data = { sgid: sgroupId, parent, children };\r\n    }\r\n    execute(restruct) {\r\n        const { sgid, parent, children } = this.data;\r\n        const struct = restruct.molecule;\r\n        const sgroup = struct.sgroups.get(sgid);\r\n        const relations = struct.sGroupForest.insert(sgroup, parent, children);\r\n        this.data.parent = relations.parent;\r\n        this.data.children = relations.children;\r\n    }\r\n    invert() {\r\n        const inverted = new SGroupRemoveFromHierarchy();\r\n        inverted.data = this.data;\r\n        return inverted;\r\n    }\r\n}\r\nclass SGroupRemoveFromHierarchy extends BaseOperation {\r\n    data;\r\n    constructor(sgroupId) {\r\n        super(OperationType.S_GROUP_REMOVE_FROM_HIERACHY, 110);\r\n        this.data = { sgid: sgroupId };\r\n    }\r\n    execute(restruct) {\r\n        const { sgid } = this.data;\r\n        const struct = restruct.molecule;\r\n        this.data.parent = struct.sGroupForest.parent.get(sgid);\r\n        this.data.children = struct.sGroupForest.children.get(sgid);\r\n        struct.sGroupForest.remove(sgid);\r\n    }\r\n    invert() {\r\n        const inverted = new SGroupAddToHierarchy();\r\n        inverted.data = this.data;\r\n        return inverted;\r\n    }\r\n}\r\nexport { SGroupAddToHierarchy, SGroupRemoveFromHierarchy };\r\n//# sourceMappingURL=sgroupHierarchy.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/base.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/OperationType.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/index.ts"],"map":"{\"version\":3,\"file\":\"sgroupHierarchy.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/application/editor/operations/sgroup/sgroupHierarchy.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAA;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAA;AAWhD,MAAM,oBAAqB,SAAQ,aAAa;IAC9C,IAAI,CAAM;IAEV,YAAY,QAAc,EAAE,MAAY,EAAE,QAAc;QACtD,KAAK,CAAC,aAAa,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAA;QACjD,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAA;IAClD,CAAC;IAED,OAAO,CAAC,QAAkB;QACxB,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAA;QAE5C,MAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAA;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAA;QACxC,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAA;QAEtE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAA;QACnC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAA;IACzC,CAAC;IAED,MAAM;QACJ,MAAM,QAAQ,GAAG,IAAI,yBAAyB,EAAE,CAAA;QAChD,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;QACzB,OAAO,QAAQ,CAAA;IACjB,CAAC;CACF;AAED,MAAM,yBAA0B,SAAQ,aAAa;IACnD,IAAI,CAAM;IAEV,YAAY,QAAc;QACxB,KAAK,CAAC,aAAa,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAA;QACtD,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAA;IAChC,CAAC;IAED,OAAO,CAAC,QAAa;QACnB,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAA;QAC1B,MAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAA;QAEhC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACvD,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QAC3D,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAClC,CAAC;IAED,MAAM;QACJ,MAAM,QAAQ,GAAG,IAAI,oBAAoB,EAAE,CAAA;QAC3C,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;QACzB,OAAO,QAAQ,CAAA;IACjB,CAAC;CACF;AAED,OAAO,EAAE,oBAAoB,EAAE,yBAAyB,EAAE,CAAA\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/operations/sgroup/sgroupHierarchy.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { BaseOperation } from '../base';\r\nimport { ReStruct } from '../../../render';\r\ndeclare type Data = {\r\n    sgid: any;\r\n    parent?: any;\r\n    children?: any;\r\n};\r\ndeclare class SGroupAddToHierarchy extends BaseOperation {\r\n    data: Data;\r\n    constructor(sgroupId?: any, parent?: any, children?: any);\r\n    execute(restruct: ReStruct): void;\r\n    invert(): SGroupRemoveFromHierarchy;\r\n}\r\ndeclare class SGroupRemoveFromHierarchy extends BaseOperation {\r\n    data: Data;\r\n    constructor(sgroupId?: any);\r\n    execute(restruct: any): void;\r\n    invert(): SGroupAddToHierarchy;\r\n}\r\nexport { SGroupAddToHierarchy, SGroupRemoveFromHierarchy };\r\n"}}
