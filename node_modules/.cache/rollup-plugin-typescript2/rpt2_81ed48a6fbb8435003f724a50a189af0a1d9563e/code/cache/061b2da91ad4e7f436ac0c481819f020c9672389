{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { ChemicalMimeType } from \"../domain/services\";\r\nimport { KetSerializer } from \"../domain/serializers\";\r\nconst defaultTypes = [\r\n    'radicals',\r\n    'pseudoatoms',\r\n    'stereo',\r\n    'query',\r\n    'overlapping_atoms',\r\n    'overlapping_bonds',\r\n    'rgroups',\r\n    'chiral',\r\n    '3d'\r\n];\r\nconst defaultCalcProps = [\r\n    'molecular-weight',\r\n    'most-abundant-mass',\r\n    'monoisotopic-mass',\r\n    'gross',\r\n    'mass-composition'\r\n];\r\nfunction convertStructToString(struct, serializer) {\r\n    if (typeof struct !== 'string') {\r\n        const aidMap = new Map();\r\n        const result = struct.clone(null, null, false, aidMap);\r\n        return serializer.serialize(result);\r\n    }\r\n    return struct;\r\n}\r\nexport class Indigo {\r\n    #structService;\r\n    #ketSerializer;\r\n    constructor(structService) {\r\n        this.#structService = structService;\r\n        this.#ketSerializer = new KetSerializer();\r\n    }\r\n    info() {\r\n        return this.#structService.info();\r\n    }\r\n    convert(struct, options) {\r\n        const outputFormat = options?.outputFormat || ChemicalMimeType.KET;\r\n        return this.#structService.convert({\r\n            struct: convertStructToString(struct, this.#ketSerializer),\r\n            output_format: outputFormat\r\n        });\r\n    }\r\n    layout(struct) {\r\n        return this.#structService\r\n            .layout({\r\n            struct: convertStructToString(struct, this.#ketSerializer),\r\n            output_format: ChemicalMimeType.KET\r\n        })\r\n            .then((data) => this.#ketSerializer.deserialize(data.struct));\r\n    }\r\n    clean(struct) {\r\n        return this.#structService\r\n            .clean({\r\n            struct: convertStructToString(struct, this.#ketSerializer),\r\n            output_format: ChemicalMimeType.KET\r\n        })\r\n            .then((data) => this.#ketSerializer.deserialize(data.struct));\r\n    }\r\n    aromatize(struct) {\r\n        return this.#structService\r\n            .aromatize({\r\n            struct: convertStructToString(struct, this.#ketSerializer),\r\n            output_format: ChemicalMimeType.KET\r\n        })\r\n            .then((data) => this.#ketSerializer.deserialize(data.struct));\r\n    }\r\n    dearomatize(struct) {\r\n        return this.#structService\r\n            .dearomatize({\r\n            struct: convertStructToString(struct, this.#ketSerializer),\r\n            output_format: ChemicalMimeType.KET\r\n        })\r\n            .then((data) => this.#ketSerializer.deserialize(data.struct));\r\n    }\r\n    calculateCip(struct) {\r\n        return this.#structService\r\n            .calculateCip({\r\n            struct: convertStructToString(struct, this.#ketSerializer),\r\n            output_format: ChemicalMimeType.KET\r\n        })\r\n            .then((data) => this.#ketSerializer.deserialize(data.struct));\r\n    }\r\n    automap(struct, options) {\r\n        const mode = options?.mode || 'discard';\r\n        return this.#structService\r\n            .automap({\r\n            struct: convertStructToString(struct, this.#ketSerializer),\r\n            output_format: ChemicalMimeType.KET,\r\n            mode\r\n        })\r\n            .then((data) => this.#ketSerializer.deserialize(data.struct));\r\n    }\r\n    check(struct, options) {\r\n        const types = options?.types || defaultTypes;\r\n        return this.#structService.check({\r\n            struct: convertStructToString(struct, this.#ketSerializer),\r\n            types\r\n        });\r\n    }\r\n    calculate(struct, options) {\r\n        const properties = options?.properties || defaultCalcProps;\r\n        return this.#structService.calculate({\r\n            struct: convertStructToString(struct, this.#ketSerializer),\r\n            properties\r\n        });\r\n    }\r\n    recognize(image, options) {\r\n        const version = options?.version || '';\r\n        return this.#structService\r\n            .recognize(image, version)\r\n            .then((data) => this.#ketSerializer.deserialize(data.struct));\r\n    }\r\n    generateImageAsBase64(struct, options) {\r\n        const outputFormat = options?.outputFormat || 'png';\r\n        const backgroundColor = options?.backgroundColor || '';\r\n        return this.#structService.generateImageAsBase64(convertStructToString(struct, this.#ketSerializer), {\r\n            outputFormat,\r\n            backgroundColor\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=indigo.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/services/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/indigo.types.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts"],"map":"{\"version\":3,\"file\":\"indigo.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/application/indigo.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/indigo.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { AutomapMode, CalculateProps, CalculateResult, CheckResult, CheckTypes, ChemicalMimeType, ConvertResult, InfoResult, OutputFormatType } from \"../domain/services\";\r\nimport { StructOrString } from \"./indigo.types\";\r\nimport { Struct } from \"../domain/entities\";\r\ndeclare type ConvertOptions = {\r\n    outputFormat?: ChemicalMimeType;\r\n};\r\ndeclare type AutomapOptions = {\r\n    mode?: AutomapMode;\r\n};\r\ndeclare type CheckOptions = {\r\n    types?: Array<CheckTypes>;\r\n};\r\ndeclare type CalculateOptions = {\r\n    properties?: Array<CalculateProps>;\r\n};\r\ndeclare type RecognizeOptions = {\r\n    version?: string;\r\n};\r\ndeclare type GenerateImageOptions = {\r\n    outputFormat?: OutputFormatType;\r\n    backgroundColor?: string;\r\n};\r\nexport declare class Indigo {\r\n    #private;\r\n    constructor(structService: any);\r\n    info(): Promise<InfoResult>;\r\n    convert(struct: StructOrString, options?: ConvertOptions): Promise<ConvertResult>;\r\n    layout(struct: StructOrString): Promise<Struct>;\r\n    clean(struct: StructOrString): Promise<Struct>;\r\n    aromatize(struct: StructOrString): Promise<Struct>;\r\n    dearomatize(struct: StructOrString): Promise<Struct>;\r\n    calculateCip(struct: StructOrString): Promise<Struct>;\r\n    automap(struct: StructOrString, options?: AutomapOptions): Promise<Struct>;\r\n    check(struct: StructOrString, options?: CheckOptions): Promise<CheckResult>;\r\n    calculate(struct: StructOrString, options?: CalculateOptions): Promise<CalculateResult>;\r\n    recognize(image: Blob, options?: RecognizeOptions): Promise<Struct>;\r\n    generateImageAsBase64(struct: StructOrString, options?: GenerateImageOptions): Promise<string>;\r\n}\r\nexport {};\r\n"}}
