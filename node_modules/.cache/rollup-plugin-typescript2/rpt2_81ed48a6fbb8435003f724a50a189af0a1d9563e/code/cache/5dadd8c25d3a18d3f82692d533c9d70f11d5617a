{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { SupportedFormat } from './structFormatter.types';\r\nimport { KetSerializer, MolSerializer } from \"../../domain/serializers\";\r\nimport { KetFormatter } from './ketFormatter';\r\nimport { RxnFormatter } from './rxnFormatter';\r\nimport { ServerFormatter } from './serverFormatter';\r\nimport { MolfileV2000Formatter } from './molfileV2000Formatter';\r\nexport class FormatterFactory {\r\n    #structService;\r\n    constructor(structService) {\r\n        this.#structService = structService;\r\n    }\r\n    separateOptions(options) {\r\n        if (!options) {\r\n            return [{}, {}];\r\n        }\r\n        const { reactionRelayout, badHeaderRecover, ignoreChiralFlag, ...structServiceOptions } = options;\r\n        const molfileParseOptions = {};\r\n        if (typeof reactionRelayout === 'boolean') {\r\n            molfileParseOptions.reactionRelayout = reactionRelayout;\r\n        }\r\n        if (typeof badHeaderRecover === 'boolean') {\r\n            molfileParseOptions.badHeaderRecover = badHeaderRecover;\r\n        }\r\n        if (typeof ignoreChiralFlag === 'boolean') {\r\n            molfileParseOptions.ignoreChiralFlag = ignoreChiralFlag;\r\n            structServiceOptions['ignore-no-chiral-flag'] = ignoreChiralFlag;\r\n        }\r\n        return [molfileParseOptions, structServiceOptions];\r\n    }\r\n    create(format, options) {\r\n        const [molSerializerOptions, structServiceOptions] = this.separateOptions(options);\r\n        let formatter;\r\n        switch (format) {\r\n            case SupportedFormat.ket:\r\n                formatter = new KetFormatter(new KetSerializer());\r\n                break;\r\n            case SupportedFormat.rxn:\r\n                formatter = new RxnFormatter(new MolSerializer(molSerializerOptions));\r\n                break;\r\n            case SupportedFormat.mol:\r\n                formatter = new MolfileV2000Formatter(new MolSerializer(molSerializerOptions));\r\n                break;\r\n            case SupportedFormat.cml:\r\n            case SupportedFormat.inChIAuxInfo:\r\n            case SupportedFormat.inChI:\r\n            case SupportedFormat.molV3000:\r\n            case SupportedFormat.smiles:\r\n            case SupportedFormat.rxnV3000:\r\n            case SupportedFormat.smilesExt:\r\n            case SupportedFormat.smarts:\r\n            case SupportedFormat.cdxml:\r\n            case SupportedFormat.cdx:\r\n            case SupportedFormat.binaryCdx:\r\n            case SupportedFormat.unknown:\r\n            default:\r\n                formatter = new ServerFormatter(this.#structService, new KetSerializer(), format, structServiceOptions);\r\n        }\r\n        return formatter;\r\n    }\r\n}\r\n//# sourceMappingURL=formatterFactory.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/formatters/structFormatter.types.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/services/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/formatters/ketFormatter.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/formatters/rxnFormatter.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/formatters/serverFormatter.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/formatters/molfileV2000Formatter.ts"],"map":"{\"version\":3,\"file\":\"formatterFactory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/application/formatters/formatterFactory.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,OAAO,EAGL,eAAe,EAChB,MAAM,yBAAyB,CAAA;AAChC,OAAO,EACL,aAAa,EACb,aAAa,EAEd,iCAA0B;AAE3B,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAA;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAA;AAC7C,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAA;AACnD,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAA;AAE/D,MAAM,OAAO,gBAAgB;IAC3B,cAAc,CAAe;IAE7B,YAAY,aAA4B;QACtC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAA;IACrC,CAAC;IAEO,eAAe,CACrB,OAAiC;QAEjC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;SAChB;QAED,MAAM,EACJ,gBAAgB,EAChB,gBAAgB,EAChB,gBAAgB,EAChB,GAAG,oBAAoB,EACxB,GAAG,OAAO,CAAA;QAEX,MAAM,mBAAmB,GAAkC,EAAE,CAAA;QAE7D,IAAI,OAAO,gBAAgB,KAAK,SAAS,EAAE;YACzC,mBAAmB,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;SACxD;QACD,IAAI,OAAO,gBAAgB,KAAK,SAAS,EAAE;YACzC,mBAAmB,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;SACxD;QAED,IAAI,OAAO,gBAAgB,KAAK,SAAS,EAAE;YACzC,mBAAmB,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;YACvD,oBAAoB,CAAC,uBAAuB,CAAC,GAAG,gBAAgB,CAAA;SACjE;QAED,OAAO,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAA;IACpD,CAAC;IAED,MAAM,CACJ,MAAuB,EACvB,OAAiC;QAEjC,MAAM,CAAC,oBAAoB,EAAE,oBAAoB,CAAC,GAChD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;QAE/B,IAAI,SAA0B,CAAA;QAC9B,QAAQ,MAAM,EAAE;YACd,KAAK,eAAe,CAAC,GAAG;gBACtB,SAAS,GAAG,IAAI,YAAY,CAAC,IAAI,aAAa,EAAE,CAAC,CAAA;gBACjD,MAAK;YAEP,KAAK,eAAe,CAAC,GAAG;gBACtB,SAAS,GAAG,IAAI,YAAY,CAAC,IAAI,aAAa,CAAC,oBAAoB,CAAC,CAAC,CAAA;gBACrE,MAAK;YAEP,KAAK,eAAe,CAAC,GAAG;gBACtB,SAAS,GAAG,IAAI,qBAAqB,CACnC,IAAI,aAAa,CAAC,oBAAoB,CAAC,CACxC,CAAA;gBACD,MAAK;YAEP,KAAK,eAAe,CAAC,GAAG,CAAC;YACzB,KAAK,eAAe,CAAC,YAAY,CAAC;YAClC,KAAK,eAAe,CAAC,KAAK,CAAC;YAC3B,KAAK,eAAe,CAAC,QAAQ,CAAC;YAC9B,KAAK,eAAe,CAAC,MAAM,CAAC;YAC5B,KAAK,eAAe,CAAC,QAAQ,CAAC;YAC9B,KAAK,eAAe,CAAC,SAAS,CAAC;YAC/B,KAAK,eAAe,CAAC,MAAM,CAAC;YAC5B,KAAK,eAAe,CAAC,KAAK,CAAC;YAC3B,KAAK,eAAe,CAAC,GAAG,CAAC;YACzB,KAAK,eAAe,CAAC,SAAS,CAAC;YAC/B,KAAK,eAAe,CAAC,OAAO,CAAC;YAC7B;gBACE,SAAS,GAAG,IAAI,eAAe,CAC7B,IAAI,CAAC,cAAc,EACnB,IAAI,aAAa,EAAE,EACnB,MAAM,EACN,oBAAoB,CACrB,CAAA;SACJ;QAED,OAAO,SAAS,CAAA;IAClB,CAAC;CACF\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/formatters/formatterFactory.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { FormatterFactoryOptions, StructFormatter, SupportedFormat } from './structFormatter.types';\r\nimport { StructService } from \"../../domain/services\";\r\nexport declare class FormatterFactory {\r\n    #private;\r\n    constructor(structService: StructService);\r\n    private separateOptions;\r\n    create(format: SupportedFormat, options?: FormatterFactoryOptions): StructFormatter;\r\n}\r\n"}}
