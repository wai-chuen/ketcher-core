{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Atom, Pile, Vec2 } from \"../../../../domain/entities\";\r\nimport { ReAtom } from '../../../render';\r\nimport { BaseOperation } from '../base';\r\nimport { OperationType } from '../OperationType';\r\nclass AtomAdd extends BaseOperation {\r\n    data;\r\n    constructor(atom, pos) {\r\n        super(OperationType.ATOM_ADD);\r\n        this.data = { atom, pos, aid: null };\r\n    }\r\n    execute(restruct) {\r\n        const { atom, pos } = this.data;\r\n        const struct = restruct.molecule;\r\n        const pp = { label: '' };\r\n        if (atom) {\r\n            Object.keys(atom).forEach((p) => {\r\n                pp[p] = atom[p];\r\n            });\r\n        }\r\n        pp.label = pp.label || 'C';\r\n        if (typeof this.data.aid !== 'number') {\r\n            this.data.aid = struct.atoms.add(new Atom(pp));\r\n        }\r\n        else {\r\n            struct.atoms.set(this.data.aid, new Atom(pp));\r\n        }\r\n        const { aid } = this.data;\r\n        // notifyAtomAdded\r\n        const atomData = new ReAtom(struct.atoms.get(aid));\r\n        atomData.component = restruct.connectedComponents.add(new Pile([aid]));\r\n        restruct.atoms.set(aid, atomData);\r\n        restruct.markAtom(aid, 1);\r\n        struct.atomSetPos(aid, new Vec2(pos));\r\n        const arrow = struct.rxnArrows.get(0);\r\n        if (arrow) {\r\n            const atom = struct.atoms.get(aid);\r\n            atom.rxnFragmentType = struct.defineRxnFragmentTypeForAtomset(new Pile([aid]), arrow.pos[0].x);\r\n        }\r\n    }\r\n    invert() {\r\n        const inverted = new AtomDelete();\r\n        inverted.data = this.data;\r\n        return inverted;\r\n    }\r\n}\r\nclass AtomDelete extends BaseOperation {\r\n    data;\r\n    constructor(atomId) {\r\n        super(OperationType.ATOM_DELETE, 5);\r\n        this.data = { aid: atomId, atom: null, pos: null };\r\n    }\r\n    execute(restruct) {\r\n        const { aid } = this.data;\r\n        const struct = restruct.molecule;\r\n        if (!this.data.atom) {\r\n            this.data.atom = struct.atoms.get(aid);\r\n            this.data.pos = this.data.atom.pp;\r\n        }\r\n        // notifyAtomRemoved(aid);\r\n        const restructedAtom = restruct.atoms.get(aid);\r\n        if (!restructedAtom) {\r\n            return;\r\n        }\r\n        const set = restruct.connectedComponents.get(restructedAtom.component);\r\n        set.delete(aid);\r\n        if (set.size === 0) {\r\n            restruct.connectedComponents.delete(restructedAtom.component);\r\n        }\r\n        restruct.clearVisel(restructedAtom.visel);\r\n        restruct.atoms.delete(aid);\r\n        restruct.markItemRemoved();\r\n        struct.atoms.delete(aid);\r\n    }\r\n    invert() {\r\n        const inverted = new AtomAdd();\r\n        inverted.data = this.data;\r\n        return inverted;\r\n    }\r\n}\r\nexport { AtomAdd, AtomDelete };\r\nexport * from './AtomAttr';\r\nexport * from './AtomMove';\r\n//# sourceMappingURL=index.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/base.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/OperationType.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/atom/AtomAttr.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/atom/AtomMove.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/application/editor/operations/atom/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/operations/atom/index.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { ReStruct } from '../../../render';\r\nimport { BaseOperation } from '../base';\r\ndeclare type Data = {\r\n    aid: any;\r\n    atom: any;\r\n    pos: any;\r\n};\r\ndeclare class AtomAdd extends BaseOperation {\r\n    data: Data;\r\n    constructor(atom?: any, pos?: any);\r\n    execute(restruct: ReStruct): void;\r\n    invert(): AtomDelete;\r\n}\r\ndeclare class AtomDelete extends BaseOperation {\r\n    data: Data;\r\n    constructor(atomId?: any);\r\n    execute(restruct: ReStruct): void;\r\n    invert(): AtomAdd;\r\n}\r\nexport { AtomAdd, AtomDelete };\r\nexport * from './AtomAttr';\r\nexport * from './AtomMove';\r\n"}}
