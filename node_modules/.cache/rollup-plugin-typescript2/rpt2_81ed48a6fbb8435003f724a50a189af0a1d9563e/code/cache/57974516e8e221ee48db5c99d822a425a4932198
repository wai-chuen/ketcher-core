{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Action } from './action';\r\nimport { checkAtomValence, fromAtomMerge } from './atom';\r\nimport { fromBondsMerge } from './bond';\r\nimport utils from '../shared/utils';\r\nexport function fromItemsFuse(restruct, items) {\r\n    let action = new Action();\r\n    if (!items)\r\n        return action;\r\n    const usedAtoms = new Set();\r\n    const connectedAtomIds = getAllConnectedAtomsIds(restruct, mergeMapOfItemsToSet(items.atoms), mergeMapOfItemsToSet(items.bonds));\r\n    // merge single atoms\r\n    items.atoms.forEach((dst, src) => {\r\n        if (usedAtoms.has(dst) || usedAtoms.has(src))\r\n            return;\r\n        action = fromAtomMerge(restruct, src, dst).mergeWith(action);\r\n        usedAtoms.add(dst).add(src);\r\n    });\r\n    // merge bonds\r\n    action = fromBondsMerge(restruct, items.bonds).mergeWith(action);\r\n    action = valenceCheck(restruct, connectedAtomIds).mergeWith(action);\r\n    return action;\r\n}\r\nexport function getItemsToFuse(editor, items) {\r\n    const struct = editor.render.ctab.molecule;\r\n    const mergeItems = items || {\r\n        atoms: Array.from(struct.atoms.keys()),\r\n        bonds: Array.from(struct.bonds.keys())\r\n    };\r\n    return closestToMerge(struct, editor.findMerge(mergeItems, ['atoms', 'bonds']));\r\n}\r\nexport function getHoverToFuse(items) {\r\n    if (!items)\r\n        return null;\r\n    const hoverItems = {\r\n        atoms: Array.from(items.atoms.values()),\r\n        bonds: Array.from(items.bonds.values()),\r\n        ...(items.functionalGroups && {\r\n            functionalGroups: Array.from(items.functionalGroups.values())\r\n        })\r\n    };\r\n    return { map: 'merge', id: +Date.now(), items: hoverItems };\r\n}\r\nexport function mergeMapOfItemsToSet(items) {\r\n    const itemsSet = new Set();\r\n    items.forEach((value, key) => {\r\n        itemsSet.add(value).add(key);\r\n    });\r\n    return itemsSet;\r\n}\r\n/**\r\n * @param struct\r\n * @param closestMap {{\r\n * \t\tatoms: Map<number, number>,\r\n * \t\tbonds: Map<number, number>\r\n * }}\r\n * @return {{\r\n * \t\tatoms: Map<number, number>,\r\n * \t\tbonds: Map<number, number>\r\n * }}\r\n */\r\nfunction closestToMerge(struct, closestMap) {\r\n    const mergeMap = {\r\n        atoms: new Map(closestMap.atoms),\r\n        bonds: new Map(closestMap.bonds)\r\n    };\r\n    closestMap.bonds.forEach((dstId, srcId) => {\r\n        const bond = struct.bonds.get(srcId);\r\n        const bondCI = struct.bonds.get(dstId);\r\n        if (utils.mergeBondsParams(struct, bond, struct, bondCI).merged) {\r\n            mergeMap.atoms.delete(bond.begin);\r\n            mergeMap.atoms.delete(bond.end);\r\n        }\r\n        else {\r\n            mergeMap.bonds.delete(srcId);\r\n        }\r\n    });\r\n    if (mergeMap.atoms.size === 0 && mergeMap.bonds.size === 0)\r\n        return null;\r\n    return mergeMap;\r\n}\r\nfunction getAllConnectedAtomsIds(restruct, atomsIds, bondsIds) {\r\n    const initialAtoms = new Set(atomsIds);\r\n    const connectedAtoms = new Set();\r\n    for (const bondId of bondsIds) {\r\n        const bond = restruct.bonds.get(bondId);\r\n        if (bond) {\r\n            const { begin, end } = bond.b;\r\n            initialAtoms.add(begin).add(end);\r\n        }\r\n    }\r\n    for (const initialAtom of initialAtoms) {\r\n        if (connectedAtoms.has(initialAtom))\r\n            continue;\r\n        const relevantConnectedComponent = [\r\n            ...restruct.connectedComponents.values()\r\n        ].find((component) => component.has(initialAtom));\r\n        if (relevantConnectedComponent)\r\n            relevantConnectedComponent.forEach((id) => connectedAtoms.add(id));\r\n    }\r\n    return connectedAtoms;\r\n}\r\nfunction valenceCheck(restruct, atomIds) {\r\n    let action = new Action();\r\n    if (!atomIds)\r\n        return action;\r\n    const usedAtoms = new Set();\r\n    // merge single atoms\r\n    atomIds.forEach((atomId) => {\r\n        if (usedAtoms.has(atomId))\r\n            return;\r\n        action = checkAtomValence(restruct, atomId).mergeWith(action);\r\n        usedAtoms.add(atomId);\r\n    });\r\n    return action;\r\n}\r\n//# sourceMappingURL=closelyFusing.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/action.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/atom.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/bond.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/shared/utils.js"],"map":"{\"version\":3,\"file\":\"closelyFusing.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/application/editor/actions/closelyFusing.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/actions/closelyFusing.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Action } from './action';\r\nexport declare function fromItemsFuse(restruct: any, items: any): Action;\r\nexport declare function getItemsToFuse(editor: any, items: any): {\r\n    atoms: Map<unknown, unknown>;\r\n    bonds: Map<unknown, unknown>;\r\n} | null;\r\nexport declare function getHoverToFuse(items: any): {\r\n    map: string;\r\n    id: number;\r\n    items: any;\r\n} | null;\r\nexport declare function mergeMapOfItemsToSet(items: Map<number, number>): Set<number>;\r\n"}}
