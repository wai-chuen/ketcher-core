{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Pile, Pool, Vec2 } from \"../../../entities\";\r\nexport function prepareStructForKet(struct) {\r\n    const ketNodes = [];\r\n    const rgFrags = new Set(); // skip this when writing molecules\r\n    for (const [rgnumber, rgroup] of struct.rgroups.entries()) {\r\n        // RGroups writing\r\n        rgroup.frags.forEach((frid) => rgFrags.add(frid));\r\n        const fragsAtoms = Array.from(rgroup.frags.values()).reduce((res, frid) => res.union(struct.getFragmentIds(frid)), new Pile());\r\n        ketNodes.push({\r\n            type: 'rgroup',\r\n            fragment: struct.clone(fragsAtoms),\r\n            center: getFragmentCenter(struct, fragsAtoms),\r\n            data: { rgnumber, rgroup }\r\n        });\r\n    }\r\n    const filteredFragmentIds = Array.from(struct.frags.keys()).filter((fid) => !rgFrags.has(fid));\r\n    addMolecules(ketNodes, filteredFragmentIds, struct);\r\n    struct.rxnArrows.forEach((item) => {\r\n        ketNodes.push({\r\n            type: 'arrow',\r\n            center: item.pos[0],\r\n            data: {\r\n                mode: item.mode,\r\n                pos: item.pos,\r\n                height: item.height\r\n            }\r\n        });\r\n    });\r\n    struct.rxnPluses.forEach((item) => {\r\n        ketNodes.push({\r\n            type: 'plus',\r\n            center: item.pp,\r\n            data: {}\r\n        });\r\n    });\r\n    struct.simpleObjects.forEach((item) => {\r\n        ketNodes.push({\r\n            type: 'simpleObject',\r\n            center: item.pos[0],\r\n            data: {\r\n                mode: item.mode,\r\n                pos: item.pos\r\n            }\r\n        });\r\n    });\r\n    struct.texts.forEach((item) => {\r\n        ketNodes.push({\r\n            type: 'text',\r\n            center: item.position,\r\n            data: {\r\n                content: item.content,\r\n                position: item.position,\r\n                pos: item.pos\r\n            }\r\n        });\r\n    });\r\n    ketNodes.forEach((ketNode) => {\r\n        if (ketNode.fragment) {\r\n            const sgroups = Array.from(ketNode.fragment.sgroups.values());\r\n            const filteredSGroups = sgroups.filter((sg) => sg.atoms.every((atom) => atom !== undefined));\r\n            const filteredSGroupsMap = new Pool();\r\n            filteredSGroups.forEach((sg, index) => {\r\n                filteredSGroupsMap.set(index, sg);\r\n            });\r\n            ketNode.fragment.sgroups = filteredSGroupsMap;\r\n        }\r\n    });\r\n    // TODO: check if this sorting operation is needed\r\n    // return ketNodes.sort((a, b) => a.center.x - b.center.x)\r\n    return ketNodes;\r\n}\r\nfunction getFragmentCenter(struct, atomSet) {\r\n    const bb = struct.getCoordBoundingBox(atomSet);\r\n    return Vec2.centre(bb.min, bb.max);\r\n}\r\n/**\r\n * Merge fragments which are in the same S-Groups to one fragment(molecule)\r\n * and add new fragments(molecules) to KetNodes\r\n * See: https://github.com/epam/ketcher/issues/2142\r\n */\r\nfunction addMolecules(ketNodes, fragmentIds, struct) {\r\n    const sGroupFragmentsMap = generateSGroupFragmentsMap(ketNodes, fragmentIds, struct);\r\n    const mergedFragments = Pile.unionIntersections(Array.from(sGroupFragmentsMap.values()));\r\n    mergedFragments.forEach((fragments) => {\r\n        let atomSet = new Pile();\r\n        fragments.forEach((fragmentId) => {\r\n            atomSet = atomSet.union(struct.getFragmentIds(fragmentId));\r\n        });\r\n        ketNodes.push({\r\n            type: 'molecule',\r\n            fragment: struct.clone(atomSet),\r\n            center: getFragmentCenter(struct, atomSet)\r\n        });\r\n    });\r\n}\r\n/**\r\n * @example Give `fragmentIds` is `[0, 1]`,\r\n * and S-Group0 includes fragment0 and fragment1,\r\n * and S-Group1 includes fragment1,\r\n * then return value should be\r\n * ```\r\n * {\r\n *   0: [0, 1],\r\n *   1: [1]\r\n * }\r\n * ```\r\n */\r\nfunction generateSGroupFragmentsMap(ketNodes, fragmentIds, struct) {\r\n    const sGroupFragmentsMap = new Map();\r\n    fragmentIds.forEach((fragmentId) => {\r\n        const atomsInFragment = struct.getFragmentIds(fragmentId);\r\n        let hasAtomInSGroup = false;\r\n        atomsInFragment.forEach((atomId) => {\r\n            struct.atoms.get(atomId)?.sgs.forEach((sGroupId) => {\r\n                hasAtomInSGroup = true;\r\n                const fragmentSet = sGroupFragmentsMap.get(sGroupId);\r\n                if (fragmentSet) {\r\n                    fragmentSet.add(fragmentId);\r\n                }\r\n                else {\r\n                    sGroupFragmentsMap.set(sGroupId, new Pile([fragmentId]));\r\n                }\r\n            });\r\n        });\r\n        if (!hasAtomInSGroup) {\r\n            ketNodes.push({\r\n                type: 'molecule',\r\n                fragment: struct.clone(atomsInFragment),\r\n                center: getFragmentCenter(struct, atomsInFragment)\r\n            });\r\n        }\r\n    });\r\n    return sGroupFragmentsMap;\r\n}\r\n//# sourceMappingURL=prepare.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts"],"map":"{\"version\":3,\"file\":\"prepare.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/domain/serializers/ket/toKet/prepare.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/serializers/ket/toKet/prepare.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Struct, Vec2 } from \"../../../entities\";\r\ndeclare type KetNode = {\r\n    type: string;\r\n    fragment?: Struct;\r\n    center: Vec2;\r\n    data?: any;\r\n};\r\nexport declare function prepareStructForKet(struct: Struct): KetNode[];\r\nexport {};\r\n"}}
