{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { AtomAttr, SGroupAddToHierarchy, SGroupAtomAdd, SGroupAtomRemove, SGroupAttr, SGroupCreate, SGroupDelete, SGroupRemoveFromHierarchy } from '../operations';\r\nimport { Pile, SGroup } from \"../../../domain/entities\";\r\nimport { atomGetAttr, atomGetDegree, atomGetSGroups } from './utils';\r\nimport { Action } from './action';\r\nimport { SgContexts } from '..';\r\nimport { uniq } from 'lodash/fp';\r\nimport { fromAtomsAttrs } from './atom';\r\nexport function fromSeveralSgroupAddition(restruct, type, atoms, attrs) {\r\n    const descriptors = attrs.fieldValue;\r\n    if (typeof descriptors === 'string' || type !== 'DAT') {\r\n        return fromSgroupAddition(restruct, type, atoms, attrs, restruct.molecule.sgroups.newId());\r\n    }\r\n    return descriptors.reduce((acc, fValue) => {\r\n        const localAttrs = Object.assign({}, attrs);\r\n        localAttrs.fieldValue = fValue;\r\n        return acc.mergeWith(fromSgroupAddition(restruct, type, atoms, localAttrs, restruct.molecule.sgroups.newId()));\r\n    }, new Action());\r\n}\r\nexport function fromSgroupAttrs(restruct, id, attrs) {\r\n    const action = new Action();\r\n    Object.keys(attrs).forEach((key) => {\r\n        action.addOp(new SGroupAttr(id, key, attrs[key]));\r\n    });\r\n    return action.perform(restruct);\r\n}\r\nexport function setExpandSGroup(restruct, sgid, attrs) {\r\n    const action = new Action();\r\n    Object.keys(attrs).forEach((key) => {\r\n        action.addOp(new SGroupAttr(sgid, key, attrs[key]));\r\n    });\r\n    const sgroup = restruct.molecule.sgroups.get(sgid);\r\n    if (sgroup.firstSgroupAtom)\r\n        delete sgroup.firstSgroupAtom;\r\n    const atoms = SGroup.getAtoms(restruct, sgroup);\r\n    atoms.forEach((aid) => {\r\n        action.mergeWith(fromAtomsAttrs(restruct, aid, restruct.atoms.get(aid).a, false));\r\n    });\r\n    return action.perform(restruct);\r\n}\r\nexport function sGroupAttributeAction(id, attrs) {\r\n    const action = new Action();\r\n    Object.keys(attrs).forEach((key) => {\r\n        action.addOp(new SGroupAttr(id, key, attrs[key]));\r\n    });\r\n    return action;\r\n}\r\nexport function fromSgroupDeletion(restruct, id) {\r\n    let action = new Action();\r\n    const struct = restruct.molecule;\r\n    const sG = restruct.sgroups.get(id).item;\r\n    if (sG.type === 'SRU') {\r\n        struct.sGroupsRecalcCrossBonds();\r\n        sG.neiAtoms.forEach((aid) => {\r\n            if (atomGetAttr(restruct, aid, 'label') === '*') {\r\n                action.addOp(new AtomAttr(aid, 'label', 'C'));\r\n            }\r\n        });\r\n    }\r\n    const sg = struct.sgroups.get(id);\r\n    const atoms = SGroup.getAtoms(struct, sg);\r\n    const attrs = sg.getAttrs();\r\n    action.addOp(new SGroupRemoveFromHierarchy(id));\r\n    atoms.forEach((atom) => {\r\n        action.addOp(new SGroupAtomRemove(id, atom));\r\n    });\r\n    action.addOp(new SGroupDelete(id));\r\n    action = action.perform(restruct);\r\n    action.mergeWith(sGroupAttributeAction(id, attrs));\r\n    return action;\r\n}\r\nexport function fromSgroupAddition(restruct, type, atoms, attrs, sgid, pp, expanded, name) {\r\n    // eslint-disable-line\r\n    let action = new Action();\r\n    // TODO: shoud the id be generated when OpSGroupCreate is executed?\r\n    //      if yes, how to pass it to the following operations?\r\n    sgid = sgid - 0 === sgid ? sgid : restruct.molecule.sgroups.newId();\r\n    if (type === 'SUP') {\r\n        action.addOp(new SGroupCreate(sgid, type, pp, expanded, name));\r\n    }\r\n    else {\r\n        action.addOp(new SGroupCreate(sgid, type, pp));\r\n    }\r\n    atoms.forEach((atom) => {\r\n        action.addOp(new SGroupAtomAdd(sgid, atom));\r\n    });\r\n    action.addOp(type !== 'DAT'\r\n        ? new SGroupAddToHierarchy(sgid)\r\n        : new SGroupAddToHierarchy(sgid, -1, []));\r\n    action = action.perform(restruct);\r\n    if (type === 'SRU') {\r\n        restruct.molecule.sGroupsRecalcCrossBonds();\r\n        let asteriskAction = new Action();\r\n        restruct.sgroups.get(sgid).item.neiAtoms.forEach((aid) => {\r\n            const plainCarbon = restruct.atoms.get(aid).a.isPlainCarbon();\r\n            if (atomGetDegree(restruct, aid) === 1 && plainCarbon) {\r\n                asteriskAction.addOp(new AtomAttr(aid, 'label', '*'));\r\n            }\r\n        });\r\n        asteriskAction = asteriskAction.perform(restruct);\r\n        asteriskAction.mergeWith(action);\r\n        action = asteriskAction;\r\n    }\r\n    return fromSgroupAttrs(restruct, sgid, attrs).mergeWith(action);\r\n}\r\nexport function fromSgroupAction(context, restruct, newSg, sourceAtoms, selection) {\r\n    if (context === SgContexts.Bond) {\r\n        return fromBondAction(restruct, newSg, sourceAtoms, selection);\r\n    }\r\n    const atomsFromBonds = getAtomsFromBonds(restruct.molecule, selection.bonds);\r\n    const newSourceAtoms = uniq(sourceAtoms.concat(atomsFromBonds));\r\n    if (context === SgContexts.Fragment) {\r\n        return fromGroupAction(restruct, newSg, newSourceAtoms, Array.from(restruct.atoms.keys()));\r\n    }\r\n    if (context === SgContexts.Multifragment) {\r\n        return fromMultiFragmentAction(restruct, newSg, newSourceAtoms);\r\n    }\r\n    if (context === SgContexts.Group) {\r\n        return fromGroupAction(restruct, newSg, newSourceAtoms, newSourceAtoms);\r\n    }\r\n    if (context === SgContexts.Atom) {\r\n        return fromAtomAction(restruct, newSg, newSourceAtoms);\r\n    }\r\n    return {\r\n        action: fromSeveralSgroupAddition(restruct, newSg.type, sourceAtoms, newSg.attrs)\r\n    };\r\n}\r\nfunction fromAtomAction(restruct, newSg, sourceAtoms) {\r\n    return sourceAtoms.reduce((acc, atom) => {\r\n        acc.action = acc.action.mergeWith(fromSeveralSgroupAddition(restruct, newSg.type, [atom], newSg.attrs));\r\n        return acc;\r\n    }, {\r\n        action: new Action(),\r\n        selection: {\r\n            atoms: sourceAtoms,\r\n            bonds: []\r\n        }\r\n    });\r\n}\r\nfunction fromGroupAction(restruct, newSg, sourceAtoms, targetAtoms) {\r\n    const allFragments = new Pile(sourceAtoms.map((aid) => restruct.atoms.get(aid).a.fragment));\r\n    return Array.from(allFragments).reduce((acc, fragId) => {\r\n        const atoms = targetAtoms.reduce((res, aid) => {\r\n            const atom = restruct.atoms.get(aid).a;\r\n            if (fragId === atom.fragment)\r\n                res.push(aid);\r\n            return res;\r\n        }, []);\r\n        const bonds = getAtomsBondIds(restruct.molecule, atoms);\r\n        acc.action = acc.action.mergeWith(fromSeveralSgroupAddition(restruct, newSg.type, atoms, newSg.attrs));\r\n        acc.selection.atoms = acc.selection.atoms.concat(atoms);\r\n        acc.selection.bonds = acc.selection.bonds.concat(bonds);\r\n        return acc;\r\n    }, {\r\n        action: new Action(),\r\n        selection: {\r\n            atoms: [],\r\n            bonds: []\r\n        }\r\n    });\r\n}\r\nfunction fromBondAction(restruct, newSg, sourceAtoms, currSelection) {\r\n    const struct = restruct.molecule;\r\n    let bonds = getAtomsBondIds(struct, sourceAtoms);\r\n    if (currSelection.bonds)\r\n        bonds = uniq(bonds.concat(currSelection.bonds));\r\n    return bonds.reduce((acc, bondid) => {\r\n        const bond = struct.bonds.get(bondid);\r\n        acc.action = acc.action.mergeWith(fromSeveralSgroupAddition(restruct, newSg.type, [bond.begin, bond.end], newSg.attrs));\r\n        acc.selection.bonds.push(bondid);\r\n        return acc;\r\n    }, {\r\n        action: new Action(),\r\n        selection: {\r\n            atoms: sourceAtoms,\r\n            bonds: []\r\n        }\r\n    });\r\n}\r\nfunction fromMultiFragmentAction(restruct, newSg, atoms) {\r\n    const bonds = getAtomsBondIds(restruct.molecule, atoms);\r\n    return {\r\n        action: fromSeveralSgroupAddition(restruct, newSg.type, atoms, newSg.attrs),\r\n        selection: {\r\n            atoms,\r\n            bonds\r\n        }\r\n    };\r\n}\r\n// Add action operation to remove atom from s-group if needed\r\nexport function removeAtomFromSgroupIfNeeded(action, restruct, id) {\r\n    const sgroups = atomGetSGroups(restruct, id);\r\n    if (sgroups.length > 0) {\r\n        sgroups.forEach((sid) => {\r\n            action.addOp(new SGroupAtomRemove(sid, id));\r\n        });\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n// Add action operations to remove whole s-group if needed\r\nexport function removeSgroupIfNeeded(action, restruct, atoms) {\r\n    const struct = restruct.molecule;\r\n    const sgCounts = new Map();\r\n    atoms.forEach((id) => {\r\n        const sgroups = atomGetSGroups(restruct, id);\r\n        sgroups.forEach((sid) => {\r\n            sgCounts.set(sid, sgCounts.has(sid) ? sgCounts.get(sid) + 1 : 1);\r\n        });\r\n    });\r\n    sgCounts.forEach((count, sid) => {\r\n        const sG = restruct.sgroups.get(sid).item;\r\n        const sgAtoms = SGroup.getAtoms(restruct.molecule, sG);\r\n        if (sgAtoms.length === count) {\r\n            // delete whole s-group\r\n            const sgroup = struct.sgroups.get(sid);\r\n            action.mergeWith(sGroupAttributeAction(sid, sgroup.getAttrs()));\r\n            action.addOp(new SGroupRemoveFromHierarchy(sid));\r\n            action.addOp(new SGroupDelete(sid));\r\n        }\r\n    });\r\n}\r\nfunction getAtomsBondIds(struct, atoms) {\r\n    const atomSet = new Pile(atoms);\r\n    return Array.from(struct.bonds.keys()).filter((bid) => {\r\n        const bond = struct.bonds.get(bid);\r\n        return atomSet.has(bond.begin) && atomSet.has(bond.end);\r\n    });\r\n}\r\nfunction getAtomsFromBonds(struct, bonds) {\r\n    bonds = bonds || [];\r\n    return bonds.reduce((acc, bondid) => {\r\n        const bond = struct.bonds.get(bondid);\r\n        acc = acc.concat([bond.begin, bond.end]);\r\n        return acc;\r\n    }, []);\r\n}\r\n//# sourceMappingURL=sgroup.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/utils.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/action.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/index.ts","/usr/local/google/home/waich/workspace/ketcher/node_modules/@types/lodash/fp.d.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/atom.ts"],"map":"{\"version\":3,\"file\":\"sgroup.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/application/editor/actions/sgroup.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/actions/sgroup.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Action } from './action';\r\nexport declare function fromSeveralSgroupAddition(restruct: any, type: any, atoms: any, attrs: any): any;\r\nexport declare function fromSgroupAttrs(restruct: any, id: any, attrs: any): Action;\r\nexport declare function setExpandSGroup(restruct: any, sgid: any, attrs: any): Action;\r\nexport declare function sGroupAttributeAction(id: any, attrs: any): Action;\r\nexport declare function fromSgroupDeletion(restruct: any, id: any): Action;\r\nexport declare function fromSgroupAddition(restruct: any, type: any, atoms: any, attrs: any, sgid: any, pp?: any, expanded?: any, name?: any): Action;\r\nexport declare function fromSgroupAction(context: any, restruct: any, newSg: any, sourceAtoms: any, selection: any): any;\r\nexport declare function removeAtomFromSgroupIfNeeded(action: any, restruct: any, id: any): boolean;\r\nexport declare function removeSgroupIfNeeded(action: any, restruct: any, atoms: any): void;\r\n"}}
