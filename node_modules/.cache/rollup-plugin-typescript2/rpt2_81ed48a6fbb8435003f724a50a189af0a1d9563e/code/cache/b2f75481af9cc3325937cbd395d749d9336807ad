{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { SupportedFormat } from './structFormatter.types';\r\nexport function identifyStructFormat(stringifiedStruct) {\r\n    // Mimic Indigo/molecule_auto_loader.cpp as much as possible\r\n    const sanitizedString = stringifiedStruct.trim();\r\n    try {\r\n        if (JSON.parse(sanitizedString)) {\r\n            return SupportedFormat.ket;\r\n        }\r\n    }\r\n    catch (er) { } // eslint-disable-line\r\n    if (sanitizedString.indexOf('$RXN') !== -1) {\r\n        return SupportedFormat.rxn;\r\n    }\r\n    if (sanitizedString.indexOf('V2000') !== -1) {\r\n        return SupportedFormat.mol;\r\n    }\r\n    if (sanitizedString.indexOf('V3000') !== -1) {\r\n        return SupportedFormat.molV3000;\r\n    }\r\n    const match = sanitizedString.match(/^(M {2}END|\\$END MOL)$/m);\r\n    if (match) {\r\n        const end = (match.index || 0) + match[0].length;\r\n        if (end === sanitizedString.length ||\r\n            sanitizedString.slice(end, end + 20).search(/^\\$(MOL|END CTAB)$/m) !== -1) {\r\n            return SupportedFormat.mol;\r\n        }\r\n    }\r\n    if (sanitizedString[0] === '<' &&\r\n        sanitizedString.indexOf('<molecule') !== -1) {\r\n        return SupportedFormat.cml;\r\n    }\r\n    const clearStr = sanitizedString\r\n        .replace(/\\s/g, '')\r\n        .replace(/(\\\\r)|(\\\\n)/g, '');\r\n    const isBase64String = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\r\n    const cdxHeader = 'VjCD0100';\r\n    if (clearStr.length % 4 === 0 &&\r\n        isBase64String.test(clearStr) &&\r\n        window.atob(clearStr).startsWith(cdxHeader)) {\r\n        return SupportedFormat.cdx;\r\n    }\r\n    if (sanitizedString.slice(0, 5) === 'InChI') {\r\n        return SupportedFormat.inChI;\r\n    }\r\n    if (sanitizedString.indexOf('\\n') === -1) {\r\n        // TODO: smiles regexp\r\n        return SupportedFormat.smiles;\r\n    }\r\n    if (sanitizedString.indexOf('<CDXML') !== -1) {\r\n        return SupportedFormat.cdxml;\r\n    }\r\n    return SupportedFormat.unknown;\r\n}\r\n//# sourceMappingURL=identifyStructFormat.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/formatters/structFormatter.types.ts"],"map":"{\"version\":3,\"file\":\"identifyStructFormat.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/application/formatters/identifyStructFormat.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAA;AAEzD,MAAM,UAAU,oBAAoB,CAClC,iBAAyB;IAEzB,4DAA4D;IAC5D,MAAM,eAAe,GAAG,iBAAiB,CAAC,IAAI,EAAE,CAAA;IAEhD,IAAI;QACF,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE;YAC/B,OAAO,eAAe,CAAC,GAAG,CAAA;SAC3B;KACF;IAAC,OAAO,EAAE,EAAE,GAAE,CAAC,sBAAsB;IAEtC,IAAI,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;QAC1C,OAAO,eAAe,CAAC,GAAG,CAAA;KAC3B;IAED,IAAI,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;QAC3C,OAAO,eAAe,CAAC,GAAG,CAAA;KAC3B;IAED,IAAI,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;QAC3C,OAAO,eAAe,CAAC,QAAQ,CAAA;KAChC;IAED,MAAM,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAE9D,IAAI,KAAK,EAAE;QACT,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAA;QAChD,IACE,GAAG,KAAK,eAAe,CAAC,MAAM;YAC9B,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,EACzE;YACA,OAAO,eAAe,CAAC,GAAG,CAAA;SAC3B;KACF;IAED,IACE,eAAe,CAAC,CAAC,CAAC,KAAK,GAAG;QAC1B,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAC3C;QACA,OAAO,eAAe,CAAC,GAAG,CAAA;KAC3B;IAED,MAAM,QAAQ,GAAG,eAAe;SAC7B,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;SAClB,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAA;IAC9B,MAAM,cAAc,GAClB,kEAAkE,CAAA;IACpE,MAAM,SAAS,GAAG,UAAU,CAAA;IAC5B,IACE,QAAQ,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC;QACzB,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,EAC3C;QACA,OAAO,eAAe,CAAC,GAAG,CAAA;KAC3B;IAED,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,OAAO,EAAE;QAC3C,OAAO,eAAe,CAAC,KAAK,CAAA;KAC7B;IAED,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QACxC,sBAAsB;QACtB,OAAO,eAAe,CAAC,MAAM,CAAA;KAC9B;IAED,IAAI,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QAC5C,OAAO,eAAe,CAAC,KAAK,CAAA;KAC7B;IAED,OAAO,eAAe,CAAC,OAAO,CAAA;AAChC,CAAC\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/formatters/identifyStructFormat.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { SupportedFormat } from './structFormatter.types';\r\nexport declare function identifyStructFormat(stringifiedStruct: string): SupportedFormat;\r\n"}}
