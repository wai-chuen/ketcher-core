{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { RemoteStructService } from './remoteStructService';\r\nexport class RemoteStructServiceProvider {\r\n    apiPath;\r\n    mode = 'remote';\r\n    customHeaders;\r\n    constructor(apiPath, customHeaders) {\r\n        let currentApiPath = apiPath;\r\n        this.customHeaders = customHeaders;\r\n        const params = new URLSearchParams(document.location.search);\r\n        if (params.has('api_path')) {\r\n            currentApiPath = params.get('api_path');\r\n        }\r\n        this.apiPath =\r\n            !currentApiPath || /\\/$/.test(currentApiPath)\r\n                ? currentApiPath\r\n                : currentApiPath + '/';\r\n    }\r\n    createStructService(options) {\r\n        return new RemoteStructService(this.apiPath, options, this.customHeaders);\r\n    }\r\n}\r\n//# sourceMappingURL=remoteStructServiceProvider.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/services/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/infrastructure/services/struct/remoteStructService.ts"],"map":"{\"version\":3,\"file\":\"remoteStructServiceProvider.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/infrastructure/services/struct/remoteStructServiceProvider.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAS7E,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAA;AAE3D,MAAM,OAAO,2BAA2B;IACrB,OAAO,CAAQ;IAChC,IAAI,GAAgB,QAAQ,CAAA;IAC5B,aAAa,CAAyB;IAEtC,YAAY,OAAe,EAAE,aAAsC;QACjE,IAAI,cAAc,GAAG,OAAO,CAAA;QAC5B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAA;QAClC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;QAC5D,IAAI,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YAC1B,cAAc,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAE,CAAA;SACzC;QACD,IAAI,CAAC,OAAO;YACV,CAAC,cAAc,IAAI,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC;gBAC3C,CAAC,CAAC,cAAc;gBAChB,CAAC,CAAC,cAAc,GAAG,GAAG,CAAA;IAC5B,CAAC;IAED,mBAAmB,CAAC,OAA6B;QAC/C,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAA;IAC3E,CAAC;CACF\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/infrastructure/services/struct/remoteStructServiceProvider.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { ServiceMode, StructService, StructServiceOptions, StructServiceProvider } from \"../../../domain/services\";\r\nexport declare class RemoteStructServiceProvider implements StructServiceProvider {\r\n    private readonly apiPath;\r\n    mode: ServiceMode;\r\n    customHeaders?: Record<string, string>;\r\n    constructor(apiPath: string, customHeaders?: Record<string, string>);\r\n    createStructService(options: StructServiceOptions): StructService;\r\n}\r\n"}}
