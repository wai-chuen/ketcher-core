{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Highlight } from \"../../../domain/entities\";\r\nimport { BaseOperation } from './base';\r\nimport { OperationType } from './OperationType';\r\nexport class HighlightAdd extends BaseOperation {\r\n    data;\r\n    constructor(atoms, bonds, color, highlightId) {\r\n        super(OperationType.ADD_HIGHLIGHT);\r\n        this.data = {\r\n            atoms: atoms,\r\n            bonds: bonds,\r\n            color: color,\r\n            highlightId: highlightId\r\n        };\r\n    }\r\n    execute(restruct) {\r\n        const { atoms, bonds, color } = this.data;\r\n        if (!color) {\r\n            return;\r\n        }\r\n        const struct = restruct.molecule;\r\n        const highlight = new Highlight({\r\n            atoms,\r\n            bonds,\r\n            color\r\n        });\r\n        if (typeof this.data.highlightId !== 'number') {\r\n            this.data.highlightId = struct.highlights.add(highlight);\r\n        }\r\n        else {\r\n            struct.highlights.set(this.data.highlightId, highlight);\r\n        }\r\n        notifyChanged(restruct, atoms, bonds);\r\n    }\r\n    invert() {\r\n        const { atoms, bonds, color, highlightId } = this.data;\r\n        const inverted = new HighlightDelete(highlightId, atoms, bonds, color);\r\n        return inverted;\r\n    }\r\n}\r\nexport class HighlightDelete extends BaseOperation {\r\n    data;\r\n    constructor(highlightId, atoms, bonds, color) {\r\n        super(OperationType.REMOVE_HIGHLIGHT, 5);\r\n        this.data = {\r\n            highlightId: highlightId,\r\n            atoms: atoms || [],\r\n            bonds: bonds || [],\r\n            color: color || 'white'\r\n        };\r\n    }\r\n    execute(restruct) {\r\n        if (typeof this.data.highlightId === 'number') {\r\n            const struct = restruct.molecule;\r\n            const highlightToRemove = struct.highlights.get(this.data.highlightId);\r\n            if (typeof highlightToRemove === 'undefined') {\r\n                return;\r\n            }\r\n            const { atoms, bonds, color } = highlightToRemove;\r\n            this.data.atoms = atoms;\r\n            this.data.bonds = bonds;\r\n            this.data.color = color;\r\n            struct.highlights.delete(this.data.highlightId);\r\n            notifyChanged(restruct, atoms, bonds);\r\n        }\r\n    }\r\n    invert() {\r\n        const { atoms, bonds, color, highlightId } = this.data;\r\n        const inverted = new HighlightAdd(atoms, bonds, color, highlightId);\r\n        inverted.data = this.data;\r\n        return inverted;\r\n    }\r\n}\r\nexport class HighlightUpdate extends BaseOperation {\r\n    // making sure highlightId is not optional\r\n    newData;\r\n    oldData;\r\n    constructor(highlightId, atoms, bonds, color) {\r\n        super(OperationType.UPDATE_HIGHLIGHT);\r\n        this.newData = {\r\n            atoms: atoms,\r\n            bonds: bonds,\r\n            color: color,\r\n            highlightId: highlightId\r\n        };\r\n        // pre-filling with new data. Upon execution this will be replaced\r\n        this.oldData = {\r\n            atoms: atoms,\r\n            bonds: bonds,\r\n            color: color,\r\n            highlightId: highlightId\r\n        };\r\n    }\r\n    execute(restruct) {\r\n        const { atoms, bonds, color } = this.newData;\r\n        if (!color) {\r\n            return;\r\n        }\r\n        const highlightId = this.newData.highlightId;\r\n        const struct = restruct.molecule;\r\n        const highlightToUpdate = struct.highlights.get(highlightId);\r\n        if (highlightToUpdate) {\r\n            // saving data of existing highlight\r\n            const { atoms: oldAtoms, bonds: oldBonds, color: oldColor } = highlightToUpdate;\r\n            this.oldData = {\r\n                atoms: oldAtoms,\r\n                bonds: oldBonds,\r\n                color: oldColor,\r\n                highlightId\r\n            };\r\n            // creating new highlight with new data\r\n            const updatedHighlight = new Highlight({\r\n                atoms,\r\n                bonds,\r\n                color\r\n            });\r\n            // setting the new highlight\r\n            struct.highlights.set(this.newData.highlightId, updatedHighlight);\r\n            // notify atoms from both collections that repaint is needed\r\n            notifyChanged(restruct, [...atoms, ...oldAtoms], [...bonds, ...oldBonds]);\r\n        }\r\n    }\r\n    invert() {\r\n        const { atoms, bonds, color } = this.oldData;\r\n        const inverted = new HighlightUpdate(this.newData.highlightId, atoms, bonds, color);\r\n        return inverted;\r\n    }\r\n}\r\nfunction notifyChanged(restruct, atoms, bonds) {\r\n    // Notifying ReStruct that repaint needed\r\n    const reAtoms = restruct.atoms;\r\n    const reBonds = restruct.bonds;\r\n    if (atoms) {\r\n        atoms.forEach((atomId) => {\r\n            if (typeof reAtoms.get(atomId) !== 'undefined') {\r\n                restruct.markAtom(atomId, 1);\r\n            }\r\n        });\r\n    }\r\n    if (bonds) {\r\n        bonds.forEach((bondId) => {\r\n            if (typeof reBonds.get(bondId) !== 'undefined') {\r\n                restruct.markBond(bondId, 1);\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=highlight.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/base.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/OperationType.ts"],"map":"{\"version\":3,\"file\":\"highlight.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/application/editor/operations/highlight.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/operations/highlight.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { ReStruct } from '../../render';\r\nimport { BaseOperation } from './base';\r\ndeclare type Data = {\r\n    atoms: Array<number>;\r\n    bonds: Array<number>;\r\n    color: string;\r\n    highlightId?: number;\r\n};\r\nexport declare class HighlightAdd extends BaseOperation {\r\n    data: Data;\r\n    constructor(atoms: Array<number>, bonds: Array<number>, color: string, highlightId?: number);\r\n    execute(restruct: ReStruct): void;\r\n    invert(): HighlightDelete;\r\n}\r\nexport declare class HighlightDelete extends BaseOperation {\r\n    data: Data;\r\n    constructor(highlightId?: number, atoms?: Array<number>, bonds?: Array<number>, color?: string);\r\n    execute(restruct: ReStruct): void;\r\n    invert(): HighlightAdd;\r\n}\r\nexport declare class HighlightUpdate extends BaseOperation {\r\n    newData: Data & {\r\n        highlightId: number;\r\n    };\r\n    oldData: Data & {\r\n        highlightId: number;\r\n    };\r\n    constructor(highlightId: number, atoms: Array<number>, bonds: Array<number>, color: string);\r\n    execute(restruct: ReStruct): void;\r\n    invert(): HighlightUpdate;\r\n}\r\nexport {};\r\n"}}
