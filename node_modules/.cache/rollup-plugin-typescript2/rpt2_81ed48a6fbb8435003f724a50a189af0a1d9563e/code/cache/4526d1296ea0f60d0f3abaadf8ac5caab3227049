{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { FormatterFactory, SupportedFormat, identifyStructFormat } from './formatters';\r\nimport { Indigo } from \"./indigo\";\r\nimport { KetSerializer } from \"../domain/serializers\";\r\nimport assert from 'assert';\r\nimport { EventEmitter } from 'events';\r\nimport { runAsyncAction } from \"../utilities\";\r\nconst allowedApiSettings = {\r\n    'general.dearomatize-on-load': 'dearomatize-on-load',\r\n    ignoreChiralFlag: 'ignoreChiralFlag'\r\n};\r\nasync function prepareStructToRender(structStr, structService, ketcherInstance) {\r\n    const struct = await parseStruct(structStr, structService, ketcherInstance);\r\n    struct.initHalfBonds();\r\n    struct.initNeighbors();\r\n    struct.setImplicitHydrogen();\r\n    struct.markFragments();\r\n    return struct;\r\n}\r\nfunction parseStruct(structStr, structService, ketcherInstance) {\r\n    const format = identifyStructFormat(structStr);\r\n    const factory = new FormatterFactory(structService);\r\n    const options = ketcherInstance.editor.options();\r\n    const service = factory.create(format, {\r\n        'dearomatize-on-load': options['dearomatize-on-load'],\r\n        'ignore-no-chiral-flag': options.ignoreChiralFlag\r\n    });\r\n    return service.getStructureFromStringAsync(structStr);\r\n}\r\nfunction getStructure(structureFormat = SupportedFormat.rxn, formatterFactory, struct) {\r\n    const formatter = formatterFactory.create(structureFormat);\r\n    return formatter.getStructureFromStructAsync(struct);\r\n}\r\nexport class Ketcher {\r\n    #structService;\r\n    #formatterFactory;\r\n    #editor;\r\n    #indigo;\r\n    #eventBus;\r\n    get editor() {\r\n        return this.#editor;\r\n    }\r\n    get eventBus() {\r\n        return this.#eventBus;\r\n    }\r\n    constructor(editor, structService, formatterFactory) {\r\n        assert(editor != null);\r\n        assert(structService != null);\r\n        assert(formatterFactory != null);\r\n        this.#editor = editor;\r\n        this.#structService = structService;\r\n        this.#formatterFactory = formatterFactory;\r\n        this.#indigo = new Indigo(this.#structService);\r\n        this.#eventBus = new EventEmitter();\r\n    }\r\n    get indigo() {\r\n        return this.#indigo;\r\n    }\r\n    // TEMP.: getting only dearomatize-on-load setting\r\n    get settings() {\r\n        const options = this.#editor.options();\r\n        const result = Object.entries(allowedApiSettings).reduce((acc, [apiSetting, clientSetting]) => {\r\n            if (clientSetting in options) {\r\n                return { ...acc, [apiSetting]: clientSetting };\r\n            }\r\n            return acc;\r\n        }, {});\r\n        if (!Object.keys(result).length) {\r\n            throw new Error('Allowed options are not provided');\r\n        }\r\n        return result;\r\n    }\r\n    // TODO: create optoions type\r\n    setSettings(settings) {\r\n        // TODO: need to expand this and refactor this method\r\n        if (!settings) {\r\n            throw new Error('Please provide settings');\r\n        }\r\n        const options = {};\r\n        for (const [apiSetting, clientSetting] of Object.entries(allowedApiSettings)) {\r\n            options[clientSetting] = settings[apiSetting];\r\n        }\r\n        return this.#editor.setOptions(JSON.stringify(options));\r\n    }\r\n    getSmiles(isExtended = false) {\r\n        const format = isExtended\r\n            ? SupportedFormat.smilesExt\r\n            : SupportedFormat.smiles;\r\n        return getStructure(format, this.#formatterFactory, this.editor.struct());\r\n    }\r\n    async getMolfile(molfileFormat) {\r\n        if (this.containsReaction()) {\r\n            throw Error('The structure cannot be saved as *.MOL due to reaction arrrows.');\r\n        }\r\n        const formatPassed = molfileFormat === 'v3000' ? SupportedFormat.molV3000 : SupportedFormat.mol;\r\n        const format = molfileFormat ? formatPassed : SupportedFormat.molAuto;\r\n        const molfile = await getStructure(format, this.#formatterFactory, this.#editor.struct());\r\n        return molfile;\r\n    }\r\n    async getRxn(molfileFormat = 'v2000') {\r\n        if (!this.containsReaction()) {\r\n            throw Error('The structure cannot be saved as *.RXN: there is no reaction arrows.');\r\n        }\r\n        const format = molfileFormat === 'v3000' ? SupportedFormat.rxnV3000 : SupportedFormat.rxn;\r\n        const rxnfile = await getStructure(format, this.#formatterFactory, this.#editor.struct());\r\n        return rxnfile;\r\n    }\r\n    getKet() {\r\n        return getStructure(SupportedFormat.ket, this.#formatterFactory, this.#editor.struct());\r\n    }\r\n    getSmarts() {\r\n        return getStructure(SupportedFormat.smarts, this.#formatterFactory, this.#editor.struct());\r\n    }\r\n    getCml() {\r\n        return getStructure(SupportedFormat.cml, this.#formatterFactory, this.#editor.struct());\r\n    }\r\n    getInchi(withAuxInfo = false) {\r\n        return getStructure(withAuxInfo ? SupportedFormat.inChIAuxInfo : SupportedFormat.inChI, this.#formatterFactory, this.#editor.struct());\r\n    }\r\n    async generateInchIKey() {\r\n        const struct = await getStructure(SupportedFormat.ket, this.#formatterFactory, this.#editor.struct());\r\n        return this.#structService.generateInchIKey(struct);\r\n    }\r\n    containsReaction() {\r\n        return this.editor.struct().hasRxnArrow();\r\n    }\r\n    async setMolecule(structStr) {\r\n        runAsyncAction(async () => {\r\n            assert(typeof structStr === 'string');\r\n            const struct = await prepareStructToRender(structStr, this.#structService, this);\r\n            this.#editor.struct(struct);\r\n        }, this.eventBus);\r\n    }\r\n    async addFragment(structStr) {\r\n        runAsyncAction(async () => {\r\n            assert(typeof structStr === 'string');\r\n            const struct = await prepareStructToRender(structStr, this.#structService, this);\r\n            this.#editor.structToAddFragment(struct);\r\n        }, this.eventBus);\r\n    }\r\n    async layout() {\r\n        runAsyncAction(async () => {\r\n            const struct = await this.#indigo.layout(this.#editor.struct());\r\n            const ketSerializer = new KetSerializer();\r\n            this.setMolecule(ketSerializer.serialize(struct));\r\n        }, this.eventBus);\r\n    }\r\n    recognize(image, version) {\r\n        return this.#indigo.recognize(image, { version: version });\r\n    }\r\n    async generateImage(data, options = { outputFormat: 'png' }) {\r\n        let meta = '';\r\n        switch (options.outputFormat) {\r\n            case 'svg':\r\n                meta = 'image/svg+xml';\r\n                break;\r\n            case 'png':\r\n            default:\r\n                meta = 'image/png';\r\n                options.outputFormat = 'png';\r\n        }\r\n        const base64 = await this.#structService.generateImageAsBase64(data, options);\r\n        const byteCharacters = atob(base64);\r\n        const byteNumbers = new Array(byteCharacters.length);\r\n        for (let i = 0; i < byteCharacters.length; i++) {\r\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n        }\r\n        const byteArray = new Uint8Array(byteNumbers);\r\n        const blob = new Blob([byteArray], { type: meta });\r\n        return blob;\r\n    }\r\n}\r\n//# sourceMappingURL=ketcher.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/formatters/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/services/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/indigo.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/node_modules/assert/build/assert.js","/usr/local/google/home/waich/workspace/ketcher/node_modules/events/events.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/utilities/index.ts"],"map":"{\"version\":3,\"file\":\"ketcher.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/application/ketcher.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/ketcher.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\n/// <reference types=\"node\" />\r\nimport { FormatterFactory } from './formatters';\r\nimport { GenerateImageOptions, StructService } from \"../domain/services\";\r\nimport { Editor } from './editor';\r\nimport { Indigo } from \"./indigo\";\r\nimport { MolfileFormat } from \"../domain/serializers\";\r\nimport { Struct } from \"../domain/entities\";\r\nimport { EventEmitter } from 'events';\r\nexport declare class Ketcher {\r\n    #private;\r\n    get editor(): Editor;\r\n    get eventBus(): EventEmitter;\r\n    constructor(editor: Editor, structService: StructService, formatterFactory: FormatterFactory);\r\n    get indigo(): Indigo;\r\n    get settings(): {};\r\n    setSettings(settings: Record<string, string>): any;\r\n    getSmiles(isExtended?: boolean): Promise<string>;\r\n    getMolfile(molfileFormat?: MolfileFormat): Promise<string>;\r\n    getRxn(molfileFormat?: MolfileFormat): Promise<string>;\r\n    getKet(): Promise<string>;\r\n    getSmarts(): Promise<string>;\r\n    getCml(): Promise<string>;\r\n    getInchi(withAuxInfo?: boolean): Promise<string>;\r\n    generateInchIKey(): Promise<string>;\r\n    containsReaction(): boolean;\r\n    setMolecule(structStr: string): Promise<void>;\r\n    addFragment(structStr: string): Promise<void>;\r\n    layout(): Promise<void>;\r\n    recognize(image: Blob, version?: string): Promise<Struct>;\r\n    generateImage(data: string, options?: GenerateImageOptions): Promise<Blob>;\r\n}\r\n"}}
