{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nexport class Pool extends Map {\r\n    nextId = 0;\r\n    add(item) {\r\n        const id = this.nextId++;\r\n        super.set(id, item);\r\n        return id;\r\n    }\r\n    newId() {\r\n        return this.nextId++;\r\n    }\r\n    keyOf(item) {\r\n        for (const [key, value] of this.entries()) {\r\n            if (value === item)\r\n                return key;\r\n        }\r\n        return null;\r\n    }\r\n    find(predicate) {\r\n        for (const [key, value] of this.entries()) {\r\n            if (predicate(key, value))\r\n                return key;\r\n        }\r\n        return null;\r\n    }\r\n    filter(predicate) {\r\n        return new Pool(Array.from(this).filter(([key, value]) => predicate(key, value)));\r\n    }\r\n    some(predicate) {\r\n        for (const value of this.values()) {\r\n            if (predicate(value)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n//# sourceMappingURL=pool.js.map","references":[],"map":"{\"version\":3,\"file\":\"pool.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/domain/entities/pool.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,MAAM,OAAO,IAAmB,SAAQ,GAAmB;IACjD,MAAM,GAAG,CAAC,CAAA;IAElB,GAAG,CAAC,IAAY;QACd,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAA;QACxB,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnB,OAAO,EAAE,CAAA;IACX,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,MAAM,EAAE,CAAA;IACtB,CAAC;IAED,KAAK,CAAC,IAAY;QAChB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YACzC,IAAI,KAAK,KAAK,IAAI;gBAAE,OAAO,GAAG,CAAA;SAC/B;QAED,OAAO,IAAI,CAAA;IACb,CAAC;IAED,IAAI,CAAC,SAAkD;QACrD,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YACzC,IAAI,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC;gBAAE,OAAO,GAAG,CAAA;SACtC;QAED,OAAO,IAAI,CAAA;IACb,CAAC;IAED,MAAM,CAAC,SAAkD;QACvD,OAAO,IAAI,IAAI,CACb,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CACjE,CAAA;IACH,CAAC;IAED,IAAI,CAAC,SAAqC;QACxC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;YACjC,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;gBACpB,OAAO,IAAI,CAAA;aACZ;SACF;QAED,OAAO,KAAK,CAAA;IACd,CAAC;CACF\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/entities/pool.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nexport declare class Pool<TValue = any> extends Map<number, TValue> {\r\n    private nextId;\r\n    add(item: TValue): number;\r\n    newId(): number;\r\n    keyOf(item: TValue): number | null;\r\n    find(predicate: (key: number, value: TValue) => boolean): number | null;\r\n    filter(predicate: (key: number, value: TValue) => boolean): Pool<TValue>;\r\n    some(predicate: (value: TValue) => boolean): boolean;\r\n}\r\n"}}
