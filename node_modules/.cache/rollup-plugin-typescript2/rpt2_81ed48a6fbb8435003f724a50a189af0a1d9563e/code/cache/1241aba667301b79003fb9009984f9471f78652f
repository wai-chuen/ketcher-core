{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nexport class Pile extends Set {\r\n    // TODO: it's used only in dfs.js in one place in some strange way.\r\n    // Should be removed after dfs.js refactoring\r\n    find(predicate) {\r\n        for (const item of this) {\r\n            if (predicate(item))\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n    equals(setB) {\r\n        return this.isSuperset(setB) && setB.isSuperset(this);\r\n    }\r\n    isSuperset(subset) {\r\n        for (const item of subset) {\r\n            if (!this.has(item))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    filter(expression) {\r\n        return new Pile(Array.from(this).filter(expression));\r\n    }\r\n    union(setB) {\r\n        const union = new Pile(this);\r\n        for (const item of setB)\r\n            union.add(item);\r\n        return union;\r\n    }\r\n    intersection(setB) {\r\n        const thisSet = new Pile(this);\r\n        return new Pile([...thisSet].filter((item) => setB.has(item)));\r\n    }\r\n    /**\r\n     * Union multiple sets which have intersections\r\n     * @example ```\r\n     * const setA = new Pile([0, 1])\r\n     * const setB = new Pile([1, 2])\r\n     * const setC = new Pile([2, 3])\r\n     * const setD = new Pile([4, 5])\r\n     * console.log(Pile.unionMultiple([setA, setB, setC, setD]))\r\n     * // [{0, 1, 2, 3}, {4, 5}]\r\n     * ```\r\n     */\r\n    static unionIntersections(sets) {\r\n        let unionized = false;\r\n        // Union two of sets\r\n        const setsToReturn = sets.reduce((prevSets, curSet) => {\r\n            let isCurSetMerged = false;\r\n            const newSets = prevSets.map((set) => {\r\n                const intersec = set.intersection(curSet);\r\n                if (intersec.size > 0) {\r\n                    unionized = true;\r\n                    isCurSetMerged = true;\r\n                    return set.union(curSet);\r\n                }\r\n                return set;\r\n            });\r\n            if (!isCurSetMerged)\r\n                newSets.push(curSet);\r\n            return newSets;\r\n        }, new Array());\r\n        // Recursively union two of sets === union all sets\r\n        return unionized ? Pile.unionIntersections(setsToReturn) : setsToReturn;\r\n    }\r\n}\r\n//# sourceMappingURL=pile.js.map","references":[],"map":"{\"version\":3,\"file\":\"pile.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/domain/entities/pile.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,MAAM,OAAO,IAAmB,SAAQ,GAAW;IACjD,mEAAmE;IACnE,6CAA6C;IAC7C,IAAI,CAAC,SAAoC;QACvC,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACvB,IAAI,SAAS,CAAC,IAAI,CAAC;gBAAE,OAAO,IAAI,CAAA;SACjC;QAED,OAAO,IAAI,CAAA;IACb,CAAC;IAED,MAAM,CAAC,IAAU;QACf,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;IACvD,CAAC;IAED,UAAU,CAAC,MAAY;QACrB,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE;YACzB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;gBAAE,OAAO,KAAK,CAAA;SAClC;QAED,OAAO,IAAI,CAAA;IACb,CAAC;IAED,MAAM,CAAC,UAAoC;QACzC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;IACtD,CAAC;IAED,KAAK,CAAC,IAAU;QACd,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAA;QAE5B,KAAK,MAAM,IAAI,IAAI,IAAI;YAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QAExC,OAAO,KAAK,CAAA;IACd,CAAC;IAED,YAAY,CAAC,IAAU;QACrB,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9B,OAAO,IAAI,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAChE,CAAC;IAED;;;;;;;;;;OAUG;IACH,MAAM,CAAC,kBAAkB,CAAI,IAAoB;QAC/C,IAAI,SAAS,GAAG,KAAK,CAAA;QAErB,oBAAoB;QACpB,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE;YACpD,IAAI,cAAc,GAAG,KAAK,CAAA;YAE1B,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;gBACnC,MAAM,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;gBACzC,IAAI,QAAQ,CAAC,IAAI,GAAG,CAAC,EAAE;oBACrB,SAAS,GAAG,IAAI,CAAA;oBAChB,cAAc,GAAG,IAAI,CAAA;oBACrB,OAAO,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;iBACzB;gBACD,OAAO,GAAG,CAAA;YACZ,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,cAAc;gBAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACzC,OAAO,OAAO,CAAA;QAChB,CAAC,EAAE,IAAI,KAAK,EAAW,CAAC,CAAA;QAExB,mDAAmD;QACnD,OAAO,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAA;IACzE,CAAC;CACF\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/entities/pile.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nexport declare class Pile<TValue = any> extends Set<TValue> {\r\n    find(predicate: (item: TValue) => boolean): TValue | null;\r\n    equals(setB: Pile): boolean;\r\n    isSuperset(subset: Pile): boolean;\r\n    filter(expression: (arg: TValue) => boolean): Pile<TValue>;\r\n    union(setB: Pile): Pile<TValue>;\r\n    intersection(setB: Pile): Pile<TValue>;\r\n    /**\r\n     * Union multiple sets which have intersections\r\n     * @example ```\r\n     * const setA = new Pile([0, 1])\r\n     * const setB = new Pile([1, 2])\r\n     * const setC = new Pile([2, 3])\r\n     * const setD = new Pile([4, 5])\r\n     * console.log(Pile.unionMultiple([setA, setB, setC, setD]))\r\n     * // [{0, 1, 2, 3}, {4, 5}]\r\n     * ```\r\n     */\r\n    static unionIntersections<T>(sets: Array<Pile<T>>): Array<Pile<T>>;\r\n}\r\n"}}
