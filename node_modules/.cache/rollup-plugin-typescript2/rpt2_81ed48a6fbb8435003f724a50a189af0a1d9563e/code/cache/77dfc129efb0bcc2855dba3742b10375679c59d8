{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Box2Abs, FunctionalGroup, Pile, Pool, Struct } from \"../../../domain/entities\";\r\nimport { LayerMap } from './generalEnumTypes';\r\nimport ReAtom from './reatom';\r\nimport ReBond from './rebond';\r\nimport ReDataSGroupData from './redatasgroupdata';\r\nimport ReEnhancedFlag from './reenhancedFlag';\r\nimport ReFrag from './refrag';\r\nimport ReLoop from './reloop';\r\nimport ReRGroup from './rergroup';\r\nimport ReRxnArrow from './rerxnarrow';\r\nimport ReRxnPlus from './rerxnplus';\r\nimport ReSGroup from './resgroup';\r\nimport ReSimpleObject from './resimpleObject';\r\nimport ReText from './retext';\r\nimport util from '../util';\r\nclass ReStruct {\r\n    static maps = {\r\n        atoms: ReAtom,\r\n        bonds: ReBond,\r\n        rxnPluses: ReRxnPlus,\r\n        rxnArrows: ReRxnArrow,\r\n        frags: ReFrag,\r\n        rgroups: ReRGroup,\r\n        sgroupData: ReDataSGroupData,\r\n        enhancedFlags: ReEnhancedFlag,\r\n        sgroups: ReSGroup,\r\n        reloops: ReLoop,\r\n        simpleObjects: ReSimpleObject,\r\n        texts: ReText\r\n    };\r\n    render;\r\n    molecule;\r\n    atoms = new Map();\r\n    bonds = new Map();\r\n    reloops = new Map();\r\n    rxnPluses = new Map();\r\n    rxnArrows = new Map();\r\n    frags = new Pool();\r\n    rgroups = new Pool();\r\n    sgroups = new Map();\r\n    sgroupData = new Map();\r\n    enhancedFlags = new Map();\r\n    simpleObjects = new Map();\r\n    texts = new Map();\r\n    initialized = false;\r\n    layers = [];\r\n    connectedComponents = new Pool();\r\n    ccFragmentType = new Pool();\r\n    structChanged = false;\r\n    atomsChanged = new Map();\r\n    simpleObjectsChanged = new Map();\r\n    rxnArrowsChanged = new Map();\r\n    rxnPlusesChanged = new Map();\r\n    enhancedFlagsChanged = new Map();\r\n    bondsChanged = new Map();\r\n    textsChanged = new Map();\r\n    constructor(molecule, render) {\r\n        // eslint-disable-line max-statements\r\n        this.render = render;\r\n        this.molecule = molecule || new Struct();\r\n        this.initLayers();\r\n        this.clearMarks();\r\n        // TODO: eachItem ?\r\n        molecule.atoms.forEach((atom, aid) => {\r\n            this.atoms.set(aid, new ReAtom(atom));\r\n        });\r\n        molecule.bonds.forEach((bond, bid) => {\r\n            this.bonds.set(bid, new ReBond(bond));\r\n        });\r\n        molecule.loops.forEach((loop, lid) => {\r\n            this.reloops.set(lid, new ReLoop(loop));\r\n        });\r\n        molecule.rxnPluses.forEach((item, id) => {\r\n            this.rxnPluses.set(id, new ReRxnPlus(item));\r\n        });\r\n        molecule.rxnArrows.forEach((item, id) => {\r\n            this.rxnArrows.set(id, new ReRxnArrow(item));\r\n        });\r\n        molecule.simpleObjects.forEach((item, id) => {\r\n            this.simpleObjects.set(id, new ReSimpleObject(item));\r\n        });\r\n        molecule.texts.forEach((item, id) => {\r\n            this.texts.set(id, new ReText(item));\r\n        });\r\n        molecule.frags.forEach((item, id) => {\r\n            this.frags.set(id, new ReFrag(item));\r\n            if (item)\r\n                this.enhancedFlags.set(id, new ReEnhancedFlag());\r\n        });\r\n        molecule.rgroups.forEach((item, id) => {\r\n            this.rgroups.set(id, new ReRGroup(item));\r\n        });\r\n        molecule.sgroups.forEach((item, id) => {\r\n            this.sgroups.set(id, new ReSGroup(item));\r\n            if (item.type === 'DAT' && !item.data.attached) {\r\n                this.sgroupData.set(id, new ReDataSGroupData(item));\r\n            } // [MK] sort of a hack, we use the SGroup id for the data field id\r\n            if (FunctionalGroup.isFunctionalGroup(item)) {\r\n                this.molecule.functionalGroups.set(id, new FunctionalGroup(item));\r\n            }\r\n        });\r\n    }\r\n    connectedComponentRemoveAtom(aid, reAtom) {\r\n        const atom = reAtom || this.atoms.get(aid);\r\n        if (!atom || atom.component < 0)\r\n            return;\r\n        const cc = this.connectedComponents.get(atom.component);\r\n        cc.delete(aid);\r\n        if (cc.size < 1)\r\n            this.connectedComponents.delete(atom.component);\r\n        atom.component = -1;\r\n    }\r\n    clearConnectedComponents() {\r\n        this.connectedComponents.clear();\r\n        this.atoms.forEach((atom) => {\r\n            atom.component = -1;\r\n        });\r\n    }\r\n    getConnectedComponent(aid, adjacentComponents) {\r\n        const list = Array.isArray(aid) ? Array.from(aid) : [aid];\r\n        const ids = new Pile();\r\n        while (list.length > 0) {\r\n            const aid = list.pop();\r\n            ids.add(aid);\r\n            const atom = this.atoms.get(aid);\r\n            if (!atom)\r\n                continue;\r\n            if (atom.component >= 0)\r\n                adjacentComponents.add(atom.component);\r\n            atom.a.neighbors.forEach((neighbor) => {\r\n                const halfBond = this.molecule.halfBonds.get(neighbor);\r\n                if (!halfBond)\r\n                    return;\r\n                const neiId = halfBond.end;\r\n                if (!ids.has(neiId))\r\n                    list.push(neiId);\r\n            });\r\n        }\r\n        return ids;\r\n    }\r\n    addConnectedComponent(idSet) {\r\n        const compId = this.connectedComponents.add(idSet);\r\n        const adjacentComponents = new Pile();\r\n        const aidSet = this.getConnectedComponent(Array.from(idSet), adjacentComponents);\r\n        adjacentComponents.delete(compId);\r\n        let type = -1;\r\n        aidSet.forEach((aid) => {\r\n            const atom = this.atoms.get(aid);\r\n            if (!atom)\r\n                return;\r\n            atom.component = compId;\r\n            if (atom.a.rxnFragmentType !== -1)\r\n                type = atom.a.rxnFragmentType;\r\n        });\r\n        this.ccFragmentType.set(compId, type);\r\n        return compId;\r\n    }\r\n    removeConnectedComponent(ccid) {\r\n        this.connectedComponents.get(ccid).forEach((aid) => {\r\n            const atom = this.atoms.get(aid);\r\n            if (atom)\r\n                atom.component = -1;\r\n        });\r\n        return this.connectedComponents.delete(ccid);\r\n    }\r\n    assignConnectedComponents() {\r\n        this.atoms.forEach((atom, aid) => {\r\n            if (atom.component >= 0)\r\n                return;\r\n            const adjacentComponents = new Pile();\r\n            const idSet = this.getConnectedComponent(aid, adjacentComponents);\r\n            adjacentComponents.forEach((ccid) => {\r\n                this.removeConnectedComponent(ccid);\r\n            });\r\n            this.addConnectedComponent(idSet);\r\n        });\r\n    }\r\n    initLayers() {\r\n        for (const group in LayerMap) {\r\n            this.layers[LayerMap[group]] = this.render.paper\r\n                .rect(0, 0, 10, 10)\r\n                .attr({\r\n                class: group + 'Layer',\r\n                fill: '#000',\r\n                opacity: '0.0'\r\n            })\r\n                .toFront();\r\n        }\r\n    }\r\n    addReObjectPath(group, visel, path, pos = null, visible = false) {\r\n        // eslint-disable-line max-params\r\n        if (!path || !this.layers[group].node.parentNode)\r\n            return;\r\n        const paths = Array.isArray(path) ? path : [path];\r\n        paths.forEach((path) => {\r\n            const offset = this.render.options.offset;\r\n            let bb = visible ? Box2Abs.fromRelBox(util.relBox(path.getBBox())) : null;\r\n            const ext = pos && bb ? bb.translate(pos.negated()) : null;\r\n            if (offset !== null) {\r\n                path.translateAbs(offset.x, offset.y);\r\n                bb = bb ? bb.translate(offset) : null;\r\n            }\r\n            visel.add(path, bb, ext);\r\n            path.insertBefore(this.layers[LayerMap[group]]);\r\n        });\r\n    }\r\n    clearMarks() {\r\n        Object.keys(ReStruct.maps).forEach((map) => {\r\n            this[map + 'Changed'] = new Map();\r\n        });\r\n        this.structChanged = false;\r\n    }\r\n    markItemRemoved() {\r\n        this.structChanged = true;\r\n    }\r\n    markBond(bid, mark) {\r\n        this.markItem('bonds', bid, mark);\r\n    }\r\n    markAtom(aid, mark) {\r\n        this.markItem('atoms', aid, mark);\r\n    }\r\n    markItem(map, id, mark) {\r\n        const mapChanged = this[map + 'Changed'];\r\n        const value = mapChanged.has(id) ? Math.max(mark, mapChanged.get(id)) : mark;\r\n        mapChanged.set(id, value);\r\n        if (this[map].has(id))\r\n            this.clearVisel(this[map].get(id).visel);\r\n    }\r\n    clearVisel(visel) {\r\n        visel.paths.forEach((path) => {\r\n            path.remove();\r\n        });\r\n        visel.clear();\r\n    }\r\n    eachItem(func) {\r\n        Object.keys(ReStruct.maps).forEach((map) => {\r\n            this[map].forEach(func);\r\n        });\r\n    }\r\n    getVBoxObj(selection) {\r\n        selection = selection || {};\r\n        if (isSelectionEmpty(selection)) {\r\n            Object.keys(ReStruct.maps).forEach((map) => {\r\n                selection[map] = Array.from(this[map].keys());\r\n            });\r\n        }\r\n        let vbox = null;\r\n        Object.keys(ReStruct.maps).forEach((map) => {\r\n            if (!selection[map])\r\n                return;\r\n            selection[map].forEach((id) => {\r\n                const box = this[map].get(id).getVBoxObj(this.render);\r\n                if (box)\r\n                    vbox = vbox ? Box2Abs.union(vbox, box) : box.clone();\r\n            });\r\n        });\r\n        vbox = vbox || new Box2Abs(0, 0, 0, 0);\r\n        return vbox;\r\n    }\r\n    translate(d) {\r\n        this.eachItem((item) => item.visel.translate(d));\r\n    }\r\n    scale(s) {\r\n        // NOTE: bounding boxes are not valid after scaling\r\n        this.eachItem((item) => scaleVisel(item.visel, s));\r\n    }\r\n    clearVisels() {\r\n        this.eachItem((item) => this.clearVisel(item.visel));\r\n    }\r\n    update(force) {\r\n        // eslint-disable-line max-statements\r\n        force = force || !this.initialized;\r\n        // check items to update\r\n        Object.keys(ReStruct.maps).forEach((map) => {\r\n            const mapChanged = this[map + 'Changed'];\r\n            if (force) {\r\n                this[map].forEach((_item, id) => mapChanged.set(id, 1));\r\n            }\r\n            else {\r\n                // check if some of the items marked are already gone\r\n                mapChanged.forEach((_value, id) => {\r\n                    if (!this[map].has(id))\r\n                        mapChanged.delete(id);\r\n                });\r\n            }\r\n        });\r\n        this.atomsChanged.forEach((_value, aid) => this.connectedComponentRemoveAtom(aid));\r\n        // clean up empty fragments\r\n        // TODO: fragment removal should be triggered by the action responsible for the fragment contents removal and form an operation of its own\r\n        const emptyFrags = this.frags.filter((fid, frag) => !frag.calcBBox(this.render.ctab, fid, this.render));\r\n        emptyFrags.forEach((frag, fid) => {\r\n            this.clearVisel(frag.visel);\r\n            this.frags.delete(fid);\r\n            this.molecule.frags.delete(fid);\r\n        });\r\n        Object.keys(ReStruct.maps).forEach((map) => {\r\n            const mapChanged = this[map + 'Changed'];\r\n            mapChanged.forEach((_value, id) => {\r\n                this.clearVisel(this[map].get(id).visel);\r\n                this.structChanged = this.structChanged || mapChanged.get(id) > 0;\r\n            });\r\n        });\r\n        // TODO: when to update sgroup?\r\n        this.sgroups.forEach((sgroup) => {\r\n            this.clearVisel(sgroup.visel);\r\n            sgroup.hovering = null;\r\n            sgroup.selectionPlate = null;\r\n        });\r\n        // TODO [RB] need to implement update-on-demand for fragments and r-groups\r\n        this.frags.forEach((frag) => {\r\n            this.clearVisel(frag.visel);\r\n        });\r\n        this.rgroups.forEach((rgroup) => {\r\n            this.clearVisel(rgroup.visel);\r\n        });\r\n        if (force) {\r\n            // clear and recreate all half-bonds\r\n            this.clearConnectedComponents();\r\n            this.molecule.initHalfBonds();\r\n            this.molecule.initNeighbors();\r\n        }\r\n        // only update half-bonds adjacent to atoms that have moved\r\n        const atomsChangedArray = Array.from(this.atomsChanged.keys());\r\n        this.molecule.updateHalfBonds(atomsChangedArray);\r\n        this.molecule.sortNeighbors(atomsChangedArray);\r\n        this.assignConnectedComponents();\r\n        this.initialized = true;\r\n        this.verifyLoops();\r\n        const updLoops = force || this.structChanged;\r\n        if (updLoops)\r\n            this.updateLoops();\r\n        this.showLabels();\r\n        this.showBonds();\r\n        if (updLoops)\r\n            this.showLoops();\r\n        this.showReactionSymbols();\r\n        this.showSGroups();\r\n        this.showFragments();\r\n        this.showRGroups();\r\n        this.showEnhancedFlags();\r\n        this.showSimpleObjects();\r\n        this.showTexts();\r\n        this.clearMarks();\r\n        return true;\r\n    }\r\n    updateLoops() {\r\n        this.reloops.forEach((reloop) => {\r\n            this.clearVisel(reloop.visel);\r\n        });\r\n        const ret = this.molecule.findLoops();\r\n        ret.bondsToMark.forEach((bid) => {\r\n            this.markBond(bid, 1);\r\n        });\r\n        ret.newLoops.forEach((loopId) => {\r\n            this.reloops.set(loopId, new ReLoop(this.molecule.loops.get(loopId)));\r\n        });\r\n    }\r\n    showLoops() {\r\n        const options = this.render.options;\r\n        this.reloops.forEach((reloop, rlid) => {\r\n            reloop.show(this, rlid, options);\r\n        });\r\n    }\r\n    showSimpleObjects() {\r\n        const options = this.render.options;\r\n        this.simpleObjectsChanged.forEach((_value, id) => {\r\n            const simpleObject = this.simpleObjects.get(id);\r\n            if (simpleObject)\r\n                simpleObject.show(this, options);\r\n        });\r\n    }\r\n    showTexts() {\r\n        const options = this.render.options;\r\n        this.textsChanged.forEach((_value, id) => {\r\n            const text = this.texts.get(id);\r\n            if (text)\r\n                text.show(this, id, options);\r\n        });\r\n    }\r\n    showReactionSymbols() {\r\n        const options = this.render.options;\r\n        this.rxnArrowsChanged.forEach((_value, id) => {\r\n            const arrow = this.rxnArrows.get(id);\r\n            if (arrow)\r\n                arrow.show(this, id, options);\r\n        });\r\n        this.rxnPlusesChanged.forEach((_value, id) => {\r\n            const plus = this.rxnPluses.get(id);\r\n            if (plus)\r\n                plus.show(this, id, options);\r\n        });\r\n    }\r\n    showSGroups() {\r\n        this.molecule.sGroupForest\r\n            .getSGroupsBFS()\r\n            .reverse()\r\n            .forEach((id) => {\r\n            const resgroup = this.sgroups.get(id);\r\n            if (!resgroup)\r\n                return;\r\n            resgroup.show(this);\r\n        });\r\n    }\r\n    showFragments() {\r\n        this.frags.forEach((frag, id) => {\r\n            const path = frag.draw(this.render, id);\r\n            if (path) {\r\n                this.addReObjectPath(LayerMap.data, frag.visel, path, null, true);\r\n            }\r\n            // TODO fragment selection & highlighting\r\n        });\r\n    }\r\n    showRGroups() {\r\n        const options = this.render.options;\r\n        this.rgroups.forEach((rgroup, id) => {\r\n            rgroup.show(this, id, options);\r\n        });\r\n    }\r\n    loopRemove(loopId) {\r\n        const reloop = this.reloops.get(loopId);\r\n        if (!reloop) {\r\n            return;\r\n        }\r\n        this.clearVisel(reloop.visel);\r\n        const bondlist = [];\r\n        reloop.loop.hbs.forEach((hbid) => {\r\n            const hb = this.molecule.halfBonds.get(hbid);\r\n            if (!hb)\r\n                return;\r\n            hb.loop = -1;\r\n            this.markBond(hb.bid, 1);\r\n            this.markAtom(hb.begin, 1);\r\n            bondlist.push(hb.bid);\r\n        });\r\n        this.reloops.delete(loopId);\r\n        this.molecule.loops.delete(loopId);\r\n    }\r\n    verifyLoops() {\r\n        this.reloops.forEach((reloop, rlid) => {\r\n            if (!reloop.isValid(this.molecule, rlid))\r\n                this.loopRemove(rlid);\r\n        });\r\n    }\r\n    showLabels() {\r\n        // eslint-disable-line max-statements\r\n        const options = this.render.options;\r\n        this.atomsChanged.forEach((_value, aid) => {\r\n            const atom = this.atoms.get(aid);\r\n            if (atom)\r\n                atom.show(this, aid, options);\r\n        });\r\n    }\r\n    showEnhancedFlags() {\r\n        const options = this.render.options;\r\n        this.enhancedFlagsChanged.forEach((_value, chid) => {\r\n            const flag = this.enhancedFlags.get(chid);\r\n            if (flag)\r\n                flag.show(this, chid, options);\r\n        });\r\n    }\r\n    showBonds() {\r\n        // eslint-disable-line max-statements\r\n        const options = this.render.options;\r\n        this.bondsChanged.forEach((_value, bid) => {\r\n            const bond = this.bonds.get(bid);\r\n            if (bond) {\r\n                bond.show(this, bid, options);\r\n            }\r\n        });\r\n    }\r\n    setSelection(selection) {\r\n        const atoms = [];\r\n        Object.keys(ReStruct.maps).forEach((map) => {\r\n            const [mapValues] = this[map].values(); // hack to include ReSGroup, figure out better solution\r\n            if (ReStruct.maps[map].isSelectable() || mapValues instanceof ReSGroup) {\r\n                this[map].forEach((item, id) => {\r\n                    if (item instanceof ReAtom) {\r\n                        let sgroup;\r\n                        for (const sgId of item.a.sgs.values()) {\r\n                            sgroup = sgId;\r\n                        }\r\n                        atoms.push({\r\n                            selected: item.selected,\r\n                            sgroup: sgroup\r\n                        });\r\n                    }\r\n                    if (item instanceof ReSGroup &&\r\n                        FunctionalGroup.isContractedFunctionalGroup(item.item.id, this.molecule.functionalGroups)) {\r\n                        const sGroupAtoms = atoms.filter((atom) => atom.sgroup === item.item.id);\r\n                        item.selected = sGroupAtoms.length > 0 && sGroupAtoms[0].selected;\r\n                    }\r\n                    let selected = selection?.[map]\r\n                        ? selection[map].indexOf(id) > -1\r\n                        : item.selected;\r\n                    if (selection === null) {\r\n                        selected = false;\r\n                    }\r\n                    this.showItemSelection(item, selected);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    showItemSelection(item, selected) {\r\n        const exists = isSelectionSvgObjectExists(item);\r\n        // TODO: simplify me, who sets `removed`?\r\n        item.selected = selected;\r\n        if (item instanceof ReDataSGroupData)\r\n            item.sgroup.selected = selected;\r\n        if (selected) {\r\n            if (!exists) {\r\n                const render = this.render;\r\n                const options = render.options;\r\n                const paper = render.paper;\r\n                item.selectionPlate = item.makeSelectionPlate(this, paper, options);\r\n                this.addReObjectPath(LayerMap.selectionPlate, item.visel, item.selectionPlate);\r\n            }\r\n            if (item.selectionPlate)\r\n                item.selectionPlate.show(); // TODO [RB] review\r\n        }\r\n        else if (exists && item.selectionPlate) {\r\n            item.selectionPlate.hide(); // TODO [RB] review\r\n        }\r\n    }\r\n}\r\nfunction isSelectionEmpty(selection) {\r\n    if (!selection)\r\n        return true;\r\n    const anySelection = Object.keys(ReStruct.maps).some((map) => selection[map] && selection[map].length > 0);\r\n    return !anySelection;\r\n}\r\nfunction scaleRPath(path, scaleFactor) {\r\n    if (path.type === 'set') {\r\n        // TODO: rework scaling\r\n        for (let i = 0; i < path.length; ++i)\r\n            scaleRPath(path[i], scaleFactor);\r\n    }\r\n    else {\r\n        if (!(typeof path.attrs === 'undefined')) {\r\n            if ('font-size' in path.attrs) {\r\n                path.attr('font-size', path.attrs['font-size'] * scaleFactor);\r\n            }\r\n            else if ('stroke-width' in path.attrs) {\r\n                path.attr('stroke-width', path.attrs['stroke-width'] * scaleFactor);\r\n            }\r\n        }\r\n        path.scale(scaleFactor, scaleFactor, 0, 0);\r\n    }\r\n}\r\nfunction scaleVisel(visel, s) {\r\n    for (let i = 0; i < visel.paths.length; ++i)\r\n        scaleRPath(visel.paths[i], s);\r\n}\r\n/**\r\n * SelectionPlate could be an item then value would be in it\r\n * or it could be a set of items then removed value need to be check on at least one of items in set\r\n * @param item\r\n * @returns {boolean}\r\n */\r\nfunction isSelectionSvgObjectExists(item) {\r\n    return (item &&\r\n        item.selectionPlate !== null &&\r\n        ((!item.selectionPlate?.items && !item.selectionPlate?.removed) ||\r\n            (Array.isArray(item.selectionPlate?.items) &&\r\n                !item.selectionPlate[0]?.removed)));\r\n}\r\nexport default ReStruct;\r\n//# sourceMappingURL=restruct.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/generalEnumTypes.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/reatom.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/rebond.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/redatasgroupdata.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/reenhancedFlag.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/refrag.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/reloop.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/rergroup.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/rerxnarrow.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/rerxnplus.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/resgroup.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/resimpleObject.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/retext.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/raphaelRender.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/restruct/visel.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/render/util.ts"],"map":"{\"version\":3,\"file\":\"restruct.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/application/render/restruct/restruct.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/render/restruct/restruct.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Box2Abs, Pile, Pool, Struct, Vec2 } from \"../../../domain/entities\";\r\nimport { LayerMap } from './generalEnumTypes';\r\nimport ReAtom from './reatom';\r\nimport ReBond from './rebond';\r\nimport ReDataSGroupData from './redatasgroupdata';\r\nimport ReEnhancedFlag from './reenhancedFlag';\r\nimport ReFrag from './refrag';\r\nimport ReLoop from './reloop';\r\nimport ReRGroup from './rergroup';\r\nimport ReRxnArrow from './rerxnarrow';\r\nimport ReRxnPlus from './rerxnplus';\r\nimport ReSGroup from './resgroup';\r\nimport ReSimpleObject from './resimpleObject';\r\nimport ReText from './retext';\r\nimport { Render } from '../raphaelRender';\r\nimport Visel from './visel';\r\ndeclare class ReStruct {\r\n    static maps: {\r\n        atoms: typeof ReAtom;\r\n        bonds: typeof ReBond;\r\n        rxnPluses: typeof ReRxnPlus;\r\n        rxnArrows: typeof ReRxnArrow;\r\n        frags: typeof ReFrag;\r\n        rgroups: typeof ReRGroup;\r\n        sgroupData: typeof ReDataSGroupData;\r\n        enhancedFlags: typeof ReEnhancedFlag;\r\n        sgroups: typeof ReSGroup;\r\n        reloops: typeof ReLoop;\r\n        simpleObjects: typeof ReSimpleObject;\r\n        texts: typeof ReText;\r\n    };\r\n    render: Render;\r\n    molecule: Struct;\r\n    atoms: Map<number, ReAtom>;\r\n    bonds: Map<number, ReBond>;\r\n    reloops: Map<number, ReLoop>;\r\n    rxnPluses: Map<number, ReRxnPlus>;\r\n    rxnArrows: Map<number, ReRxnArrow>;\r\n    frags: Pool;\r\n    rgroups: Pool;\r\n    sgroups: Map<number, ReSGroup>;\r\n    sgroupData: Map<number, ReDataSGroupData>;\r\n    enhancedFlags: Map<number, ReEnhancedFlag>;\r\n    private simpleObjects;\r\n    texts: Map<number, ReText>;\r\n    private initialized;\r\n    private layers;\r\n    connectedComponents: Pool;\r\n    private ccFragmentType;\r\n    private structChanged;\r\n    private atomsChanged;\r\n    private simpleObjectsChanged;\r\n    private rxnArrowsChanged;\r\n    private rxnPlusesChanged;\r\n    private enhancedFlagsChanged;\r\n    private bondsChanged;\r\n    private textsChanged;\r\n    constructor(molecule: any, render: Render);\r\n    connectedComponentRemoveAtom(aid: number, reAtom?: ReAtom): void;\r\n    clearConnectedComponents(): void;\r\n    getConnectedComponent(aid: Array<number> | number, adjacentComponents: Pile): Pile;\r\n    addConnectedComponent(idSet: Pile<number>): number;\r\n    removeConnectedComponent(ccid: number): boolean;\r\n    assignConnectedComponents(): void;\r\n    initLayers(): void;\r\n    addReObjectPath(group: LayerMap, visel: Visel, path: any, pos?: Vec2 | null, visible?: boolean): void;\r\n    clearMarks(): void;\r\n    markItemRemoved(): void;\r\n    markBond(bid: number, mark: number): void;\r\n    markAtom(aid: number, mark: number): void;\r\n    markItem(map: string, id: number, mark: number): void;\r\n    clearVisel(visel: Visel): void;\r\n    eachItem(func: any): void;\r\n    getVBoxObj(selection?: any): Box2Abs | null;\r\n    translate(d: any): void;\r\n    scale(s: number): void;\r\n    clearVisels(): void;\r\n    update(force: boolean): boolean;\r\n    updateLoops(): void;\r\n    showLoops(): void;\r\n    showSimpleObjects(): void;\r\n    showTexts(): void;\r\n    showReactionSymbols(): void;\r\n    showSGroups(): void;\r\n    showFragments(): void;\r\n    showRGroups(): void;\r\n    loopRemove(loopId: number): void;\r\n    verifyLoops(): void;\r\n    showLabels(): void;\r\n    showEnhancedFlags(): void;\r\n    showBonds(): void;\r\n    setSelection(selection?: any): void;\r\n    showItemSelection(item: any, selected: any): void;\r\n}\r\nexport default ReStruct;\r\n"}}
