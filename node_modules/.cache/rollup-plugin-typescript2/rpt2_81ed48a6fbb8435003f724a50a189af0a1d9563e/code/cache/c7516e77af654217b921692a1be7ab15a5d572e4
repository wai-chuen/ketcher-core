{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { SupportedFormat } from './structFormatter.types';\r\nimport { getPropertiesByFormat } from './formatProperties';\r\nexport class ServerFormatter {\r\n    #structService;\r\n    #ketSerializer;\r\n    #format;\r\n    #options;\r\n    constructor(structService, ketSerializer, format, options) {\r\n        this.#structService = structService;\r\n        this.#ketSerializer = ketSerializer;\r\n        this.#format = format;\r\n        this.#options = options;\r\n    }\r\n    async getStructureFromStructAsync(struct) {\r\n        const formatProperties = getPropertiesByFormat(this.#format);\r\n        try {\r\n            const stringifiedStruct = this.#ketSerializer.serialize(struct);\r\n            const convertResult = await this.#structService.convert({\r\n                struct: stringifiedStruct,\r\n                output_format: formatProperties.mime\r\n            }, { ...this.#options, ...formatProperties.options });\r\n            return convertResult.struct;\r\n        }\r\n        catch (error) {\r\n            let message;\r\n            if (error.message === 'Server is not compatible') {\r\n                message = `${formatProperties.name} is not supported.`;\r\n            }\r\n            else {\r\n                message = `Convert error!\\n${error.message || error}`;\r\n            }\r\n            throw new Error(message);\r\n        }\r\n    }\r\n    async getStructureFromStringAsync(stringifiedStruct) {\r\n        let promise;\r\n        const data = {\r\n            struct: undefined,\r\n            output_format: getPropertiesByFormat(SupportedFormat.ket).mime\r\n        };\r\n        const withCoords = getPropertiesByFormat(this.#format).supportsCoords;\r\n        if (withCoords) {\r\n            promise = this.#structService.convert;\r\n            data.struct = stringifiedStruct;\r\n        }\r\n        else {\r\n            promise = this.#structService.layout;\r\n            data.struct = stringifiedStruct.trim();\r\n        }\r\n        try {\r\n            const result = await promise(data, this.#options);\r\n            const parsedStruct = this.#ketSerializer.deserialize(result.struct);\r\n            if (!withCoords) {\r\n                parsedStruct.rescale();\r\n            }\r\n            return parsedStruct;\r\n        }\r\n        catch (error) {\r\n            if (error.message !== 'Server is not compatible') {\r\n                throw Error(`Convert error!\\n${error.message || error}`);\r\n            }\r\n            const formatError = this.#format === 'smiles'\r\n                ? `${getPropertiesByFormat(SupportedFormat.smilesExt).name} and opening of ${getPropertiesByFormat(SupportedFormat.smiles).name}`\r\n                : getPropertiesByFormat(this.#format).name;\r\n            throw Error(`${formatError} is not supported in standalone mode.`);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=serverFormatter.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/services/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/formatters/structFormatter.types.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/formatters/formatProperties.ts"],"map":"{\"version\":3,\"file\":\"serverFormatter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/application/formatters/serverFormatter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/formatters/serverFormatter.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { StructService, StructServiceOptions } from \"../../domain/services\";\r\nimport { StructFormatter, SupportedFormat } from './structFormatter.types';\r\nimport { KetSerializer } from \"../../domain/serializers\";\r\nimport { Struct } from \"../../domain/entities\";\r\nexport declare class ServerFormatter implements StructFormatter {\r\n    #private;\r\n    constructor(structService: StructService, ketSerializer: KetSerializer, format: SupportedFormat, options?: StructServiceOptions);\r\n    getStructureFromStructAsync(struct: Struct): Promise<string>;\r\n    getStructureFromStringAsync(stringifiedStruct: string): Promise<Struct>;\r\n}\r\n"}}
