{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Atom, Bond, RGroup } from \"../../../domain/entities\";\r\nimport { AtomAdd, AtomAttr, AtomDelete, BondAdd, BondAttr, BondDelete, CalcImplicitH, FragmentAdd, FragmentAddStereoAtom, FragmentDelete, FragmentDeleteStereoAtom, SGroupAtomAdd } from '../operations';\r\nimport { atomGetAttr, atomGetDegree, atomGetSGroups } from './utils';\r\nimport { fromRGroupFragment, fromUpdateIfThen } from './rgroup';\r\nimport { removeAtomFromSgroupIfNeeded, removeSgroupIfNeeded } from './sgroup';\r\nimport { Action } from './action';\r\nimport { fromBondStereoUpdate } from './bond';\r\nimport { without } from 'lodash/fp';\r\nexport function fromAtomAddition(restruct, pos, atom) {\r\n    atom = Object.assign({}, atom);\r\n    const action = new Action();\r\n    atom.fragment = action.addOp(new FragmentAdd().perform(restruct)).frid;\r\n    const aid = action.addOp(new AtomAdd(atom, pos).perform(restruct)).data.aid;\r\n    action.addOp(new CalcImplicitH([aid]).perform(restruct));\r\n    return action;\r\n}\r\n/**\r\n * @param restruct { ReStruct }\r\n * @param ids { Array<number>|number }\r\n * @param attrs { object }\r\n * @param reset { boolean? }\r\n */\r\nexport function fromAtomsAttrs(restruct, ids, attrs, reset) {\r\n    const action = new Action();\r\n    const aids = Array.isArray(ids) ? ids : [ids];\r\n    aids.forEach((aid) => {\r\n        Object.keys(Atom.attrlist).forEach((key) => {\r\n            if (key === 'attpnt' && !(key in attrs))\r\n                return;\r\n            if (!(key in attrs) && !reset)\r\n                return;\r\n            const value = key in attrs ? attrs[key] : Atom.attrGetDefault(key);\r\n            switch (key) {\r\n                case 'stereoLabel':\r\n                    if (key in attrs && value) {\r\n                        action.addOp(new AtomAttr(aid, key, value).perform(restruct));\r\n                    }\r\n                    break;\r\n                case 'stereoParity':\r\n                    if (key in attrs && value) {\r\n                        action.addOp(new AtomAttr(aid, key, value).perform(restruct));\r\n                    }\r\n                    break;\r\n                default:\r\n                    action.addOp(new AtomAttr(aid, key, value).perform(restruct));\r\n                    break;\r\n            }\r\n        });\r\n        if (!reset &&\r\n            'label' in attrs &&\r\n            attrs.label !== null &&\r\n            attrs.label !== 'L#' &&\r\n            !('atomList' in attrs)) {\r\n            action.addOp(new AtomAttr(aid, 'atomList', null).perform(restruct));\r\n        }\r\n        action.addOp(new CalcImplicitH([aid]).perform(restruct));\r\n        const atomNeighbors = restruct.molecule.atomGetNeighbors(aid);\r\n        const bond = restruct.molecule.bonds.get(atomNeighbors[0]?.bid);\r\n        if (bond) {\r\n            action.mergeWith(fromBondStereoUpdate(restruct, bond));\r\n        }\r\n    });\r\n    return action;\r\n}\r\nexport function fromStereoAtomAttrs(restruct, aid, attrs, withReverse) {\r\n    const action = new Action();\r\n    const atom = restruct.molecule.atoms.get(aid);\r\n    if (atom) {\r\n        const frid = atom.fragment;\r\n        if ('stereoParity' in attrs) {\r\n            action.addOp(new AtomAttr(aid, 'stereoParity', attrs.stereoParity).perform(restruct));\r\n        }\r\n        if ('stereoLabel' in attrs) {\r\n            action.addOp(new AtomAttr(aid, 'stereoLabel', attrs.stereoLabel).perform(restruct));\r\n            if (attrs.stereoLabel === null) {\r\n                action.addOp(new FragmentDeleteStereoAtom(frid, aid).perform(restruct));\r\n            }\r\n            else {\r\n                action.addOp(new FragmentAddStereoAtom(frid, aid).perform(restruct));\r\n            }\r\n        }\r\n        if (withReverse)\r\n            action.operations.reverse();\r\n    }\r\n    return action;\r\n}\r\nexport function fromAtomsFragmentAttr(restruct, aids, newfrid) {\r\n    const action = new Action();\r\n    aids.forEach((aid) => {\r\n        const atom = restruct.molecule.atoms.get(aid);\r\n        const oldfrid = atom.fragment;\r\n        action.addOp(new AtomAttr(aid, 'fragment', newfrid));\r\n        if (atom.stereoLabel !== null) {\r\n            action.addOp(new FragmentAddStereoAtom(newfrid, aid));\r\n            action.addOp(new FragmentDeleteStereoAtom(oldfrid, aid));\r\n        }\r\n    });\r\n    return action.perform(restruct);\r\n}\r\n/**\r\n * @param restruct { ReStruct }\r\n * @param srcId { number }\r\n * @param dstId { number }\r\n * @return { Action }\r\n */\r\nexport function fromAtomMerge(restruct, srcId, dstId) {\r\n    if (srcId === dstId)\r\n        return new Action();\r\n    const fragAction = new Action();\r\n    mergeFragmentsIfNeeded(fragAction, restruct, srcId, dstId);\r\n    const action = new Action();\r\n    const atomNeighbors = restruct.molecule.atomGetNeighbors(srcId);\r\n    atomNeighbors.forEach((nei) => {\r\n        const bond = restruct.molecule.bonds.get(nei.bid);\r\n        if (dstId === bond.begin || dstId === bond.end) {\r\n            // src & dst have one nei\r\n            action.addOp(new BondDelete(nei.bid));\r\n            return;\r\n        }\r\n        const begin = bond.begin === nei.aid ? nei.aid : dstId;\r\n        const end = bond.begin === nei.aid ? dstId : nei.aid;\r\n        const mergeBondId = restruct.molecule.findBondId(begin, end);\r\n        if (mergeBondId === null) {\r\n            action.addOp(new BondAdd(begin, end, bond));\r\n        }\r\n        else {\r\n            // replace old bond with new bond\r\n            const attrs = Bond.getAttrHash(bond);\r\n            Object.keys(attrs).forEach((key) => {\r\n                action.addOp(new BondAttr(mergeBondId, key, attrs[key]));\r\n            });\r\n        }\r\n        action.addOp(new BondDelete(nei.bid));\r\n    });\r\n    const attrs = Atom.getAttrHash(restruct.molecule.atoms.get(srcId));\r\n    if (atomGetDegree(restruct, srcId) === 1 && attrs.label === '*') {\r\n        attrs.label = 'C';\r\n    }\r\n    Object.keys(attrs).forEach((key) => {\r\n        if (key !== 'stereoLabel' && key !== 'stereoParity') {\r\n            action.addOp(new AtomAttr(dstId, key, attrs[key]));\r\n        }\r\n    });\r\n    const sgChanged = removeAtomFromSgroupIfNeeded(action, restruct, srcId);\r\n    if (sgChanged)\r\n        removeSgroupIfNeeded(action, restruct, [srcId]);\r\n    action.addOp(new AtomDelete(srcId));\r\n    const dstAtomNeighbors = restruct.molecule.atomGetNeighbors(dstId);\r\n    const bond = restruct.molecule.bonds.get(dstAtomNeighbors[0]?.bid || atomNeighbors[0]?.bid);\r\n    return action\r\n        .perform(restruct)\r\n        .mergeWith(fragAction)\r\n        .mergeWith(fromBondStereoUpdate(restruct, bond));\r\n}\r\nexport function mergeFragmentsIfNeeded(action, restruct, srcId, dstId) {\r\n    const frid = atomGetAttr(restruct, srcId, 'fragment');\r\n    const frid2 = atomGetAttr(restruct, dstId, 'fragment');\r\n    if (frid2 === frid || typeof frid2 !== 'number') {\r\n        return;\r\n    }\r\n    const struct = restruct.molecule;\r\n    const rgid = RGroup.findRGroupByFragment(struct.rgroups, frid2);\r\n    if (!(typeof rgid === 'undefined')) {\r\n        action\r\n            .mergeWith(fromRGroupFragment(restruct, null, frid2))\r\n            .mergeWith(fromUpdateIfThen(restruct, 0, rgid));\r\n    }\r\n    const fridAtoms = struct.getFragmentIds(frid);\r\n    const atomsToNewFrag = [];\r\n    struct.atoms.forEach((atom, aid) => {\r\n        if (atom.fragment === frid2)\r\n            atomsToNewFrag.push(aid);\r\n    });\r\n    const moveAtomsAction = fromAtomsFragmentAttr(restruct, atomsToNewFrag, frid);\r\n    mergeSgroups(action, restruct, fridAtoms, dstId);\r\n    action.addOp(new FragmentDelete(frid2).perform(restruct));\r\n    action.mergeWith(moveAtomsAction);\r\n}\r\nexport function mergeSgroups(action, restruct, srcAtoms, dstAtom) {\r\n    const sgroups = atomGetSGroups(restruct, dstAtom);\r\n    sgroups.forEach((sid) => {\r\n        const sgroup = restruct.molecule.sgroups.get(sid);\r\n        const notExpandedContexts = ['Atom', 'Bond', 'Group'];\r\n        if (sgroup.type === 'DAT' &&\r\n            notExpandedContexts.includes(sgroup.data.context)) {\r\n            return;\r\n        }\r\n        const atomsToSgroup = without(sgroup.atoms, srcAtoms);\r\n        atomsToSgroup.forEach((aid) => action.addOp(new SGroupAtomAdd(sid, aid).perform(restruct)));\r\n    });\r\n}\r\nexport function checkAtomValence(restruct, atomId) {\r\n    const action = new Action();\r\n    if (!restruct.atoms.has(atomId))\r\n        return action;\r\n    action.addOp(new CalcImplicitH([atomId]));\r\n    return action.perform(restruct);\r\n}\r\n//# sourceMappingURL=atom.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/operations/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/utils.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/rgroup.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/sgroup.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/action.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/application/editor/actions/bond.ts","/usr/local/google/home/waich/workspace/ketcher/node_modules/@types/lodash/fp.d.ts"],"map":"{\"version\":3,\"file\":\"atom.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/application/editor/actions/atom.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/application/editor/actions/atom.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Action } from './action';\r\nexport declare function fromAtomAddition(restruct: any, pos: any, atom: any): Action;\r\n/**\r\n * @param restruct { ReStruct }\r\n * @param ids { Array<number>|number }\r\n * @param attrs { object }\r\n * @param reset { boolean? }\r\n */\r\nexport declare function fromAtomsAttrs(restruct: any, ids: any, attrs: any, reset: any): Action;\r\nexport declare function fromStereoAtomAttrs(restruct: any, aid: any, attrs: any, withReverse: any): Action;\r\nexport declare function fromAtomsFragmentAttr(restruct: any, aids: any, newfrid: any): Action;\r\n/**\r\n * @param restruct { ReStruct }\r\n * @param srcId { number }\r\n * @param dstId { number }\r\n * @return { Action }\r\n */\r\nexport declare function fromAtomMerge(restruct: any, srcId: any, dstId: any): Action;\r\nexport declare function mergeFragmentsIfNeeded(action: any, restruct: any, srcId: any, dstId: any): void;\r\nexport declare function mergeSgroups(action: any, restruct: any, srcAtoms: any, dstAtom: any): void;\r\nexport declare function checkAtomValence(restruct: any, atomId: any): Action;\r\n"}}
