{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Molfile } from './molfile';\r\nexport class MolSerializer {\r\n    static DefaultOptions = {\r\n        badHeaderRecover: false,\r\n        ignoreErrors: false,\r\n        noRgroups: false,\r\n        preserveIndigoDesc: false,\r\n        reactionRelayout: false\r\n    };\r\n    options;\r\n    constructor(options) {\r\n        this.options = { ...MolSerializer.DefaultOptions, ...options };\r\n    }\r\n    deserialize(content) {\r\n        const molfile = new Molfile();\r\n        const lines = content?.split(/\\r\\n|[\\n\\r]/g);\r\n        const parseCTFileParams = {\r\n            molfileLines: lines,\r\n            shouldReactionRelayout: this.options.reactionRelayout,\r\n            ignoreChiralFlag: this.options.ignoreChiralFlag\r\n        };\r\n        try {\r\n            return molfile.parseCTFile(parseCTFileParams);\r\n        }\r\n        catch (ex) {\r\n            if (this.options.badHeaderRecover) {\r\n                try {\r\n                    // check whether there's an extra empty line on top\r\n                    // this often happens when molfile text is pasted into the dialog window\r\n                    return molfile.parseCTFile({\r\n                        ...parseCTFileParams,\r\n                        molfileLines: lines.slice(1)\r\n                    });\r\n                }\r\n                catch (ex1) {\r\n                    //\r\n                }\r\n                try {\r\n                    // check for a missing first line\r\n                    // this sometimes happens when pasting\r\n                    return molfile.parseCTFile({\r\n                        ...parseCTFileParams,\r\n                        molfileLines: [''].concat(lines)\r\n                    });\r\n                }\r\n                catch (ex2) {\r\n                    //\r\n                }\r\n            }\r\n            throw ex;\r\n        }\r\n    }\r\n    serialize(struct) {\r\n        return new Molfile().saveMolecule(struct, this.options.ignoreErrors, this.options.noRgroups, this.options.preserveIndigoDesc, this.options.ignoreChiralFlag);\r\n    }\r\n}\r\n//# sourceMappingURL=molSerializer.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/mol/mol.types.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/mol/molfile.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/serializers/serializers.types.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/src/domain/entities/index.ts"],"map":"{\"version\":3,\"file\":\"molSerializer.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/domain/serializers/mol/molSerializer.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAG7E,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AAInC,MAAM,OAAO,aAAa;IACxB,MAAM,CAAC,cAAc,GAAyB;QAC5C,gBAAgB,EAAE,KAAK;QACvB,YAAY,EAAE,KAAK;QACnB,SAAS,EAAE,KAAK;QAChB,kBAAkB,EAAE,KAAK;QACzB,gBAAgB,EAAE,KAAK;KACxB,CAAA;IAEQ,OAAO,CAAsB;IAEtC,YAAY,OAAuC;QACjD,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,aAAa,CAAC,cAAc,EAAE,GAAG,OAAO,EAAE,CAAA;IAChE,CAAC;IAED,WAAW,CAAC,OAAe;QACzB,MAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAA;QAC7B,MAAM,KAAK,GAAG,OAAO,EAAE,KAAK,CAAC,cAAc,CAAC,CAAA;QAE5C,MAAM,iBAAiB,GAAG;YACxB,YAAY,EAAE,KAAK;YACnB,sBAAsB,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB;YACrD,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB;SAChD,CAAA;QAED,IAAI;YACF,OAAO,OAAO,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;SAC9C;QAAC,OAAO,EAAE,EAAE;YACX,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;gBACjC,IAAI;oBACF,mDAAmD;oBACnD,wEAAwE;oBACxE,OAAO,OAAO,CAAC,WAAW,CAAC;wBACzB,GAAG,iBAAiB;wBACpB,YAAY,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;qBAC7B,CAAC,CAAA;iBACH;gBAAC,OAAO,GAAG,EAAE;oBACZ,EAAE;iBACH;gBACD,IAAI;oBACF,iCAAiC;oBACjC,sCAAsC;oBACtC,OAAO,OAAO,CAAC,WAAW,CAAC;wBACzB,GAAG,iBAAiB;wBACpB,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;qBACjC,CAAC,CAAA;iBACH;gBAAC,OAAO,GAAG,EAAE;oBACZ,EAAE;iBACH;aACF;YACD,MAAM,EAAE,CAAA;SACT;IACH,CAAC;IAED,SAAS,CAAC,MAAc;QACtB,OAAO,IAAI,OAAO,EAAE,CAAC,YAAY,CAC/B,MAAM,EACN,IAAI,CAAC,OAAO,CAAC,YAAY,EACzB,IAAI,CAAC,OAAO,CAAC,SAAS,EACtB,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAC/B,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAC9B,CAAA;IACH,CAAC\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/domain/serializers/mol/molSerializer.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { MolSerializerOptions } from './mol.types';\r\nimport { Serializer } from '../serializers.types';\r\nimport { Struct } from \"../../entities\";\r\nexport declare class MolSerializer implements Serializer<Struct> {\r\n    static DefaultOptions: MolSerializerOptions;\r\n    readonly options: MolSerializerOptions;\r\n    constructor(options?: Partial<MolSerializerOptions>);\r\n    deserialize(content: string): Struct;\r\n    serialize(struct: Struct): string;\r\n}\r\n"}}
